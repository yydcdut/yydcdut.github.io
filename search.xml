<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[ijkplayer框架简析 — FFmpeg中重要结构体]]></title>
      <url>/2019/02/02/ijkplayer-ffmpeg-relation/</url>
      <content type="html"><![CDATA[<p><code>A complete, cross-platform solution to record, convert and stream audio and video.</code></p>
<p>FFmpeg 是一个多媒体框架，能够处理解编码、转码、mux、demux、流、滤镜和播放。它支持很多格式，且具有高度的移植性。</p>
<h2 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h2><p><code>libavformat</code> - 用于解析和生成音视频格式<br><code>libavcodec</code> - 编解码音视频<br><code>libavutil</code> - 工具库<br><code>libswscale</code> - 提供比例缩放、色彩映射转换、图像颜色空间或格式转换的功能<br><code>libswresample</code> - 音频重采样，采样格式转换和混合等<br><code>libavfilter</code> -  滤波器，如宽高比裁剪、格式化、非格式化、伸缩<br><code>libpostproc</code> - 后期效果处理，如图像的去块效应等<br><code>libavdevice</code> -  硬件采集、加速、显示</p>
<h2 id="结构体之间关系"><a href="#结构体之间关系" class="headerlink" title="结构体之间关系"></a>结构体之间关系</h2><ul>
<li><p>协议（http, rtsp, rtmp, mms） </p>
<p>AVIOContext，URLProtocol，URLContext 主要存储视音频使用的协议的类型以及状态。URLProtocol 存储输入视音频使用的封装格式；每种协议都对应一个URLProtocol结构<em>（注意：FFMPEG中文件也被当做一种协议 “file” ）</em></p>
</li>
<li><p>封装（flv, avi, rmvb, mp4） </p>
<p>AVFormatContext 主要存储视音频封装格式中包含的信息；AVInputFormat 存储输入视音频使用的封装格式。每种视音频封装格式都对应一个 AVInputFormat 结构</p>
</li>
<li><p>编解码（h264, mpeg2, aac, mp3） </p>
<p>每个 AVStream 存储一个视频/音频流的相关数据；每个 AVStream 对应一个 AVCodecContext，存储该视频 / 音频流使用解码方式的相关数据；每个 AVCodecContext 中对应一个 AVCodec，包含该视频/音频对应的解码器。每种解码器都对应一个 AVCodec 结构</p>
</li>
<li><p>数据 </p>
<p>视频的话，每个结构一般是存一帧<em>（音频可能有好几帧）</em></p>
<p>解码前数据：AVPacket；解码后数据：AVFrame</p>
</li>
</ul>
<p><img src="http://yydcdut.com/img/ijkplayer_ffmpeg_%20relation.png" alt="img"></p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><h4 id="AVIOContext"><a href="#AVIOContext" class="headerlink" title="AVIOContext"></a>AVIOContext</h4><p>管理输入输出数据的结构体，<strong>在 <code>avformat_open_input()</code> 中进行初始化</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AVIOContext&#123;</span><br><span class="line">    <span class="keyword">const</span> AVClass *av_class;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer;  <span class="comment">/**&lt; Start of the buffer. */</span></span><br><span class="line">    <span class="keyword">int</span> buffer_size;        <span class="comment">/**&lt; Maximum buffer size */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf_ptr; <span class="comment">/**&lt; Current position in the buffer */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf_end; <span class="comment">/**&lt; End of the data */</span></span><br><span class="line">    <span class="keyword">int</span> (*read_packet)(<span class="keyword">void</span> *opaque, <span class="keyword">uint8_t</span> *buf, <span class="keyword">int</span> buf_size);</span><br><span class="line">    <span class="keyword">int</span> (*write_packet)(<span class="keyword">void</span> *opaque, <span class="keyword">uint8_t</span> *buf, <span class="keyword">int</span> buf_size);</span><br><span class="line">    <span class="keyword">int64_t</span> (*seek)(<span class="keyword">void</span> *opaque, <span class="keyword">int64_t</span> offset, <span class="keyword">int</span> whence);</span><br><span class="line">    <span class="keyword">int64_t</span> pos;            <span class="comment">/**&lt; position in the file of the current buffer */</span></span><br><span class="line">    <span class="keyword">int</span> must_flush;         <span class="comment">/**&lt; true if the next seek should flush */</span></span><br><span class="line">    <span class="keyword">int</span> eof_reached;        <span class="comment">/**&lt; true if eof reached */</span></span><br><span class="line">    <span class="keyword">int</span> write_flag;         <span class="comment">/**&lt; true if open for writing */</span></span><br><span class="line">    <span class="keyword">int</span> max_packet_size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> checksum;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *checksum_ptr;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*update_checksum)</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> checksum, <span class="keyword">const</span> uint8_t *buf, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> error;              <span class="comment">/**&lt; contains the error code or 0 if no error happened */</span></span><br><span class="line">    <span class="keyword">int</span> (*read_pause)(<span class="keyword">void</span> *opaque, <span class="keyword">int</span> pause);</span><br><span class="line">    <span class="keyword">int64_t</span> (*read_seek)(<span class="keyword">void</span> *opaque, <span class="keyword">int</span> stream_index,</span><br><span class="line">                         <span class="keyword">int64_t</span> timestamp, <span class="keyword">int</span> flags);</span><br><span class="line">    <span class="keyword">int</span> seekable;</span><br><span class="line">    <span class="keyword">int64_t</span> maxsize;</span><br><span class="line">    <span class="keyword">int</span> direct;</span><br><span class="line">    <span class="keyword">int64_t</span> bytes_read;</span><br><span class="line">    <span class="keyword">int</span> seek_count;</span><br><span class="line">    <span class="keyword">int</span> writeout_count;</span><br><span class="line">    <span class="keyword">int</span> orig_buffer_size;</span><br><span class="line">    <span class="keyword">int</span> short_seek_threshold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>unsigned char *buffer : 缓存开始位置</li>
<li>int buffer_size : 缓存大小（默认32768）</li>
<li>unsigned char *buf_ptr : 当前指针读取到的位置</li>
<li>unsigned char *buf_end : 缓存结束的位置</li>
<li>void *opaque : URLContext 结构体 </li>
</ul>
<p>在解码的情况下，buffer 用于存储 ffmpeg 读入的数据。例如打开一个视频文件的时候，先把数据从硬盘读入buffer，然后在送给解码器用于解码。</p>
<h4 id="URLProtocol"><a href="#URLProtocol" class="headerlink" title="URLProtocol"></a>URLProtocol</h4><p>述了音视频数据传输所使用的协议，每种传输协议 (例如 HTTP、RTMP) 等，都会对应一个 URLProtocol 结构</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> URLProtocol &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">int</span> (*url_open)(URLContext *h, <span class="keyword">const</span> <span class="keyword">char</span> *url, <span class="keyword">int</span> flags);</span><br><span class="line">	<span class="keyword">int</span> (*url_read)(URLContext *h, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> size);</span><br><span class="line">	<span class="keyword">int</span> (*url_write)(URLContext *h, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> size);</span><br><span class="line">	<span class="keyword">int64_t</span> (*url_seek)(URLContext *h, <span class="keyword">int64_t</span> pos, <span class="keyword">int</span> whence);</span><br><span class="line">	<span class="keyword">int</span> (*url_close)(URLContext *h);</span><br><span class="line">	<span class="keyword">struct</span> URLProtocol *next;</span><br><span class="line">	<span class="keyword">int</span> (*url_read_pause)(URLContext *h, <span class="keyword">int</span> pause);</span><br><span class="line">	<span class="keyword">int64_t</span> (*url_read_seek)(URLContext *h, <span class="keyword">int</span> stream_index,</span><br><span class="line">		<span class="keyword">int64_t</span> timestamp, <span class="keyword">int</span> flags);</span><br><span class="line">	<span class="keyword">int</span> (*url_get_file_handle)(URLContext *h);</span><br><span class="line">	<span class="keyword">int</span> priv_data_size;</span><br><span class="line">	<span class="keyword">const</span> AVClass *priv_data_class;</span><br><span class="line">	<span class="keyword">int</span> flags;</span><br><span class="line">	<span class="keyword">int</span> (*url_check)(URLContext *h, <span class="keyword">int</span> mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>const char *name : 存储协议的名称，每一种输入协议都对应这样一个结构体</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">URLProtocol ff_rtmp_protocol = &#123;</span><br><span class="line">    .name                = <span class="string">"rtmp"</span>,</span><br><span class="line">    .url_open            = rtmp_open,</span><br><span class="line">    .url_read            = rtmp_read,</span><br><span class="line">    .url_write           = rtmp_write,</span><br><span class="line">    .url_close           = rtmp_close,</span><br><span class="line">    .url_read_pause      = rtmp_read_pause,</span><br><span class="line">    .url_read_seek       = rtmp_read_seek,</span><br><span class="line">    .url_get_file_handle = rtmp_get_file_handle,</span><br><span class="line">    .priv_data_size      = <span class="keyword">sizeof</span>(RTMP),</span><br><span class="line">    .flags               = URL_PROTOCOL_FLAG_NETWORK,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>等号右边的函数是完成具体读写功能的函数。可以看一下 file 协议的几个函数（file.c）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">file_read</span><span class="params">(URLContext *h, <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> size)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = (<span class="keyword">intptr_t</span>) h-&gt;priv_data;</span><br><span class="line">    <span class="keyword">int</span> r = read(fd, buf, size);</span><br><span class="line">    <span class="keyword">return</span> (-<span class="number">1</span> == r)?AVERROR(errno):r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">file_write</span><span class="params">(URLContext *h, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> size)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = (<span class="keyword">intptr_t</span>) h-&gt;priv_data;</span><br><span class="line">    <span class="keyword">int</span> r = write(fd, buf, size);</span><br><span class="line">    <span class="keyword">return</span> (-<span class="number">1</span> == r)?AVERROR(errno):r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">file_get_handle</span><span class="params">(URLContext *h)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">intptr_t</span>) h-&gt;priv_data;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">file_check</span><span class="params">(URLContext *h, <span class="keyword">int</span> mask)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> stat st;</span><br><span class="line">    <span class="keyword">int</span> ret = stat(h-&gt;filename, &amp;st);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> AVERROR(errno);</span><br><span class="line"> </span><br><span class="line">    ret |= st.st_mode&amp;S_IRUSR ? mask&amp;AVIO_FLAG_READ  : <span class="number">0</span>;</span><br><span class="line">    ret |= st.st_mode&amp;S_IWUSR ? mask&amp;AVIO_FLAG_WRITE : <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> CONFIG_FILE_PROTOCOL</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">file_open</span><span class="params">(URLContext *h, <span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> flags)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> access;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line"> </span><br><span class="line">    av_strstart(filename, <span class="string">"file:"</span>, &amp;filename);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (flags &amp; AVIO_FLAG_WRITE &amp;&amp; flags &amp; AVIO_FLAG_READ) &#123;</span><br><span class="line">        access = O_CREAT | O_TRUNC | O_RDWR;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; AVIO_FLAG_WRITE) &#123;</span><br><span class="line">        access = O_CREAT | O_TRUNC | O_WRONLY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        access = O_RDONLY;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> O_BINARY</span></span><br><span class="line">    access |= O_BINARY;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    fd = open(filename, access, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> AVERROR(errno);</span><br><span class="line">    h-&gt;priv_data = (<span class="keyword">void</span> *) (<span class="keyword">intptr_t</span>) fd;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* <span class="doctag">XXX:</span> use llseek */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> int64_t <span class="title">file_seek</span><span class="params">(URLContext *h, int64_t pos, <span class="keyword">int</span> whence)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = (<span class="keyword">intptr_t</span>) h-&gt;priv_data;</span><br><span class="line">    <span class="keyword">if</span> (whence == AVSEEK_SIZE) &#123;</span><br><span class="line">        <span class="keyword">struct</span> stat st;</span><br><span class="line">        <span class="keyword">int</span> ret = fstat(fd, &amp;st);</span><br><span class="line">        <span class="keyword">return</span> ret &lt; <span class="number">0</span> ? AVERROR(errno) : st.st_size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lseek(fd, pos, whence);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">file_close</span><span class="params">(URLContext *h)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = (<span class="keyword">intptr_t</span>) h-&gt;priv_data;</span><br><span class="line">    <span class="keyword">return</span> close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="URLContext"><a href="#URLContext" class="headerlink" title="URLContext"></a>URLContext</h4><p>封装了协议对象及协议操作对象</p>
<h3 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h3><h4 id="AVFormatContext"><a href="#AVFormatContext" class="headerlink" title="AVFormatContext"></a>AVFormatContext</h4><p>描述了媒体文件的构成及基本信息，是统领全局的基本结构体，贯穿程序始终，很多函数都要用它作为参数</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AVFormatContext &#123;</span><br><span class="line">	<span class="keyword">const</span> AVClass *av_class;</span><br><span class="line">	<span class="keyword">struct</span> AVInputFormat *iformat;</span><br><span class="line">	<span class="keyword">struct</span> AVOutputFormat *oformat;</span><br><span class="line">	<span class="keyword">void</span> *priv_data;</span><br><span class="line">	AVIOContext *pb;</span><br><span class="line">	<span class="keyword">int</span> ctx_flags;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> nb_streams;</span><br><span class="line">	AVStream **streams;</span><br><span class="line">	<span class="keyword">char</span> filename[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int64_t</span> start_time;</span><br><span class="line">	<span class="keyword">int64_t</span> duration;</span><br><span class="line">	<span class="keyword">int</span> bit_rate;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> packet_size;</span><br><span class="line">    <span class="keyword">int</span> max_delay;</span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> *key;</span><br><span class="line">    <span class="keyword">int</span> keylen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nb_programs;</span><br><span class="line">    AVProgram **programs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> AVCodecID video_codec_id;</span><br><span class="line">    <span class="keyword">enum</span> AVCodecID audio_codec_id;</span><br><span class="line">    <span class="keyword">enum</span> AVCodecID subtitle_codec_id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> max_index_size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> max_picture_buffer;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nb_chapters;</span><br><span class="line">    AVChapter **chapters;</span><br><span class="line">    AVDictionary *metadata;</span><br><span class="line">    <span class="keyword">int64_t</span> start_time_realtime;</span><br><span class="line">    <span class="keyword">int</span> fps_probe_size;</span><br><span class="line">    <span class="keyword">int</span> error_recognition;</span><br><span class="line">    AVIOInterruptCB interrupt_callback;</span><br><span class="line">    <span class="keyword">int64_t</span> max_interleave_delta;</span><br><span class="line">    <span class="keyword">int</span> strict_std_compliance;</span><br><span class="line">    <span class="keyword">int</span> event_flags;</span><br><span class="line">    <span class="keyword">int</span> max_ts_probe;</span><br><span class="line">    <span class="keyword">int</span> avoid_negative_ts;</span><br><span class="line">    <span class="keyword">int</span> ts_id;</span><br><span class="line">    <span class="keyword">int</span> audio_preload;</span><br><span class="line">    <span class="keyword">int</span> max_chunk_duration;</span><br><span class="line">    <span class="keyword">int</span> max_chunk_size;</span><br><span class="line">    <span class="keyword">int</span> use_wallclock_as_timestamps;</span><br><span class="line">    <span class="keyword">int</span> avio_flags;</span><br><span class="line">    <span class="keyword">enum</span> AVDurationEstimationMethod duration_estimation_method;</span><br><span class="line">    <span class="keyword">int64_t</span> skip_initial_bytes;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> correct_ts_overflow;</span><br><span class="line">    <span class="keyword">int</span> seek2any;</span><br><span class="line">    <span class="keyword">int</span> probe_score;</span><br><span class="line">    <span class="keyword">int</span> format_probesize;</span><br><span class="line">    <span class="keyword">char</span> *codec_whitelist;</span><br><span class="line">    <span class="keyword">char</span> *format_whitelist;</span><br><span class="line">    AVFormatInternal *internal;</span><br><span class="line">    <span class="keyword">int</span> io_repositioned;</span><br><span class="line">    AVCodec *video_codec;</span><br><span class="line">    AVCodec *audio_codec;</span><br><span class="line">    AVCodec *subtitle_codec;</span><br><span class="line">    AVCodec *data_codec;</span><br><span class="line">    <span class="keyword">int</span> metadata_header_padding;</span><br><span class="line">    <span class="keyword">void</span> *opaque;</span><br><span class="line">    av_format_control_message control_message_cb;</span><br><span class="line">    <span class="keyword">int64_t</span> output_ts_offset;</span><br><span class="line">    <span class="keyword">uint8_t</span> *dump_separator;</span><br><span class="line">    <span class="keyword">enum</span> AVCodecID data_codec_id;</span><br><span class="line">    <span class="keyword">int</span> (*open_cb)(<span class="keyword">struct</span> AVFormatContext *s, AVIOContext **p, <span class="keyword">const</span> <span class="keyword">char</span> *url, <span class="keyword">int</span> flags, <span class="keyword">const</span> AVIOInterruptCB *int_cb, AVDictionary **options);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>struct AVInputFormat *iformat : 输入数据的封装格式，由 <code>avformat_open_input</code> 设置，仅仅在 Demuxing 使用。</li>
<li>struct AVOutputFormat *oformat : 输出数据的封装格式，必须由使用者在<code>avformat_write_header</code>前设置，由 Muxing 使用</li>
<li>priv_data : 在 muxing 中，由 <code>avformat_write_header</code> 设置；在 demuxing 中，由 <code>avformat_open_input</code> 设置</li>
<li>AVIOContext *pb : 输入数据的缓存。如 果<code>iformat/oformat.flags</code> 设置为 <code>AVFMT_NOFILE</code> 的话，该字段不需要设置。对于 Demuxing ，需要在<code>avformat_open_input</code> 前设置，或由 <code>avformat_open_input</code> 设置；对于 Muxing,在 <code>avformat_write_header</code> 前设置</li>
<li>ctx_flags : 码流的信息，表明码流属性的的信号。由 <code>libavformat</code>设置，例如 <code>AVFMTCTX_NOHEADER</code></li>
<li>nb_streams : 指 <code>AVFormatContext.streams</code> 的数量，必须由 <code>avformat_new_stream</code>设置</li>
<li>AVStream **streams : 文件中所有码流的列表，新的码流创建使用 <code>avformat_new_stream</code> 函数。Demuxing 中，码流由 <code>avformat_open_input</code> 创建。 如果 <code>AVFMTCTX_NOHEADER</code> 被设置，新的码流可以出现在 <code>av_read_frame</code> 中。Muxing 中，码流在 <code>avformat_write_header</code> 之前由用户创建，它的释放是由 <code>avformat_free_context</code>完成的</li>
<li>filename : 输入或输出的文件名，Demuxing 中由 <code>avformat_open_input</code> 设置，Muxing 中在使用 <code>avformat_write_header</code> 前由调用者设置</li>
<li>int64_t duration : 码流的时长</li>
<li>bit_rate : 比特率</li>
<li>AVDictionary *metadata : 元数据，适用于整个文件。通过 <code>av_dict_get()</code> 函数获得视频的原数据</li>
</ul>
<h4 id="AVInputFormat"><a href="#AVInputFormat" class="headerlink" title="AVInputFormat"></a>AVInputFormat</h4><p>解复用器对象，每种作为输入的封装格式 (例如 <em>FLV</em>、<em>MP4</em>、<em>TS</em> 等) 对应一个该结构体</p>
<h4 id="AVOutputFormat"><a href="#AVOutputFormat" class="headerlink" title="AVOutputFormat"></a>AVOutputFormat</h4><p>复用器对象，每种作为输出的封装格式（例如 <em>FLV</em>, <em>MP4</em>、<em>TS</em> 等）对应一个该结构体</p>
<h4 id="AVStream"><a href="#AVStream" class="headerlink" title="AVStream"></a>AVStream</h4><p>用于描述一个视频 / 音频流的相关数据信息</p>
<h3 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h3><h4 id="AVCodecContext"><a href="#AVCodecContext" class="headerlink" title="AVCodecContext"></a>AVCodecContext</h4><p>描述编解码器上下文的数据结构，包含了众多编解码器需要的参数信息</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AVCodecContext&#123;</span><br><span class="line">	<span class="keyword">const</span> AVClass *av_class;</span><br><span class="line">	<span class="keyword">int</span> log_level_offset;</span><br><span class="line">	<span class="keyword">enum</span> AVMediaType codec_type;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">struct</span> AVCodec *codec;</span><br><span class="line">	<span class="keyword">enum</span> AVCodecID     codec_id;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> codec_tag;</span><br><span class="line">	<span class="keyword">void</span> *priv_data;</span><br><span class="line">	<span class="keyword">struct</span> AVCodecInternal *internal;</span><br><span class="line">	<span class="keyword">void</span> *opaque;</span><br><span class="line">	<span class="keyword">int</span> bit_rate;</span><br><span class="line">	<span class="keyword">int</span> bit_rate_tolerance;</span><br><span class="line">	<span class="keyword">int</span> global_quality;</span><br><span class="line">	<span class="keyword">int</span> compression_level;</span><br><span class="line">	<span class="keyword">int</span> flags;</span><br><span class="line">	<span class="keyword">int</span> flags2;</span><br><span class="line">	<span class="keyword">uint8_t</span> *extradata;</span><br><span class="line">	<span class="keyword">int</span> extradata_size;</span><br><span class="line">	AVRational time_base;</span><br><span class="line">	<span class="keyword">int</span> ticks_per_frame;</span><br><span class="line">	<span class="keyword">int</span> delay;</span><br><span class="line">	<span class="keyword">int</span> width, height;</span><br><span class="line">	<span class="keyword">int</span> coded_width, coded_height;</span><br><span class="line">	<span class="keyword">int</span> gop_size;</span><br><span class="line">	<span class="keyword">enum</span> AVPixelFormat pix_fmt;</span><br><span class="line">	<span class="keyword">void</span> (*draw_horiz_band)(<span class="keyword">struct</span> AVCodecContext *s,</span><br><span class="line">                            <span class="keyword">const</span> AVFrame *src, <span class="keyword">int</span> offset[AV_NUM_DATA_POINTERS],</span><br><span class="line">                            <span class="keyword">int</span> y, <span class="keyword">int</span> type, <span class="keyword">int</span> height);</span><br><span class="line">	<span class="function"><span class="keyword">enum</span> <span class="title">AVPixelFormat</span> <span class="params">(*get_format)</span><span class="params">(<span class="keyword">struct</span> AVCodecContext *s, <span class="keyword">const</span> <span class="keyword">enum</span> AVPixelFormat * fmt)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> max_b_frames;</span><br><span class="line">	<span class="keyword">float</span> b_quant_factor;</span><br><span class="line">	<span class="keyword">int</span> b_frame_strategy;</span><br><span class="line">	<span class="keyword">float</span> b_quant_offset;</span><br><span class="line">	<span class="keyword">int</span> has_b_frames;</span><br><span class="line">	<span class="keyword">int</span> mpeg_quant; 		<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">float</span> i_quant_factor; 	<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">float</span> i_quant_offset; 	<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">float</span> lumi_masking;		<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">float</span> temporal_cplx_masking; <span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">float</span> spatial_cplx_masking;  <span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">float</span> p_masking;		<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">float</span> dark_masking;		<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">int</span> slice_count;</span><br><span class="line">	<span class="keyword">int</span> prediction_method;	<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">int</span> *slice_offset;</span><br><span class="line">	AVRational sample_aspect_ratio;</span><br><span class="line">	<span class="keyword">int</span> me_cmp;				<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">int</span> me_sub_cmp;			<span class="comment">/*decoding: unused*/</span></span><br><span class="line">	<span class="keyword">int</span> mb_cmp;				<span class="comment">/*decoding: unused*/</span></span><br><span class="line">    ...</span><br><span class="line">&#125;AVCodecContext;</span><br></pre></td></tr></table></figure>
<ul>
<li>AVMediaType codec_type : 编解码器的类型，如音频、视频、字幕</li>
<li>AVCdec *codec : 采用的解码器 AVCodec</li>
<li>int bit_rate : 平均比特率</li>
<li>uint8_t *extradata; int extradata_size : 针对特定编码器包含的附加信息（例如对于H.264解码器来说，存储SPS，PPS等）</li>
<li>AVRational time_base : 根据该参数，可以把PTS转化为实际的时间（单位为秒s）</li>
<li>int width, height : 视频的宽高</li>
<li>int refs : 运动估计参考帧的个数</li>
<li>int sample_rate : 采样率</li>
<li>int channels : 声道数</li>
<li>enum AVSampleFormat sample_fmt : 采样格式</li>
<li>int profile : 型（H.264里面就有，其他编码标准应该也有）</li>
<li>int level : 级（和profile差不太多）</li>
</ul>
<p>AVCodecContext 使用 avcodec_alloc_context3 分配，该函数除了分配 AVCodecContext 外，还会初始化默认的字段。分配的内存必须通过 avcodec_free_context 释放。<em>AVCodecContext 中很多的参数是编码的时候使用的，而不是解码的时候使用的</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">avcodec_register_all();</span><br><span class="line">...</span><br><span class="line">codec = avcodec_find_decoder(AV_CODEC_ID_H264);</span><br><span class="line"><span class="keyword">if</span>(!codec)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">context = avcodec_alloc_context3(codec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(avcodec_open2(context, codec, opts) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h5 id="codec-type-编解码器类型"><a href="#codec-type-编解码器类型" class="headerlink" title="codec_type(编解码器类型)"></a>codec_type(编解码器类型)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AVMediaType &#123;</span><br><span class="line">    AVMEDIA_TYPE_UNKNOWN = -<span class="number">1</span>,  <span class="comment">///&lt; Usually treated as AVMEDIA_TYPE_DATA</span></span><br><span class="line">    AVMEDIA_TYPE_VIDEO,</span><br><span class="line">    AVMEDIA_TYPE_AUDIO,</span><br><span class="line">    AVMEDIA_TYPE_DATA,          <span class="comment">///&lt; Opaque data information usually continuous</span></span><br><span class="line">    AVMEDIA_TYPE_SUBTITLE,</span><br><span class="line">    AVMEDIA_TYPE_ATTACHMENT,    <span class="comment">///&lt; Opaque data information usually sparse</span></span><br><span class="line">    AVMEDIA_TYPE_NB</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="sample-fmt-音频采样格式"><a href="#sample-fmt-音频采样格式" class="headerlink" title="sample_fmt(音频采样格式)"></a>sample_fmt(音频采样格式)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AVSampleFormat &#123;</span><br><span class="line">    AV_SAMPLE_FMT_NONE = -<span class="number">1</span>,</span><br><span class="line">    AV_SAMPLE_FMT_U8,          <span class="comment">///&lt; unsigned 8 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_S16,         <span class="comment">///&lt; signed 16 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_S32,         <span class="comment">///&lt; signed 32 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_FLT,         <span class="comment">///&lt; float</span></span><br><span class="line">    AV_SAMPLE_FMT_DBL,         <span class="comment">///&lt; double</span></span><br><span class="line"> </span><br><span class="line">    AV_SAMPLE_FMT_U8P,         <span class="comment">///&lt; unsigned 8 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_S16P,        <span class="comment">///&lt; signed 16 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_S32P,        <span class="comment">///&lt; signed 32 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_FLTP,        <span class="comment">///&lt; float, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_DBLP,        <span class="comment">///&lt; double, planar</span></span><br><span class="line"> </span><br><span class="line">    AV_SAMPLE_FMT_NB           <span class="comment">///&lt; Number of sample formats. DO NOT USE if linking dynamically</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_UNKNOWN -<span class="number">99</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_RESERVED -<span class="number">100</span></span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_MAIN <span class="number">0</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_LOW  <span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_SSR  <span class="number">2</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_LTP  <span class="number">3</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_HE   <span class="number">4</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_HE_V2 <span class="number">28</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_LD   <span class="number">22</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_AAC_ELD  <span class="number">38</span></span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_DTS         <span class="number">20</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_DTS_ES      <span class="number">30</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_DTS_96_24   <span class="number">40</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_DTS_HD_HRA  <span class="number">50</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_DTS_HD_MA   <span class="number">60</span></span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG2_422    <span class="number">0</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG2_HIGH   <span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG2_SS     <span class="number">2</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG2_SNR_SCALABLE  <span class="number">3</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG2_MAIN   <span class="number">4</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG2_SIMPLE <span class="number">5</span></span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_CONSTRAINED  (<span class="number">1</span>&lt;&lt;<span class="number">9</span>)  <span class="comment">// 8+1; constraint_set1_flag</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_INTRA        (<span class="number">1</span>&lt;&lt;<span class="number">11</span>) <span class="comment">// 8+3; constraint_set3_flag</span></span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_BASELINE             <span class="number">66</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_CONSTRAINED_BASELINE (<span class="number">66</span>|FF_PROFILE_H264_CONSTRAINED)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_MAIN                 <span class="number">77</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_EXTENDED             <span class="number">88</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH                 <span class="number">100</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH_10              <span class="number">110</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH_10_INTRA        (<span class="number">110</span>|FF_PROFILE_H264_INTRA)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH_422             <span class="number">122</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH_422_INTRA       (<span class="number">122</span>|FF_PROFILE_H264_INTRA)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH_444             <span class="number">144</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH_444_PREDICTIVE  <span class="number">244</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_HIGH_444_INTRA       (<span class="number">244</span>|FF_PROFILE_H264_INTRA)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_H264_CAVLC_444            <span class="number">44</span></span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_VC1_SIMPLE   <span class="number">0</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_VC1_MAIN     <span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_VC1_COMPLEX  <span class="number">2</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_VC1_ADVANCED <span class="number">3</span></span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_SIMPLE                     <span class="number">0</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_SIMPLE_SCALABLE            <span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_CORE                       <span class="number">2</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_MAIN                       <span class="number">3</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_N_BIT                      <span class="number">4</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_SCALABLE_TEXTURE           <span class="number">5</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION      <span class="number">6</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE     <span class="number">7</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_HYBRID                     <span class="number">8</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_ADVANCED_REAL_TIME         <span class="number">9</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_CORE_SCALABLE             <span class="number">10</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_ADVANCED_CODING           <span class="number">11</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_ADVANCED_CORE             <span class="number">12</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE <span class="number">13</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_SIMPLE_STUDIO             <span class="number">14</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FF_PROFILE_MPEG4_ADVANCED_SIMPLE           <span class="number">15</span></span></span><br></pre></td></tr></table></figure>
<h4 id="AVCodec"><a href="#AVCodec" class="headerlink" title="AVCodec"></a>AVCodec</h4><p>编解码器对象，每种编解码格式 (例如 H.264、AAC 等）对应一个该结构体；每个 AVCodecContext 中含有一个 AVCodec</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AVCodec&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *long_name;</span><br><span class="line">    <span class="keyword">enum</span> AVMediaType type;</span><br><span class="line">    <span class="keyword">enum</span> AVCodecID id;</span><br><span class="line">    <span class="keyword">int</span> capabilities;</span><br><span class="line">    <span class="keyword">const</span> AVRational *supported_framerates; <span class="comment">///&lt; array of supported framerates, or NULL if any, array is terminated by &#123;0,0&#125;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">enum</span> AVPixelFormat *pix_fmts;     <span class="comment">///&lt; array of supported pixel formats, or NULL if unknown, array is terminated by -1</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *supported_samplerates;       <span class="comment">///&lt; array of supported audio samplerates, or NULL if unknown, array is terminated by 0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">enum</span> AVSampleFormat *sample_fmts; <span class="comment">///&lt; array of supported sample formats, or NULL if unknown, array is terminated by -1</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint64_t</span> *channel_layouts;         <span class="comment">///&lt; array of support channel layouts, or NULL if unknown. array is terminated by 0</span></span><br><span class="line">    <span class="keyword">uint8_t</span> max_lowres;                     <span class="comment">///&lt; maximum value for lowres supported by the decoder, no direct access, use av_codec_get_max_lowres()</span></span><br><span class="line">    <span class="keyword">const</span> AVClass *priv_class;              <span class="comment">///&lt; AVClass for the private context</span></span><br><span class="line">    <span class="keyword">const</span> AVProfile *profiles;              <span class="comment">///&lt; array of recognized profiles, or NULL if unknown, array is terminated by &#123;FF_PROFILE_UNKNOWN&#125;</span></span><br><span class="line">    <span class="keyword">int</span> priv_data_size;</span><br><span class="line">    <span class="keyword">struct</span> AVCodec *next;</span><br><span class="line">    <span class="keyword">int</span> (*init_thread_copy)(AVCodecContext *);</span><br><span class="line">    <span class="keyword">int</span> (*update_thread_context)(AVCodecContext *dst, <span class="keyword">const</span> AVCodecContext *src);</span><br><span class="line">    <span class="keyword">const</span> AVCodecDefault *defaults;</span><br><span class="line">    <span class="keyword">void</span> (*init_static_data)(<span class="keyword">struct</span> AVCodec *codec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> (*init)(AVCodecContext *);</span><br><span class="line">    <span class="keyword">int</span> (*encode_sub)(AVCodecContext *, <span class="keyword">uint8_t</span> *buf, <span class="keyword">int</span> buf_size,</span><br><span class="line">    <span class="keyword">int</span> (*encode2)(AVCodecContext *avctx, AVPacket *avpkt, <span class="keyword">const</span> AVFrame *frame,</span><br><span class="line">                   <span class="keyword">int</span> *got_packet_ptr);</span><br><span class="line">    <span class="keyword">int</span> (*decode)(AVCodecContext *, <span class="keyword">void</span> *outdata, <span class="keyword">int</span> *outdata_size, AVPacket *avpkt);</span><br><span class="line">    <span class="keyword">int</span> (*close)(AVCodecContext *);</span><br><span class="line">    <span class="keyword">void</span> (*flush)(AVCodecContext *);</span><br><span class="line">    <span class="keyword">int</span> caps_internal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>name : 具体的 CODEC 的名称的简短描述，比如 “HEVC”/“H264” 等</li>
<li>long_name : CODEC 名称的详细描述，比如 “HEVC (High Efficiency Video Coding)”</li>
<li>type : 媒体类型的字段，它是 enum 型的，表示视频、音频、字幕等，比如AVMEDIA_TYPE_VIDEO、AVMEIDA_TYPE_AUDIO</li>
<li>id : 唯一标识的 CODEC 类型，比如 AV_CODEC_ID_HEVC</li>
<li>supported_framerates : 支持的视频帧率的数组，以{0，0}作为结束</li>
<li>pix_fmts : 编解码器支持的图像格式的数组，以 -1 作为结束</li>
<li>profiles : 编解码器支持的 Profile，以 HEVC 为例，包含 “Main” / “Main10” / “Main Still Picture”</li>
<li>supported_samplerates : 支持的音频采样率</li>
<li>sample_fmts : 支持的音频采样格式</li>
<li>channel_layouts : 支持的音频声道数</li>
<li>priv_data_size : 私有数据的大小</li>
</ul>
<h5 id="enum-AVMediaType-type"><a href="#enum-AVMediaType-type" class="headerlink" title="enum AVMediaType type"></a>enum AVMediaType type</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AVMediaType &#123;</span><br><span class="line">    AVMEDIA_TYPE_UNKNOWN = -<span class="number">1</span>,  <span class="comment">///&lt; Usually treated as AVMEDIA_TYPE_DATA</span></span><br><span class="line">    AVMEDIA_TYPE_VIDEO,</span><br><span class="line">    AVMEDIA_TYPE_AUDIO,</span><br><span class="line">    AVMEDIA_TYPE_DATA,          <span class="comment">///&lt; Opaque data information usually continuous</span></span><br><span class="line">    AVMEDIA_TYPE_SUBTITLE,</span><br><span class="line">    AVMEDIA_TYPE_ATTACHMENT,    <span class="comment">///&lt; Opaque data information usually sparse</span></span><br><span class="line">    AVMEDIA_TYPE_NB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="enum-AVCodecID-id"><a href="#enum-AVCodecID-id" class="headerlink" title="enum AVCodecID id"></a>enum AVCodecID id</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AVCodecID &#123;</span><br><span class="line">    AV_CODEC_ID_NONE,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* video codecs */</span></span><br><span class="line">    AV_CODEC_ID_MPEG1VIDEO,</span><br><span class="line">    AV_CODEC_ID_MPEG2VIDEO, <span class="comment">///&lt; preferred ID for MPEG-1/2 video decoding</span></span><br><span class="line">    AV_CODEC_ID_MPEG2VIDEO_XVMC,</span><br><span class="line">    AV_CODEC_ID_H261,</span><br><span class="line">    AV_CODEC_ID_H263,</span><br><span class="line">    AV_CODEC_ID_RV10,</span><br><span class="line">    AV_CODEC_ID_RV20,</span><br><span class="line">    AV_CODEC_ID_MJPEG,</span><br><span class="line">    AV_CODEC_ID_MJPEGB,</span><br><span class="line">    AV_CODEC_ID_LJPEG,</span><br><span class="line">    AV_CODEC_ID_SP5X,</span><br><span class="line">    AV_CODEC_ID_JPEGLS,</span><br><span class="line">    AV_CODEC_ID_MPEG4,</span><br><span class="line">    AV_CODEC_ID_RAWVIDEO,</span><br><span class="line">    AV_CODEC_ID_MSMPEG4V1,</span><br><span class="line">    AV_CODEC_ID_MSMPEG4V2,</span><br><span class="line">    AV_CODEC_ID_MSMPEG4V3,</span><br><span class="line">    AV_CODEC_ID_WMV1,</span><br><span class="line">    AV_CODEC_ID_WMV2,</span><br><span class="line">    AV_CODEC_ID_H263P,</span><br><span class="line">    AV_CODEC_ID_H263I,</span><br><span class="line">    AV_CODEC_ID_FLV1,</span><br><span class="line">    AV_CODEC_ID_SVQ1,</span><br><span class="line">    AV_CODEC_ID_SVQ3,</span><br><span class="line">    AV_CODEC_ID_DVVIDEO,</span><br><span class="line">    AV_CODEC_ID_HUFFYUV,</span><br><span class="line">    AV_CODEC_ID_CYUV,</span><br><span class="line">    AV_CODEC_ID_H264,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="const-enum-AVPixelFormat-pix-fmts"><a href="#const-enum-AVPixelFormat-pix-fmts" class="headerlink" title="const enum AVPixelFormat *pix_fmts"></a>const enum AVPixelFormat *pix_fmts</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AVPixelFormat &#123;</span><br><span class="line">    AV_PIX_FMT_NONE = -<span class="number">1</span>,</span><br><span class="line">    AV_PIX_FMT_YUV420P,   <span class="comment">///&lt; planar YUV 4:2:0, 12bpp, (1 Cr &amp; Cb sample per 2x2 Y samples)</span></span><br><span class="line">    AV_PIX_FMT_YUYV422,   <span class="comment">///&lt; packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr</span></span><br><span class="line">    AV_PIX_FMT_RGB24,     <span class="comment">///&lt; packed RGB 8:8:8, 24bpp, RGBRGB...</span></span><br><span class="line">    AV_PIX_FMT_BGR24,     <span class="comment">///&lt; packed RGB 8:8:8, 24bpp, BGRBGR...</span></span><br><span class="line">    AV_PIX_FMT_YUV422P,   <span class="comment">///&lt; planar YUV 4:2:2, 16bpp, (1 Cr &amp; Cb sample per 2x1 Y samples)</span></span><br><span class="line">    AV_PIX_FMT_YUV444P,   <span class="comment">///&lt; planar YUV 4:4:4, 24bpp, (1 Cr &amp; Cb sample per 1x1 Y samples)</span></span><br><span class="line">    AV_PIX_FMT_YUV410P,   <span class="comment">///&lt; planar YUV 4:1:0,  9bpp, (1 Cr &amp; Cb sample per 4x4 Y samples)</span></span><br><span class="line">    AV_PIX_FMT_YUV411P,   <span class="comment">///&lt; planar YUV 4:1:1, 12bpp, (1 Cr &amp; Cb sample per 4x1 Y samples)</span></span><br><span class="line">    AV_PIX_FMT_GRAY8,     <span class="comment">///&lt;        Y        ,  8bpp</span></span><br><span class="line">    AV_PIX_FMT_MONOWHITE, <span class="comment">///&lt;        Y        ,  1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb</span></span><br><span class="line">    AV_PIX_FMT_MONOBLACK, <span class="comment">///&lt;        Y        ,  1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb</span></span><br><span class="line">    AV_PIX_FMT_PAL8,      <span class="comment">///&lt; 8 bit with PIX_FMT_RGB32 palette</span></span><br><span class="line">    AV_PIX_FMT_YUVJ420P,  <span class="comment">///&lt; planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV420P and setting color_range</span></span><br><span class="line">    AV_PIX_FMT_YUVJ422P,  <span class="comment">///&lt; planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV422P and setting color_range</span></span><br><span class="line">    AV_PIX_FMT_YUVJ444P,  <span class="comment">///&lt; planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of PIX_FMT_YUV444P and setting color_range</span></span><br><span class="line">    AV_PIX_FMT_XVMC_MPEG2_MC,<span class="comment">///&lt; XVideo Motion Acceleration via common packet passing</span></span><br><span class="line">    AV_PIX_FMT_XVMC_MPEG2_IDCT,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="const-enum-AVSampleFormat-sample-fmts"><a href="#const-enum-AVSampleFormat-sample-fmts" class="headerlink" title="const enum AVSampleFormat *sample_fmts"></a>const enum AVSampleFormat *sample_fmts</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AVSampleFormat &#123;</span><br><span class="line">    AV_SAMPLE_FMT_NONE = -<span class="number">1</span>,</span><br><span class="line">    AV_SAMPLE_FMT_U8,          <span class="comment">///&lt; unsigned 8 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_S16,         <span class="comment">///&lt; signed 16 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_S32,         <span class="comment">///&lt; signed 32 bits</span></span><br><span class="line">    AV_SAMPLE_FMT_FLT,         <span class="comment">///&lt; float</span></span><br><span class="line">    AV_SAMPLE_FMT_DBL,         <span class="comment">///&lt; double</span></span><br><span class="line"> </span><br><span class="line">    AV_SAMPLE_FMT_U8P,         <span class="comment">///&lt; unsigned 8 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_S16P,        <span class="comment">///&lt; signed 16 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_S32P,        <span class="comment">///&lt; signed 32 bits, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_FLTP,        <span class="comment">///&lt; float, planar</span></span><br><span class="line">    AV_SAMPLE_FMT_DBLP,        <span class="comment">///&lt; double, planar</span></span><br><span class="line"> </span><br><span class="line">    AV_SAMPLE_FMT_NB           <span class="comment">///&lt; Number of sample formats. DO NOT USE if linking dynamically</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>每一个编解码器对应一个 AVCodec 该结构体</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AVCodec ff_h264_decoder = &#123;</span><br><span class="line">    .name           = <span class="string">"h264"</span>,</span><br><span class="line">    .type           = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">    .id             = CODEC_ID_H264,</span><br><span class="line">    .priv_data_size = <span class="keyword">sizeof</span>(H264Context),</span><br><span class="line">    .init           = ff_h264_decode_init,</span><br><span class="line">    .close          = ff_h264_decode_end,</span><br><span class="line">    .decode         = decode_frame,</span><br><span class="line">    .capabilities   = <span class="comment">/*CODEC_CAP_DRAW_HORIZ_BAND |*/</span> CODEC_CAP_DR1 | CODEC_CAP_DELAY |</span><br><span class="line">                      CODEC_CAP_SLICE_THREADS | CODEC_CAP_FRAME_THREADS,</span><br><span class="line">    .flush= flush_dpb,</span><br><span class="line">    .long_name = NULL_IF_CONFIG_SMALL(<span class="string">"H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10"</span>),</span><br><span class="line">    .init_thread_copy      = ONLY_IF_THREADS_ENABLED(decode_init_thread_copy),</span><br><span class="line">    .update_thread_context = ONLY_IF_THREADS_ENABLED(decode_update_thread_context),</span><br><span class="line">    .profiles = NULL_IF_CONFIG_SMALL(profiles),</span><br><span class="line">    .priv_class     = &amp;h264_class,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="AVCodecParameters"><a href="#AVCodecParameters" class="headerlink" title="AVCodecParameters"></a>AVCodecParameters</h4><p>编解码参数，每个 AVStream 中都含有一个 AVCodecParameters，用来存放当前流的编解码参数</p>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><h4 id="AVPacket"><a href="#AVPacket" class="headerlink" title="AVPacket"></a>AVPacket</h4><p>存放编码后、解码前的压缩数据，即 ES 数据</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AVPacket&#123;</span><br><span class="line">	AVBufferRef *buf;</span><br><span class="line">	<span class="keyword">int64_t</span>      pts;</span><br><span class="line">	<span class="keyword">int64_t</span>      dts;</span><br><span class="line">	<span class="keyword">uint8_t</span>    *data;</span><br><span class="line">	<span class="keyword">int</span>         size;</span><br><span class="line">	<span class="keyword">int</span> stream_index;</span><br><span class="line">	<span class="keyword">int</span>        flags;</span><br><span class="line">	AVPacketSideData *side_data;</span><br><span class="line">	<span class="keyword">int</span> side_data_elems;</span><br><span class="line">	<span class="keyword">int</span>   duration;</span><br><span class="line">	<span class="keyword">int64_t</span> pos;</span><br><span class="line">	<span class="keyword">int64_t</span> convergence_duration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>pts: 显示时间戳，它的单位是 AVStream-&gt;time_base；如果在文件中没有保存这个值，它被设置为 AV_NOPTS_VALUE。由于图像显示不可能早于图像解压，因此 PTS 必须比 DTS（解码时间戳）大或者相等。某些文件格式中可能会使用 PTS/DTS 表示其他含义，此时时间戳必须转为真正的时间戳才能保存到 AVPacket 结构中</li>
<li>dts : 解码时间戳，它的单位是 AVStream-&gt;time_base，表示压缩视频解码的时间，如果文件中没有保存该值，它被设置为 AV_NOPTS_VALUE</li>
<li>data : 指向真正的压缩编码的数据</li>
<li>size : 表示该 AVPacket 结构中 data 字段所指向的压缩数据的大小</li>
<li>stream_index : 标识该 AVPacket 结构所属的视频流或音频流</li>
<li>duration : 该 AVPacket 包以 AVStream-&gt;time_base 为单位，所持续的时间，0 表示未知，或者为显示时间戳的差值(next_pts - this pts)</li>
<li>pos : 表示该 AVPacket 数据在媒体中的位置，即字节偏移量</li>
</ul>
<h4 id="AVFrame"><a href="#AVFrame" class="headerlink" title="AVFrame"></a>AVFrame</h4><p>存放编码前、解码后的原始数据，如 YUV 格式的视频数据或 PCM 格式的音频数据等</p>
<p>AVFrame 结构体必须使用 <code>av_frame_alloc()</code> 分配，注意该函数只是分配了 AVFrame 结构本身，它的 data 区域要用其他方式管理；该结构体的释放要用 <code>av_frame_free()</code>。</p>
<p>AVFrame 结构体通常只需分配一次，之后即可通过保存不同的数据来重复多次使用，比如一个 AVFrame 结构可以保存从解码器中解码出的多帧数据。此时，就可以使用<code>av_frame_unref()</code>释放任何由 Frame 保存的参考帧并还原回最原始的状态。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AVFrame&#123;</span><br><span class="line">	<span class="keyword">uint8_t</span> *data[AV_NUM_DATA_POINTERS];</span><br><span class="line">	<span class="keyword">int</span> linesize[AV_NUM_DATA_POINTERS];</span><br><span class="line">	<span class="keyword">uint8_t</span> **extended_data;</span><br><span class="line">	<span class="keyword">int</span> width, height;</span><br><span class="line">	<span class="keyword">int</span> nb_samples; <span class="comment">/* number of audio samples(per channel) described by this frame */</span></span><br><span class="line">	<span class="keyword">int</span> format;</span><br><span class="line">	<span class="keyword">int</span> key_frame; <span class="comment">/* 1-&gt;keyframe, 0-&gt;not*/</span></span><br><span class="line">	<span class="keyword">enum</span> AVPictureType pict_type;</span><br><span class="line">	AVRational sample_aspect_ratio;</span><br><span class="line">	<span class="keyword">int64_t</span> pts;</span><br><span class="line">	<span class="keyword">int64_t</span> pkt_pts;</span><br><span class="line">	<span class="keyword">int64_t</span> pkt_dts;</span><br><span class="line">	<span class="keyword">int</span> coded_picture_number;</span><br><span class="line">	<span class="keyword">int</span> display_picture_number;</span><br><span class="line">	<span class="keyword">int</span> quality;</span><br><span class="line">	<span class="keyword">void</span> *opaque; <span class="comment">/* for some private data of the user */</span></span><br><span class="line">	<span class="keyword">uint64_t</span> error[AV_NUM_DATA_POINTERS];</span><br><span class="line">	<span class="keyword">int</span> repeat_pict;</span><br><span class="line">	<span class="keyword">int</span> interlaced_frame;</span><br><span class="line">	<span class="keyword">int</span> top_field_first;	<span class="comment">/* If the content is interlaced, is top field displayed first */</span></span><br><span class="line">	<span class="keyword">int</span> palette_has_changed;</span><br><span class="line">    <span class="keyword">int64_t</span> reordered_opaque;</span><br><span class="line">    <span class="keyword">int</span> sample_rate;    <span class="comment">/*Sample rate of the audio data*/</span></span><br><span class="line">    <span class="keyword">uint64_t</span> channel_layout; <span class="comment">/*channel layout of the audio data*/</span></span><br><span class="line">    AVBufferRef *buf[AV_NUM_DATA_POINTERS];</span><br><span class="line">    AVBufferRef **extended_buf;</span><br><span class="line">    <span class="keyword">int</span> nb_exteneded_buf;</span><br><span class="line">    AVFrameSideData **side_data;</span><br><span class="line">    <span class="keyword">int</span> nb_side_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line">    <span class="keyword">enum</span> AVColorRange color_range;</span><br><span class="line">    <span class="keyword">enum</span> AVColorPrimaries color_primaries;</span><br><span class="line">    <span class="keyword">enum</span> AVColorTransferCharacteristic color_trc;</span><br><span class="line">    <span class="keyword">enum</span> AVColorSpace colorspace;</span><br><span class="line">    <span class="keyword">enum</span> AVChromaLocation chroma_location;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int64_t</span> best_effort_timestamp;</span><br><span class="line">    <span class="keyword">int64_t</span> pkt_pos;</span><br><span class="line">    <span class="keyword">int64_t</span> pkt_duration;</span><br><span class="line">    AVDictionary *metadata;</span><br><span class="line">    <span class="keyword">int</span> decode _error_flags;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> channels;</span><br><span class="line">    <span class="keyword">int</span> pkt_size;</span><br><span class="line">    AVBufferRef *qp_table_buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>data : 指向图片或信道的指针，与初始化时分配的大小可能不同，一些解码器取数据范围超出 (0,0)-(width, height) ，具体请查看 <code>avcodec_align_dimensions2()</code> 方法。一些过滤器或扫描器读数据时可能会超过 16 字节，所以当它们使用时，必须额外分配 16 字节。对于 packed 格式的数据(例如 RGB24)，会存放到 data[0] 里面；对于 planar 格式的数据(例如 YUV420P)，则会分开 data[0]/data[1]/data[2]（YUV420P 中 data[0] 存放 Y，data[1] 存放 U，data[2] 存放 V）</li>
<li>linesize : 对于视频数据，表示每个图像行的字节大小；对于音频数据，表示每个 Plane 的字节大小，只有linesize[0]可以设置，对于plane 音频，每个信道 channel 必须是相同的。对于视频的 linesize 应为 CPU 的对准要求的倍数，一般为 32。注意 linesize 可大于可用的数据的尺寸，有可能存在由于性能原因额外填充</li>
<li>width/height : 视频的宽高</li>
<li>format : 帧格式,-1表示未设置的帧格式。对于视频帧，该值为 enum 类型的 AVPixelFormat，例如 AV_PIX_FMT_YUV420P；对于音频帧，该值为 enum 型的 AVSampleFormat，例如 AV_SAMPLE_FMT_S16</li>
<li>key_frame : 关键帧，1 表示关键帧，0 表示非关键帧</li>
<li>pict_type : 帧图片类型，例如 I/P/B</li>
<li>sample_aspect_ration : 帧像素的宽高比，使用 AVRational 表示（16:9，4:3…）</li>
<li>pts : 显示时间戳，单位为 time_base</li>
<li>pkt_pts : 该 PTS 是从 AVPacket 结构中拷贝过来的；与之对应的是 pkt_dts</li>
<li>coded_picture_number/display_picture_number : 解码序列号和显示序列号（Display Order/Decoded Order）</li>
<li>interlaced_frame : 表示该帧为 interlace 码流或者为 progressive 码流</li>
<li>top_field_first : 对于 interlace 码流，表示该它是 top first or bottom first</li>
<li>qscale_table : QP 表</li>
<li>mbskip_table : 跳过宏块表</li>
<li>(*motion_val[2])[2] : 运动矢量表</li>
<li>mb_type : 宏块类型表</li>
<li>dct_coeff : DCT 系数，这个没有提取过</li>
<li>ref_index[2] : 运动估计参考帧列表（貌似 H.264 这种比较新的标准才会涉及到多参考帧）</li>
<li>interlaced_frame : 是否是隔行扫描</li>
</ul>
<h5 id="pict-type"><a href="#pict-type" class="headerlink" title="pict_type"></a>pict_type</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> AVPictureType &#123;</span><br><span class="line">    AV_PICTURE_TYPE_NONE = <span class="number">0</span>, <span class="comment">///&lt; Undefined</span></span><br><span class="line">    AV_PICTURE_TYPE_I,     <span class="comment">///&lt; Intra</span></span><br><span class="line">    AV_PICTURE_TYPE_P,     <span class="comment">///&lt; Predicted</span></span><br><span class="line">    AV_PICTURE_TYPE_B,     <span class="comment">///&lt; Bi-dir predicted</span></span><br><span class="line">    AV_PICTURE_TYPE_S,     <span class="comment">///&lt; S(GMC)-VOP MPEG4</span></span><br><span class="line">    AV_PICTURE_TYPE_SI,    <span class="comment">///&lt; Switching Intra</span></span><br><span class="line">    AV_PICTURE_TYPE_SP,    <span class="comment">///&lt; Switching Predicted</span></span><br><span class="line">    AV_PICTURE_TYPE_BI,    <span class="comment">///&lt; BI type</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://me.csdn.net/leixiaohua1020" target="_blank" rel="external">雷霄骅 - FFMPEG</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> c </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learn Java8]]></title>
      <url>/2018/09/02/learn-java8/</url>
      <content type="html"><![CDATA[<p>Java8 学习笔记，PPT 备忘录~</p>
<a id="more"></a>
<h1 id="Java-发展史"><a href="#Java-发展史" class="headerlink" title="Java 发展史"></a>Java 发展史</h1><h3 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK 5"></a>JDK 5</h3><p><img src="http://yydcdut.github.io/img/jdk5.jpeg" alt="jdk5"></p>
<h3 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6"></a>JDK 6</h3><p><img src="http://yydcdut.github.io/img/jdk6.jpeg" alt="jdk6"></p>
<h3 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK 7"></a>JDK 7</h3><p><img src="http://yydcdut.github.io/img/jdk7.jpeg" alt="jdk7"></p>
<h3 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK 8"></a>JDK 8</h3><p><img src="http://yydcdut.github.io/img/jdk8.jpeg" alt="jdk8"></p>
<h1 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h1><p>默认方法让接口<strong>增加新方法</strong>的同时又能保证对使用这个接口的<strong>老版本代码的兼容</strong></p>
<p><img src="http://yydcdut.github.io/img/default_method.gif" alt="default_method.gif"></p>
<p>如果在面向接口编程里面，功能 1 要新增一个方法，在接口中添加了该方法，则实现该接口的其他类都得再去实现这个方法</p>
<ul>
<li>如果改接口的实现类有很多，那么一个个类的去做实现很麻烦</li>
<li>该方法对某些类来说是没有意义的</li>
<li>如果这个接口是对外发布的，其他用户自己还去实现了该接口，当发布新版本的时候，其他用户会很蒙</li>
</ul>
<p>所以在 Java8 中新增了接口默认方法，默认方法让接口<strong>增加新方法</strong>的同时又能保证对使用这个接口的<strong>老版本代码的兼容</strong></p>
<h3 id="二进制兼容"><a href="#二进制兼容" class="headerlink" title="二进制兼容"></a>二进制兼容</h3><p><img src="http://yydcdut.github.io/img/binary-compatible.gif" alt="binary-compatible.gif"></p>
<p>假设 gif 中的 <code>Exoplayer</code>、<code>Exoplayer  Wrapper</code> 和 <code>app</code> 是分别三个团队，当 <code>app</code> 发现一个 bug 后一层层往上报，最终发现是 <code>Exoplayer</code> 团队的 bug，那么 <code>Exoplayer</code> 团队将 bug fix 了，发布了 <code>Exoplayer 2.0</code> :</p>
<ul>
<li>如果  <code>Exoplayer 2.0</code>  不是二进行兼容的，那么 <code>Exoplayer Wrapper</code> 也需要重新编译发布 2.0 版本</li>
<li>如果   <code>Exoplayer 2.0</code>  是二进行兼容的，那么 <code>Exoplayer Wrapper</code> 无需重新编译， <code>app</code> 直接引用  <code>Exoplayer 2.0</code> 边行</li>
</ul>
<p><strong>『二进制兼容指在升级 (bug fix) 库文件的时候，不必重新编译使用这个库的可执行文件或使用这个库的其他库文件，程序的功能不被破坏』</strong></p>
<p><em>接口的修改是二进制兼容的，但是如果这样修改了的话会让程序出现不可控的异常</em></p>
<p><img src="http://yydcdut.github.io/img/interface-binary-compatible.gif" alt="interface-binary-compatible.gif"></p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><img src="http://yydcdut.github.io/img/default-method-default.jpeg" alt="default-method-default.jpeg"></p>
<ul>
<li>必须得有关键字 <code>default</code> 修饰</li>
<li>实现类可以复写接口的默认方法</li>
</ul>
<h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p>一个类只能<strong>继承一个</strong>父类，可以<strong>实现多个</strong>接口</p>
<p>但是加了默认方法之后，在默认方法的使用上出现了一些冲突</p>
<p><img src="http://yydcdut.github.io/img/default-method-conflict.gif" alt="default-method-conflict.gif"></p>
<ul>
<li><strong>类中的方法优先级最高</strong>：<ul>
<li>类或父类中声明的方法的优先级高于任何声明为默认方法的优先级</li>
<li>如果父类中的该方法是抽象的，子类如果不是抽象类则必须实现该方法</li>
</ul>
</li>
<li><strong>子接口优先级更高</strong></li>
<li><strong>如果实现两个接口中的默认方法相同，需要显示解决冲突</strong>：<em>Error: class B inherits unrelated defaults for hello() from types A and C</em></li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>开头以关键字 <code>default</code> 修饰，方法体与常规的类相同</li>
<li>帮助库设计者以向后兼容的方式演进 API</li>
<li>可以用于创建可选方法和行为的多继承</li>
<li>能够解决多继承的冲突</li>
</ul>
<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><p><strong>Optional</strong> 是 Java 8 提供的为了解决 null 安全问题的一个 API</p>
<ul>
<li>NullPointerException 是程序中最典型的异常</li>
<li>让代码充斥着深度嵌套 null 检查 / 代码可读性差</li>
<li>null 某种程度上来说是没有任何意义的</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def path = mManagerData?.getData()?.getInfo()?.getPath() : getDefaultPath();</span><br></pre></td></tr></table></figure>
<p>Java 8 为啥不引入<code>安全操作符</code> 呢？先来看看 <code>Optional</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(mManagerData)</span><br><span class="line">            .map(ManagerData::getData)</span><br><span class="line">            .map(Data::getInfo)</span><br><span class="line">            .map(Info::getPath).orElse(getDefaultPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个样式结构跟 <code>Stream</code> 很相似，当然搭配着 <code>Stream</code> 食用味道更佳</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;ManagerData&gt; <span class="title">getFirstDraftData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkedHashMap&lt;Long, String&gt; linkedHashMap = mDB.getFirst();</span><br><span class="line">    <span class="keyword">if</span> (linkedHashMap.size() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;ManagerData&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ManagerData data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Long, String&gt; entry : linkedHashMap.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">long</span> id = entry.getKey();</span><br><span class="line">        String content = entry.getValue();</span><br><span class="line">        getDirtyOrCleanDraft(dataList, id, content);</span><br><span class="line">        <span class="keyword">if</span> (dataList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            data = dataList.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果是对外提供功能，返回值是一个 <code>Optional</code> 的话更能让调用者知道该怎么操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(mManagerData)</span><br><span class="line">            .map(ManagerData::getData)</span><br><span class="line">            .map(Data::getInfo)</span><br><span class="line">            .map(Info::getPath).orElseGet(() -&gt; getDefaultPath())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>orElse</code> 方法的延时调用版 <code>orElesGet</code> ：如果是 <code>orElse</code> 默认情况下会先去初始化失败情况下的值，如果是 <code>orElesGet</code> 的话，只有失败了的情况才会走其中的方法</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul>
<li>对缺失的变量值进行建模</li>
<li>提供了丰富的 API，与 Stream 十分相似</li>
<li>更好的设计 API ，调用方只需要看一下返回类型就知道该怎么操作</li>
</ul>
<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>用更简洁流畅的代码完成一个功能</p>
<h3 id="举栗"><a href="#举栗" class="headerlink" title="举栗"></a>举栗</h3><h4 id="版本-1"><a href="#版本-1" class="headerlink" title="版本 1"></a>版本 1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterGreenApples</span><span class="params">(List&lt;Apple&gt; list)</span> </span>&#123;</span><br><span class="line">    List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Apple apple : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"green"</span>.equals(apple.color)) &#123;</span><br><span class="line">            result.add(apple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个版本，需要将绿颜色的苹果给挑选出来</p>
<h4 id="版本-2"><a href="#版本-2" class="headerlink" title="版本 2"></a>版本 2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterColorApples</span><span class="params">(List&lt;Apple&gt; list, String color)</span> </span>&#123;</span><br><span class="line">    List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Apple apple : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color.equals(apple.color)) &#123;</span><br><span class="line">            result.add(apple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过第一个版本后，需求改了，颜色可能是各种各样的，那么<strong>将颜色作为参数传进来</strong>的方式来满足需求</p>
<p>####版本 3</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filterColorOrWeightApples</span><span class="params">(List&lt;Apple&gt; list, String color, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">    List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Apple apple : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color.equals(apple.color) || weight &gt; apple.weight) &#123;</span><br><span class="line">            result.add(apple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>又经过一个版本，判断条件可能不止颜色，还有重量，那么再将重量作为参数传进来；但是这样的做法会<strong>显得越来越笨拙</strong></p>
<h4 id="版本-4"><a href="#版本-4" class="headerlink" title="版本 4"></a>版本 4</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Apple&gt; <span class="title">filter</span><span class="params">(List&lt;Apple&gt; list, Filter filter)</span> </span>&#123;</span><br><span class="line">    List&lt;Apple&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Apple apple : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.satisfied(apple)) &#123;</span><br><span class="line">            result.add(apple);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">satisfied</span><span class="params">(Apple apple)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么优化一下，通过类似策略模式的方式，放入不同的算法来实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeightFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">satisfied</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apple.weight &gt; <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">satisfied</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"red"</span>.equals(apple.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list = filter(list, <span class="keyword">new</span> WeightFilter());</span><br><span class="line">list = filter(list, <span class="keyword">new</span> ColorFilter());</span><br></pre></td></tr></table></figure>
<p>这样就把行为抽象出来了，代码适应了需求的变化，但是这个过程很<strong>啰嗦</strong>，因为需要声明很多只需要实例化一次的类</p>
<h4 id="版本-5"><a href="#版本-5" class="headerlink" title="版本 5"></a>版本 5</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list = filter(list, <span class="keyword">new</span> Filter() &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">satisfied</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apple.weight &gt; <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>再优化一下上个版本的问题，改为用匿名内部类，虽然上个版本的问题解决了，但是匿名内部类看起来很笨重，占用空间多，除此之外，有时候看起来还特别费力</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> weight = <span class="number">100</span>;</span><br><span class="line">list = filter(list, <span class="keyword">new</span> Filter() &#123;</span><br><span class="line">    <span class="keyword">int</span> weight = <span class="number">200</span>;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">satisfied</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apple.weight &gt; weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>此时的 <code>weight</code> 看起来就比较费力，到底引用的是外部的还是内部的呢</p>
<h4 id="版本-6"><a href="#版本-6" class="headerlink" title="版本 6"></a>版本 6</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = filter(list, apple -&gt; apple.weight &gt; <span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>通过 lambda 的方式，再来解决匿名内部类带来的问题</p>
<h3 id="Lambda-结构"><a href="#Lambda-结构" class="headerlink" title="Lambda 结构"></a>Lambda 结构</h3><p><img src="http://yydcdut.github.io/img/lambda-explain.jpeg" alt="lambda-explain.jpeg"></p>
<p> <img src="http://yydcdut.github.io/img/lambda-explain2.jpeg" alt="lambda-explain2.jpeg"></p>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>只定义了一个抽象方法的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>如果再往 <code>Runnable</code> 中加方法，会导致编译失败</em></p>
<h3 id="占用字节码更少"><a href="#占用字节码更少" class="headerlink" title="占用字节码更少"></a>占用字节码更少</h3><p><img src="http://yydcdut.github.io/img/lambda-bytecode.jpeg" alt="lambda-bytecode.jpeg"></p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul>
<li>更简洁的传递代码</li>
<li>函数式接口就是只有一个抽象方法的接口</li>
<li>只有在函数式接口的地方才能使用 Lambda</li>
<li>方法引用可以复用现有的方法实现并直接传递</li>
</ul>
<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>Stream 可以更好的、更为流畅的、更为语义化的操作集合</p>
<p>Stream 作为 Java 8 的一大亮点，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言 + 多核时代综合影响的产物。</p>
<p><img src="http://yydcdut.github.io/img/stream_part.gif" alt="stream_part.gif"></p>
<p>流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。</p>
<ul>
<li><p>数据操作又可以分为无状态的 (Stateless) 和有状态的 (Stateful) ，无状态中间操作是指元素的处理不受前面元素的影响，而有状态的中间操作必须等到所有元素处理之后才知道最终结果，比如排序是有状态操作，在读取所有元素之前并不能确定排序结果</p>
</li>
<li><p>终端操作又可以分为短路操作和非短路操作，短路操作是指不用处理全部元素就可以返回结果，比如找到第一个满足条件的元素</p>
</li>
</ul>
<h3 id="Stream-举栗"><a href="#Stream-举栗" class="headerlink" title="Stream 举栗"></a>Stream 举栗</h3><p>结构图，栗子中要用到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</span><br><span class="line">    String type;<span class="comment">//小吃，素菜，荤菜</span></span><br><span class="line">    String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">int</span> price;<span class="comment">//钱</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从菜单中挑选出 荤菜 且 菜名带『肉』字 且 价格最贵的 3 个</p>
<h4 id="申明式"><a href="#申明式" class="headerlink" title="申明式"></a>申明式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;String&gt; <span class="title">filter</span><span class="params">(List&lt;Dish&gt; list)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; typeResult = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (Dish dish : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"荤菜"</span>.equals(dish.type)) &#123;</span><br><span class="line">            typeResult.add(dish);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; meatResult = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Dish dish : typeResult) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dish.name.contains(<span class="string">"肉"</span>)) &#123;</span><br><span class="line">            meatResult.add(dish);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(meatResult, <span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish o1, Dish o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.price - o2.price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; nameList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (meatResult.size() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        count = meatResult.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        nameList.add(meatResult.get(i).name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nameList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Stream-1"><a href="#Stream-1" class="headerlink" title="Stream"></a>Stream</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;String&gt; <span class="title">filter2</span><span class="params">(List&lt;Dish&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.stream().filter(dish -&gt; <span class="string">"荤菜"</span>.equals(dish.type))</span><br><span class="line">            .filter(dish -&gt; dish.name.contains(<span class="string">"肉"</span>))</span><br><span class="line">            .sorted(Comparator.comparingInt(o -&gt; o.price))</span><br><span class="line">            .limit(<span class="number">3</span>)</span><br><span class="line">            .map(dish -&gt; dish.name)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="有无状态举栗"><a href="#有无状态举栗" class="headerlink" title="有无状态举栗"></a>有无状态举栗</h3><h4 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h4><p><img src="http://yydcdut.github.io/img/stream_stateless.gif" alt="stream_stateless.gif"></p>
<h4 id="有状态"><a href="#有状态" class="headerlink" title="有状态"></a>有状态</h4><p><img src="http://yydcdut.github.io/img/stream_stateful.gif" alt="stream_stateful.gif"></p>
<h3 id="短路非短路举栗"><a href="#短路非短路举栗" class="headerlink" title="短路非短路举栗"></a>短路非短路举栗</h3><h4 id="非短路"><a href="#非短路" class="headerlink" title="非短路"></a>非短路</h4><p><img src="http://yydcdut.github.io/img/stream-none-short-circuiting.gif" alt="stream-none-short-circuiting.gif"></p>
<h4 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h4><p><img src="http://yydcdut.github.io/img/stream-short-circuiting.gif" alt="stream-short-circuiting.gif"></p>
<h3 id="内部迭代"><a href="#内部迭代" class="headerlink" title="内部迭代"></a>内部迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;String&gt; <span class="title">filter2</span><span class="params">(List&lt;Dish&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.stream().filter(dish -&gt; <span class="string">"荤菜"</span>.equals(dish.type))</span><br><span class="line">            .filter(dish -&gt; dish.name.contains(<span class="string">"肉"</span>))</span><br><span class="line">            .sorted(Comparator.comparingInt(o -&gt; o.price))</span><br><span class="line">            .limit(<span class="number">3</span>)</span><br><span class="line">            .map(dish -&gt; dish.name)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像 SQL，像 builder 构建者模式</p>
<h3 id="流水线（管道）"><a href="#流水线（管道）" class="headerlink" title="流水线（管道）"></a>流水线（管道）</h3><p><img src="http://yydcdut.github.io/img/stream-pipeline.gif" alt="stream-pipeline.gif"></p>
<p>集合是一种数据结构；它的主要关注点是在内存中组织数据，而且集合会在一段时间内持久存在。集合通常可用作流管道的来源或目标，但流的关注点是计算，而不是数据；每个中间操作都返回流，让整个流能串起来</p>
<h3 id="自动并行"><a href="#自动并行" class="headerlink" title="自动并行"></a>自动并行</h3><p><img src="http://yydcdut.github.io/img/stream-parallel.gif" alt="stream-parallel.gif"></p>
<p>自动并行是采用的 Fork / Join 框架</p>
<h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><p><img src="http://yydcdut.github.io/img/stream-parellel-fork-join.jpeg" alt="stream-parellel-fork-join.jpeg"></p>
<p>把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果</p>
<h4 id="工作窃取"><a href="#工作窃取" class="headerlink" title="工作窃取"></a>工作窃取</h4><p><img src="http://yydcdut.github.io/img/stream-job-steal.gif" alt="stream-job-steal.gif"></p>
<p>线程 1 负责处理 4 个任务，线程 2 负责处理 4 个任务，当线程 1 任务处理完了，但线程 2 还在处理任务。干完活的线程与其闲着，不如去帮其他线程干活。于是它就去其他线程的队里里窃取一个任务来执行。在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务之间的竞争，通过会使用双端队列，被窃取任务线程永远从双端队列的头部执行任务，而窃取任务线程用于从双端队列的尾部拿任务。</p>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul>
<li>Stream API 能够表达打杂的数据处理查询</li>
<li>对于装箱拆箱提供了对应 API</li>
<li>内部迭代可以透明的实现并行流处理</li>
<li>并不是任何情况都适合并行处理</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《巧用Gradle构建Android应用》读书笔记]]></title>
      <url>/2017/04/28/gradle-recipes-for-android/</url>
      <content type="html"><![CDATA[<p>《巧用Gradle构建Android应用》读书笔记，适合入门以及查漏补缺。</p>
<a id="more"></a>
<h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><h3 id="第一章：Android-开发-Gradle-基础"><a href="#第一章：Android-开发-Gradle-基础" class="headerlink" title="第一章：Android 开发 Gradle 基础"></a>第一章：Android 开发 Gradle 基础</h3><h4 id="1-5-添加-Java-库的依赖"><a href="#1-5-添加-Java-库的依赖" class="headerlink" title="1.5 添加 Java 库的依赖"></a>1.5 添加 Java 库的依赖</h4><p>通过 -x 标志来不执行某一任务：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew assembleDebug -x lintDebug</span><br></pre></td></tr></table></figure>
<hr>
<p>依赖的完整语法：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br></pre></td></tr></table></figure>
<p>依赖的快捷语法：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testCompile <span class="string">'junit:junit:4.12'</span></span><br></pre></td></tr></table></figure>
<p>版本号以变量的形式（不推荐）：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testCompile <span class="string">'junit:juint:4.+'</span></span><br></pre></td></tr></table></figure>
<p>这告诉 Gradle 任何高于 4.0 版本的 JUnit 在编译项目的测试时是必须的。</p>
<hr>
<p>禁用传递依赖</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'com.android.support'</span>, <span class="string">name:</span> <span class="string">'appcompat-v7'</span>, <span class="string">version:</span> <span class="string">'24.2.0'</span>, <span class="string">transitive:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<hr>
<p>只引入模块 jar 的快捷语法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.nineoldandroids:library:2.4.0@jar'</span></span><br></pre></td></tr></table></figure>
<h3 id="从项目导入到发布"><a href="#从项目导入到发布" class="headerlink" title="从项目导入到发布"></a>从项目导入到发布</h3><h4 id="2-1-设置项目属性"><a href="#2-1-设置项目属性" class="headerlink" title="2.1 设置项目属性"></a>2.1 设置项目属性</h4><p>“extra” 属性</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    dagger2Version = <span class="string">'2.0'</span></span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">"com.google.dagger:dagger:$&#123;dagger2Version&#125;"</span></span><br><span class="line">    apt <span class="string">"com.google.dagger:dagger-compiler:$&#123;dagger2Version&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>如果不想将实际的用户名和密码放到构建文件中，可以放到项目根目录下的 gradle.properties 文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">login = <span class="string">'user'</span></span><br><span class="line">pass = <span class="string">'123'</span></span><br></pre></td></tr></table></figure>
<p>然后替换成变量</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">'http://xxx'</span></span><br><span class="line">        credentials &#123;</span><br><span class="line">            username login</span><br><span class="line">            password pass</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>gradle.properties 或命令行提供变量，可以使用 -P 传参给 gradle</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew -P login=me -P passowrd=123 assembleDebug</span><br></pre></td></tr></table></figure>
<p><strong>当某个变量同时在 ext 和 gradle.properties 设置了，最终是以 gradle.properties 中设置的值为准，如果通过命令行 -P 的方式传参的话，最后是以命令行的方式的值为准。</strong>  </p>
<h4 id="2-5-在项目之间分享设置"><a href="#2-5-在项目之间分享设置" class="headerlink" title="2.5 在项目之间分享设置"></a>2.5 在项目之间分享设置</h4><p>在顶层 gradle 构建文件中使用 <code>allprojects</code> 或者 <code>subprojects</code> 块</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">	apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>subprojects 属性返回所有子项的集合，subprojects 方法将提供的闭包应用到其中的每一个项目</p>
<h3 id="构建类型和定制"><a href="#构建类型和定制" class="headerlink" title="构建类型和定制"></a>构建类型和定制</h3><h4 id="3-1-处理构建类型"><a href="#3-1-处理构建类型" class="headerlink" title="3.1 处理构建类型"></a>3.1 处理构建类型</h4><p>给应用程序 ID 和版本添加后缀</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            versionNameSuffix <span class="string">"-debug"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-产品定制和变种"><a href="#3-2-产品定制和变种" class="headerlink" title="3.2 产品定制和变种"></a>3.2 产品定制和变种</h4><p>使用 Android 闭包的 productFlavors 块来申明一个产品的定制</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        dev &#123;</span><br><span class="line">            applicationId <span class="string">'com.yydcdut.note.dev'</span></span><br><span class="line">        &#125;</span><br><span class="line">        store360 &#123;</span><br><span class="line">            applicationId <span class="string">'com.yydcdut.note.s360'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个产品定制可以拥有其自己的值，如下面的属性，还有一下其他的基于默认的 <code>defaultConfig</code> 的相同属性：</p>
<ol>
<li>applicationId</li>
<li>minSdkVersion</li>
<li>targetSdkVersion</li>
<li>versionCode</li>
<li>versionName</li>
<li>signingConfig</li>
</ol>
<p>每个定制定义了自己的源代码集和资源，其与主带吗集是兄弟关系。除了 app/src/main/java 以外，你还可以添加源文件在如下目录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app/src/dev/java</span><br><span class="line">app/src/store360/java</span><br></pre></td></tr></table></figure>
<p>还可以添加额外的资源文件到如下目录：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app<span class="regexp">/src/</span>dev/res</span><br><span class="line">app<span class="regexp">/src/</span>store360<span class="regexp">/res/</span>layout</span><br></pre></td></tr></table></figure>
<p><img src="http://yydcdut.github.io/img/3_2.png" alt="3_2"></p>
<h4 id="3-3-合并资源"><a href="#3-3-合并资源" class="headerlink" title="3.3 合并资源"></a>3.3 合并资源</h4><p>通过合并项目定制和构建类型的 res 文件夹以及主要的目录树来合并资源。优先级是：构建类型覆盖产品定制，其覆盖 main 代码集。</p>
<p>非 Java 的资源会互相覆盖，构建类型拥有最高优先级，其次是构建定制，然后是 main 目录。</p>
<h4 id="3-4-定制维度"><a href="#3-4-定制维度" class="headerlink" title="3.4 定制维度"></a>3.4 定制维度</h4><p>当一个产品定制还不够，还需要另外一个标准类区分应用程序的不同版本，可以在产品定制中添加 <code>flavorDimensions</code> 属性</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    flavorDimensions <span class="string">'product'</span>, <span class="string">'client'</span></span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        dev &#123;</span><br><span class="line">            dimension <span class="string">'product'</span></span><br><span class="line">            applicationId <span class="string">'com.yydcdut.note.dev'</span></span><br><span class="line">        &#125;</span><br><span class="line">        store360 &#123;</span><br><span class="line">            dimension <span class="string">'product'</span></span><br><span class="line">            applicationId <span class="string">'com.yydcdut.note.s360'</span></span><br><span class="line">        &#125;</span><br><span class="line">        zhangsan &#123;</span><br><span class="line">            dimension <span class="string">'client'</span></span><br><span class="line">        &#125;</span><br><span class="line">        lisi &#123;</span><br><span class="line">            dimension <span class="string">'client'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://yydcdut.github.io/img/3_4.png" alt="3_4"></p>
<p>两种构建类型（ debug 和 release ），两种产品（product）定制（ dev 和 store360 ），两种客户（client）定制（ zhangsan 和 lisi ）。</p>
<p>同样 client 定制也可以定义自己的源代码集和资源。</p>
<p>flavorDimensions 标签在 gradle 构建的时候将 <code>product</code> 列在了 <code>client</code> 之前，意味着产品维度中的值相对于客户维度拥有更高的优先级。</p>
<h4 id="3-5-合并不同定制间的-Java-源代码"><a href="#3-5-合并不同定制间的-Java-源代码" class="headerlink" title="3.5 合并不同定制间的 Java 源代码"></a>3.5 合并不同定制间的 Java 源代码</h4><h3 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h3><h4 id="4-1-编写自定义任务"><a href="#4-1-编写自定义任务" class="headerlink" title="4.1 编写自定义任务"></a>4.1 编写自定义任务</h4><p>在 configuration 阶段， Gradle 根据其依赖配置构建一个 DAG，然后执行目标任务，随着其依赖一起。所有任务在执行前先被配置。</p>
<p>如果你需要执行命令，添加一个 doLast 块到你的 Gradle 任务中：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task myTask &#123;</span><br><span class="line">	doLast &#123;</span><br><span class="line">      	android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">          	println variant.name</span><br><span class="line">      	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个任务中无论在 doLast 之前还是之后的所有事情都在配置阶段执行。在 doLast 块中的代码在运行阶段执行。</p>
<p>applicationVariants 属性只针对 com.android.application 插件有效。 libraryVariants 属性针对 Android 库项目可用，两者都可以使用 testVariants 属性。</p>
<h4 id="4-3-排除任务"><a href="#4-3-排除任务" class="headerlink" title="4.3 排除任务"></a>4.3 排除任务</h4><p> 使用 -x 标志排除一个单独的任务，通过修改任务图来排除多个任务。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew build -x lint</span><br></pre></td></tr></table></figure>
<p>这样做排除了 lint 任务以及其所有的依赖。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gradle.taskGraph.whenReady &#123; graph -&gt; </span><br><span class="line">	graph.allTasks.findAll &#123; it.name == <span class="regexp">~/lint.*/</span> &#125;*.enable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>任务图的 allTasks 属性调用的是 getAllTasks 方法，结果就是所有的名字以 lint 开头的任务的 enable 属性都被设置成 false，这些任务都不会运行。</p>
<h4 id="4-4-自定义代码集"><a href="#4-4-自定义代码集" class="headerlink" title="4.4 自定义代码集"></a>4.4 自定义代码集</h4><p>在 Gradle 构建中使用 sourceSets 来达到使用非标准目录为源代码目录，下面的是 API 23 的 samples 中的栗子，在 input/BasicGestureDetect 目录中：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The sample build uses multiple directories to</span></span><br><span class="line"><span class="comment">// keep boilerplate and common code separate from</span></span><br><span class="line"><span class="comment">// the main sample code.</span></span><br><span class="line">List&lt;String&gt; dirs = [</span><br><span class="line">    <span class="string">'main'</span>,     <span class="comment">// main sample code; look here for the interesting stuff.</span></span><br><span class="line">    <span class="string">'common'</span>,   <span class="comment">// components that are reused by multiple samples</span></span><br><span class="line">    <span class="string">'template'</span>] <span class="comment">// boilerplate code that is generated by the sample template process</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            dirs.each &#123; dir -&gt;</span><br><span class="line">                java.srcDirs <span class="string">"src/$&#123;dir&#125;/java"</span></span><br><span class="line">                res.srcDirs <span class="string">"src/$&#123;dir&#125;/res"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        androidTest.setRoot(<span class="string">'tests'</span>)</span><br><span class="line">        androidTest.java.srcDirs = [<span class="string">'tests/src'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h3 id="性能和文档"><a href="#性能和文档" class="headerlink" title="性能和文档"></a>性能和文档</h3>]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ButterKnife源码简析]]></title>
      <url>/2017/04/19/butterknife-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a>      分析版本：<a href="https://github.com/JakeWharton/butterknife/tree/fc10f1674a08162ad7cf8c762c11a748c20c25d8" target="_blank" rel="external">fc10f16</a></p>
</blockquote>
<p>ButterKnife 是一个 Android 视图快速注入库，它通过给 View 字段添加注解，可以让我们丢掉 findViewById() 来获取 View 的方法，从而简化了代码。</p>
<a id="more"></a>
<h2 id="编译时注解"><a href="#编译时注解" class="headerlink" title="编译时注解"></a>编译时注解</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>编译时注解的核心依赖 APT ( Annotation Processing Tools ) 实现，原理是在某些代码元素上（如类型、函数、字段等）添加注解，在编译时编译器会检查 AbstractProcessor 的子类，并且调用该类型的 process 函数，然后将添加了注解的所有元素都传递到 process 函数中，使得开发人员可以在编译器进行相应的处理，例如，根据注解生成新的Java类，这也就是EventBus，Retrofit，Dragger等开源库的基本原理。 </p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="创建一个-Java-Library"><a href="#创建一个-Java-Library" class="headerlink" title="创建一个 Java Library"></a>创建一个 Java Library</h4><p>创建一个 annotationcompiler 的 java module</p>
<h4 id="配置-gradle"><a href="#配置-gradle" class="headerlink" title="配置 gradle"></a>配置 gradle</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = <span class="string">"1.7"</span></span><br><span class="line">targetCompatibility = <span class="string">"1.7"</span></span><br></pre></td></tr></table></figure>
<p>同时需要在 app 的 module 中配置一下 Java7</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compileOptions &#123;</span><br><span class="line">   sourceCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">   targetCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建-Annotation"><a href="#创建-Annotation" class="headerlink" title="创建 Annotation"></a>创建 Annotation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yydcdut.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> InjectView &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建-AbstractProcessor"><a href="#创建-AbstractProcessor" class="headerlink" title="创建 AbstractProcessor"></a>创建 AbstractProcessor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yydcdut.process;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SupportedAnnotationTypes</span>(<span class="string">"com.yydcdut.annotation.InjectView"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewInjectProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 初始化</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> processingEnvironment 提供了一些实用的工具类Elements, Types和Filer</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnvironment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnvironment);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 指定使用的java版本</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 指定哪些注解应该被注解处理器注册</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getSupportedAnnotationTypes();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 主要的逻辑处理</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> set</span><br><span class="line">     * <span class="doctag">@param</span> env</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注册处理器"><a href="#注册处理器" class="headerlink" title="注册处理器"></a>注册处理器</h4><p>在 java module 里的 main 目录中创建一个 <code>resources</code> 文件夹，然后下边在创建 <code>META-INF/services</code>，创建一个 <code>javax.annotation.processing.Processor</code> 文件，在此文件中写入注解处理器的类全称</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.yydcdut.process.ViewInjectProcessor</span><br></pre></td></tr></table></figure>
<h4 id="添加-android-apt"><a href="#添加-android-apt" class="headerlink" title="添加 android-apt"></a>添加 android-apt</h4><p>在 project 下的 build.gradle 中添加 apt 插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></span><br></pre></td></tr></table></figure>
<p>然后在 app 中的 build.gradle 添加 apt 插件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span></span><br></pre></td></tr></table></figure>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在 app 中的 build.gradle 添加依赖</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile project(<span class="string">':annotationcompiler'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SupportedAnnotationTypes</span>(<span class="string">"com.yydcdut.annotation.InjectView"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewInjectProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; types = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">        types.add(InjectView.class.getCanonicalName());</span><br><span class="line">        <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        generateCode(set, env);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateCode</span><span class="params">(Set&lt;? extends TypeElement&gt; set, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder()</span><br><span class="line">                .append(<span class="string">"package com.yydcdut.test.generated;\n\n"</span>)</span><br><span class="line">                .append(<span class="string">"public class GeneratedClass &#123;\n\n"</span>) <span class="comment">// open class</span></span><br><span class="line">                .append(<span class="string">"\tpublic String getMessage() &#123;\n"</span>) <span class="comment">// open method</span></span><br><span class="line">                .append(<span class="string">"\t\treturn \""</span>);</span><br><span class="line">        <span class="comment">// for each javax.lang.model.element.Element annotated with the CustomAnnotation</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : roundEnv.getElementsAnnotatedWith(InjectView.class)) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = element.getAnnotation(InjectView.class).value();</span><br><span class="line">            builder.append(id + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">"\";\n"</span>) <span class="comment">// end return</span></span><br><span class="line">                .append(<span class="string">"\t&#125;\n"</span>) <span class="comment">// close method</span></span><br><span class="line">                .append(<span class="string">"&#125;\n"</span>); <span class="comment">// close class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// write the file</span></span><br><span class="line">            JavaFileObject source = processingEnv.getFiler().createSourceFile(<span class="string">"com.yydcdut.test.generated.GeneratedClass"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Writer writer = source.openWriter();</span><br><span class="line">            writer.write(builder.toString());</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// Note: calling e.printStackTrace() will print IO errors</span></span><br><span class="line">            <span class="comment">// that occur from the file already existing after its first run, this is normal</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>被注解的部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yydcdut.textdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@InjectView</span>(value = <span class="number">123</span>)</span><br><span class="line">    <span class="keyword">private</span> EditText mEditText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译之后查看 <code>app/build/generated/source/apt/debug/com/yydcdut/test/generated/GeneratedClass.java</code></p>
<p><img src="http://yydcdut.github.io/img/GeneratedClass.png" alt="GeneratedClass"></p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="ButterKnifeProcessor"><a href="#ButterKnifeProcessor" class="headerlink" title="ButterKnifeProcessor"></a>ButterKnifeProcessor</h3><p>这里只分析 <code>BindView</code> 的过程</p>
<h4 id="ButterKnifeProcessor-1"><a href="#ButterKnifeProcessor-1" class="headerlink" title="ButterKnifeProcessor"></a>ButterKnifeProcessor</h4><p>根据上述创建注解器的流程，那么我们分析源码也有了一个流程，就直接看 ButterKnife 的 AbstractProcessor ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@AutoService</span>(Processor.class)<span class="comment">//自动注册处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterKnifeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;? extends Annotation&gt;&gt; LISTENERS = Arrays.asList(<span class="comment">//</span></span><br><span class="line">            OnCheckedChanged.class, <span class="comment">//</span></span><br><span class="line">            OnClick.class, <span class="comment">//</span></span><br><span class="line">            OnEditorAction.class, <span class="comment">//</span></span><br><span class="line">            OnFocusChange.class, <span class="comment">//</span></span><br><span class="line">            OnItemClick.class, <span class="comment">//</span></span><br><span class="line">            OnItemLongClick.class, <span class="comment">//</span></span><br><span class="line">            OnItemSelected.class, <span class="comment">//</span></span><br><span class="line">            OnLongClick.class, <span class="comment">//</span></span><br><span class="line">            OnPageChange.class, <span class="comment">//</span></span><br><span class="line">            OnTextChanged.class, <span class="comment">//</span></span><br><span class="line">            OnTouch.class <span class="comment">//</span></span><br><span class="line">    );</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Elements elementUtils;<span class="comment">//处理Element的工具类</span></span><br><span class="line">    <span class="keyword">private</span> Types typeUtils;<span class="comment">//处理TypeMirror的工具类</span></span><br><span class="line">    <span class="keyword">private</span> Filer filer;<span class="comment">//可以创建.java文件</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment env)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(env);</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        elementUtils = env.getElementUtils();</span><br><span class="line">        typeUtils = env.getTypeUtils();</span><br><span class="line">        filer = env.getFiler();</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; types = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; annotation : getSupportedAnnotations()) &#123;</span><br><span class="line">            types.add(annotation.getCanonicalName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Class&lt;? extends Annotation&gt;&gt; getSupportedAnnotations() &#123;</span><br><span class="line">        Set&lt;Class&lt;? extends Annotation&gt;&gt; annotations = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        annotations.add(BindArray.class);</span><br><span class="line">        annotations.add(BindBitmap.class);</span><br><span class="line">        annotations.add(BindBool.class);</span><br><span class="line">        annotations.add(BindColor.class);</span><br><span class="line">        annotations.add(BindDimen.class);</span><br><span class="line">        annotations.add(BindDrawable.class);</span><br><span class="line">        annotations.add(BindFloat.class);</span><br><span class="line">        annotations.add(BindInt.class);</span><br><span class="line">        annotations.add(BindString.class);</span><br><span class="line">        annotations.add(BindView.class);</span><br><span class="line">        annotations.add(BindViews.class);</span><br><span class="line">        annotations.addAll(LISTENERS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> annotations;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);<span class="comment">////查找所有的被注解，封装成BindingSet保存到map中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历步map的生成.java文件</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123;</span><br><span class="line">            TypeElement typeElement = entry.getKey();</span><br><span class="line">            BindingSet binding = entry.getValue();</span><br><span class="line"></span><br><span class="line">            JavaFile javaFile = binding.brewJava(sdk);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                javaFile.writeTo(filer);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                error(typeElement, <span class="string">"Unable to write binding for type %s: %s"</span>, typeElement, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>process</code> 中主要做了两件事，第一是找出被注解的元素，封装成 <code>Map&lt;TypeElement, BindingSet&gt;</code> ，第一个参数可以想成类，第二个参数可以想成所有有关信息的封装；第二就是遍历这个 map ，然后针对每个类生成对应的 ViewBinder 类。</p>
<h4 id="ButterKnifeProcessor-findAndParseTargets"><a href="#ButterKnifeProcessor-findAndParseTargets" class="headerlink" title="ButterKnifeProcessor#findAndParseTargets"></a>ButterKnifeProcessor#findAndParseTargets</h4><p>那么主要的查找工作在 <code>findAndParseTargets()</code> 中进行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterKnifeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TypeElement, BindingSet&gt; findAndParseTargets(RoundEnvironment env) &#123;</span><br><span class="line">        Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        Set&lt;TypeElement&gt; erasedTargetNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// .......</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">// Process each @BindView element.</span></span><br><span class="line">        <span class="keyword">for</span> (Element element : env.getElementsAnnotatedWith(BindView.class)) &#123;<span class="comment">//拿到被BindView注解的元素</span></span><br><span class="line">            <span class="comment">// we don't SuperficialValidation.validateElement(element)</span></span><br><span class="line">            <span class="comment">// so that an unresolved View type can be generated by later processing rounds</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                parseBindView(element, builderMap, erasedTargetNames);<span class="comment">//解析</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logParsingError(element, BindView.class, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// .......</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> bindingMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>RoundEnvironment</code> 可以理解成查询注解信息的类，而 <code>Element</code> 可以理解成程序中的元素，比如包、类、方法等等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123; <span class="comment">// TypeElement</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> var; <span class="comment">// VariableElement</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassA</span><span class="params">()</span> </span>&#123;<span class="comment">// ExecuteableElement</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span> newA // TypeElement</span><br><span class="line">    )</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TypeElement 代表源代码中元素类型，但是 TypeElement 并不包含类的相关信息，可以从 TypeElement 获取类的名称，但不能获取类的信息，比如说父类。这些信息可以通过 TypeMirror 获取。你可以通过调用 <code>element.asType()</code> 来获取一个 Element 的 TypeMirror 。</p>
<h4 id="ButterKnifeProcessor-parseBindView"><a href="#ButterKnifeProcessor-parseBindView" class="headerlink" title="ButterKnifeProcessor#parseBindView"></a>ButterKnifeProcessor#parseBindView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterKnifeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseBindView</span><span class="params">(Element element, Map&lt;TypeElement, BindingSet.Builder&gt; builderMap, Set&lt;TypeElement&gt; erasedTargetNames)</span> </span>&#123;</span><br><span class="line">        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();<span class="comment">//类 com.yydcdut.textdemo.MainActivity</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start by verifying common generated code restrictions.</span></span><br><span class="line">        <span class="keyword">boolean</span> hasError = isInaccessibleViaGeneratedCode(BindView.class, <span class="string">"fields"</span>, element)</span><br><span class="line">                || isBindingInWrongPackage(BindView.class, element);<span class="comment">//检查合法性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify that the target type extends from View.</span></span><br><span class="line">        TypeMirror elementType = element.asType();<span class="comment">//android.widget.EditText</span></span><br><span class="line">        <span class="keyword">if</span> (elementType.getKind() == TypeKind.TYPEVAR) &#123;<span class="comment">//false (elementType.getKind()==DECLARED)</span></span><br><span class="line">            TypeVariable typeVariable = (TypeVariable) elementType;</span><br><span class="line">            elementType = typeVariable.getUpperBound();</span><br><span class="line">        &#125;</span><br><span class="line">        Name qualifiedName = enclosingElement.getQualifiedName();<span class="comment">//com.yydcdut.textdemo.MainActivity</span></span><br><span class="line">        Name simpleName = element.getSimpleName();<span class="comment">//mEditText</span></span><br><span class="line">        <span class="keyword">if</span> (!isSubtypeOfType(elementType, VIEW_TYPE) &amp;&amp; !isInterface(elementType)) &#123;<span class="comment">//必须为view类型的子类或者是接口</span></span><br><span class="line">            <span class="keyword">if</span> (elementType.getKind() == TypeKind.ERROR) &#123;</span><br><span class="line">                note(element, <span class="string">"@%s field with unresolved type (%s) "</span></span><br><span class="line">                                + <span class="string">"must elsewhere be generated as a View or interface. (%s.%s)"</span>, BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                error(element, <span class="string">"@%s fields must extend from View or be an interface. (%s.%s)"</span>, BindView.class.getSimpleName(), qualifiedName, simpleName);</span><br><span class="line">                hasError = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assemble information on the field.</span></span><br><span class="line">        <span class="keyword">int</span> id = element.getAnnotation(BindView.class).value();<span class="comment">//得到id</span></span><br><span class="line"></span><br><span class="line">        BindingSet.Builder builder = builderMap.get(enclosingElement);</span><br><span class="line">        QualifiedId qualifiedId = elementToQualifiedId(element, id);<span class="comment">//封装成QualifiedId</span></span><br><span class="line">        <span class="keyword">if</span> (builder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));</span><br><span class="line">            <span class="keyword">if</span> (existingBindingName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                error(element, <span class="string">"Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)"</span>, BindView.class.getSimpleName(), id, existingBindingName, enclosingElement.getQualifiedName(), element.getSimpleName());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            builder = getOrCreateBindingBuilder(builderMap, enclosingElement);<span class="comment">//为这个类创建BindingSet.Builder</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name = simpleName.toString();<span class="comment">//mEditText</span></span><br><span class="line">        TypeName type = TypeName.get(elementType);<span class="comment">//android.widget.EditText</span></span><br><span class="line">        <span class="keyword">boolean</span> required = isFieldRequired(element);</span><br><span class="line"></span><br><span class="line">        builder.addField(getId(qualifiedId), <span class="keyword">new</span> FieldViewBinding(name, type, required));<span class="comment">//封装后放入builder中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the type-erased version to the valid binding targets set.</span></span><br><span class="line">        erasedTargetNames.add(enclosingElement);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断修饰符等</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> annotationClass</span><br><span class="line">     * <span class="doctag">@param</span> targetThing</span><br><span class="line">     * <span class="doctag">@param</span> element</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInaccessibleViaGeneratedCode</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass, String targetThing, Element element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasError = <span class="keyword">false</span>;</span><br><span class="line">        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify method modifiers.</span></span><br><span class="line">        Set&lt;Modifier&gt; modifiers = element.getModifiers();</span><br><span class="line">        <span class="keyword">if</span> (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) &#123;<span class="comment">//不能是private或者static的</span></span><br><span class="line">            error(element, <span class="string">"@%s %s must not be private or static. (%s.%s)"</span>, annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(), element.getSimpleName());</span><br><span class="line">            hasError = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify containing type.</span></span><br><span class="line">        <span class="keyword">if</span> (enclosingElement.getKind() != CLASS) &#123;<span class="comment">//不能是class</span></span><br><span class="line">            error(enclosingElement, <span class="string">"@%s %s may only be contained in classes. (%s.%s)"</span>, annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(), element.getSimpleName());</span><br><span class="line">            hasError = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify containing class visibility is not private.</span></span><br><span class="line">        <span class="keyword">if</span> (enclosingElement.getModifiers().contains(PRIVATE)) &#123;<span class="comment">//不能是private</span></span><br><span class="line">            error(enclosingElement, <span class="string">"@%s %s may not be contained in private classes. (%s.%s)"</span>, annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(), element.getSimpleName());</span><br><span class="line">            hasError = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hasError;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断是否弄错了包名</span><br><span class="line">     * 弄成android或者java的</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> annotationClass</span><br><span class="line">     * <span class="doctag">@param</span> element</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBindingInWrongPackage</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass, Element element)</span> </span>&#123;</span><br><span class="line">        TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();</span><br><span class="line">        String qualifiedName = enclosingElement.getQualifiedName().toString();<span class="comment">//com.yydcdut.textdemo.MainActivity</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (qualifiedName.startsWith(<span class="string">"android."</span>)) &#123;</span><br><span class="line">            error(element, <span class="string">"@%s-annotated class incorrectly in Android framework package. (%s)"</span>,</span><br><span class="line">                    annotationClass.getSimpleName(), qualifiedName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (qualifiedName.startsWith(<span class="string">"java."</span>)) &#123;</span><br><span class="line">            error(element, <span class="string">"@%s-annotated class incorrectly in Java framework package. (%s)"</span>,</span><br><span class="line">                    annotationClass.getSimpleName(), qualifiedName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是不是otherType的子类型</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> typeMirror</span><br><span class="line">     * <span class="doctag">@param</span> otherType</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSubtypeOfType</span><span class="params">(TypeMirror typeMirror, String otherType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isTypeEqual(typeMirror, otherType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (typeMirror.getKind() != TypeKind.DECLARED) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DeclaredType declaredType = (DeclaredType) typeMirror;</span><br><span class="line">        List&lt;? extends TypeMirror&gt; typeArguments = declaredType.getTypeArguments();</span><br><span class="line">        <span class="keyword">if</span> (typeArguments.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            StringBuilder typeString = <span class="keyword">new</span> StringBuilder(declaredType.asElement().toString());</span><br><span class="line">            typeString.append(<span class="string">'&lt;'</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; typeArguments.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    typeString.append(<span class="string">','</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                typeString.append(<span class="string">'?'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            typeString.append(<span class="string">'&gt;'</span>);</span><br><span class="line">            <span class="keyword">if</span> (typeString.toString().equals(otherType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Element element = declaredType.asElement();</span><br><span class="line">        <span class="keyword">if</span> (!(element <span class="keyword">instanceof</span> TypeElement)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TypeElement typeElement = (TypeElement) element;</span><br><span class="line">        TypeMirror superType = typeElement.getSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (isSubtypeOfType(superType, otherType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (TypeMirror interfaceType : typeElement.getInterfaces()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSubtypeOfType(interfaceType, otherType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是不是接口</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> typeMirror</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInterface</span><span class="params">(TypeMirror typeMirror)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> typeMirror <span class="keyword">instanceof</span> DeclaredType</span><br><span class="line">                &amp;&amp; ((DeclaredType) typeMirror).asElement().getKind() == INTERFACE;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> QualifiedId <span class="title">elementToQualifiedId</span><span class="params">(Element element, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QualifiedId(elementUtils.getPackageOf(element).getQualifiedName().toString(), id);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断有没有被Nullable修饰</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> element</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isFieldRequired</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !hasAnnotationWithName(element, NULLABLE_ANNOTATION_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BindingSet.<span class="function">Builder <span class="title">getOrCreateBindingBuilder</span><span class="params">(</span><br><span class="line">            Map&lt;TypeElement, BindingSet.Builder&gt; builderMap, TypeElement enclosingElement)</span> </span>&#123;</span><br><span class="line">        BindingSet.Builder builder = builderMap.get(enclosingElement);</span><br><span class="line">        <span class="keyword">if</span> (builder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            builder = BindingSet.newBuilder(enclosingElement);</span><br><span class="line">            builderMap.put(enclosingElement, builder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是解析被 <code>BindView</code> 修饰的元素，将信息都封装成 <code>BindingSet.Builder</code> 。</p>
<h4 id="BindingSet-newBuilder"><a href="#BindingSet-newBuilder" class="headerlink" title="BindingSet#newBuilder"></a>BindingSet#newBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingSet</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeName targetTypeName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassName bindingClassName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isFinal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isActivity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isDialog;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImmutableList&lt;ViewBinding&gt; viewBindings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImmutableList&lt;FieldCollectionViewBinding&gt; collectionBindings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImmutableList&lt;ResourceBinding&gt; resourceBindings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BindingSet parentBinding;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BindingSet</span><span class="params">(TypeName targetTypeName, ClassName bindingClassName, <span class="keyword">boolean</span> isFinal,</span><br><span class="line">                       <span class="keyword">boolean</span> isView, <span class="keyword">boolean</span> isActivity, <span class="keyword">boolean</span> isDialog, ImmutableList&lt;ViewBinding&gt; viewBindings,</span><br><span class="line">                       ImmutableList&lt;FieldCollectionViewBinding&gt; collectionBindings,</span><br><span class="line">                       ImmutableList&lt;ResourceBinding&gt; resourceBindings, BindingSet parentBinding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isFinal = isFinal;</span><br><span class="line">        <span class="keyword">this</span>.targetTypeName = targetTypeName;</span><br><span class="line">        <span class="keyword">this</span>.bindingClassName = bindingClassName;</span><br><span class="line">        <span class="keyword">this</span>.isView = isView;</span><br><span class="line">        <span class="keyword">this</span>.isActivity = isActivity;</span><br><span class="line">        <span class="keyword">this</span>.isDialog = isDialog;</span><br><span class="line">        <span class="keyword">this</span>.viewBindings = viewBindings;</span><br><span class="line">        <span class="keyword">this</span>.collectionBindings = collectionBindings;</span><br><span class="line">        <span class="keyword">this</span>.resourceBindings = resourceBindings;</span><br><span class="line">        <span class="keyword">this</span>.parentBinding = parentBinding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Builder <span class="title">newBuilder</span><span class="params">(TypeElement enclosingElement)</span> </span>&#123;</span><br><span class="line">        TypeMirror typeMirror = enclosingElement.asType();<span class="comment">//android.widget.EditText</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isView = isSubtypeOfType(typeMirror, VIEW_TYPE);<span class="comment">//是不是View</span></span><br><span class="line">        <span class="keyword">boolean</span> isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);<span class="comment">//是不是Activity</span></span><br><span class="line">        <span class="keyword">boolean</span> isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);<span class="comment">//是不是Dialog</span></span><br><span class="line"></span><br><span class="line">        TypeName targetType = TypeName.get(typeMirror);</span><br><span class="line">        <span class="keyword">if</span> (targetType <span class="keyword">instanceof</span> ParameterizedTypeName) &#123;</span><br><span class="line">            targetType = ((ParameterizedTypeName) targetType).rawType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String packageName = getPackage(enclosingElement).getQualifiedName().toString();<span class="comment">//com.yydcdut.textdemo</span></span><br><span class="line">        String className = enclosingElement.getQualifiedName().toString().substring(</span><br><span class="line">                packageName.length() + <span class="number">1</span>).replace(<span class="string">'.'</span>, <span class="string">'$'</span>);<span class="comment">//MainActivity</span></span><br><span class="line">        ClassName bindingClassName = ClassName.get(packageName, className + <span class="string">"_ViewBinding"</span>);<span class="comment">//com.yydcdut.textdemo.MainActivity_ViewBinding</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);<span class="comment">//是不是final修饰的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TypeName targetTypeName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ClassName bindingClassName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isFinal;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isView;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isActivity;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isDialog;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Id, ViewBinding.Builder&gt; viewIdMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">(TypeName targetTypeName, ClassName bindingClassName, <span class="keyword">boolean</span> isFinal,</span><br><span class="line">                        <span class="keyword">boolean</span> isView, <span class="keyword">boolean</span> isActivity, <span class="keyword">boolean</span> isDialog)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.targetTypeName = targetTypeName;</span><br><span class="line">            <span class="keyword">this</span>.bindingClassName = bindingClassName;</span><br><span class="line">            <span class="keyword">this</span>.isFinal = isFinal;</span><br><span class="line">            <span class="keyword">this</span>.isView = isView;</span><br><span class="line">            <span class="keyword">this</span>.isActivity = isActivity;</span><br><span class="line">            <span class="keyword">this</span>.isDialog = isDialog;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addField</span><span class="params">(Id id, FieldViewBinding binding)</span> </span>&#123;</span><br><span class="line">            getOrCreateViewBindings(id).setFieldBinding(binding);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">private</span> ViewBinding.<span class="function">Builder <span class="title">getOrCreateViewBindings</span><span class="params">(Id id)</span> </span>&#123;</span><br><span class="line">            ViewBinding.Builder viewId = viewIdMap.get(id);</span><br><span class="line">            <span class="keyword">if</span> (viewId == <span class="keyword">null</span>) &#123;</span><br><span class="line">                viewId = <span class="keyword">new</span> ViewBinding.Builder(id);</span><br><span class="line">                viewIdMap.put(id, viewId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> viewId;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="function">BindingSet <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ImmutableList.Builder&lt;ViewBinding&gt; viewBindings = ImmutableList.builder();</span><br><span class="line">            <span class="keyword">for</span> (ViewBinding.Builder builder : viewIdMap.values()) &#123;</span><br><span class="line">                viewBindings.add(builder.build());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BindingSet(targetTypeName, bindingClassName, isFinal, isView, isActivity, isDialog, viewBindings.build(), collectionBindings.build(), resourceBindings.build(), parentBinding);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ButterKnifeProcessor-findAndParseTargets-1"><a href="#ButterKnifeProcessor-findAndParseTargets-1" class="headerlink" title="ButterKnifeProcessor#findAndParseTargets"></a>ButterKnifeProcessor#findAndParseTargets</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterKnifeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        Map&lt;TypeElement, BindingSet.Builder&gt; builderMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">        <span class="comment">// Associate superclass binders with their subclass binders. This is a queue-based tree walk</span></span><br><span class="line">        <span class="comment">// which starts at the roots (superclasses) and walks to the leafs (subclasses).</span></span><br><span class="line">        Deque&lt;Map.Entry&lt;TypeElement, BindingSet.Builder&gt;&gt; entries =</span><br><span class="line">                <span class="keyword">new</span> ArrayDeque&lt;&gt;(builderMap.entrySet());</span><br><span class="line">        Map&lt;TypeElement, BindingSet&gt; bindingMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!entries.isEmpty()) &#123;</span><br><span class="line">            Map.Entry&lt;TypeElement, BindingSet.Builder&gt; entry = entries.removeFirst();<span class="comment">//拿到第一个</span></span><br><span class="line"></span><br><span class="line">            TypeElement type = entry.getKey();<span class="comment">//com.yydcdut.textdemo.MainActivity</span></span><br><span class="line">            BindingSet.Builder builder = entry.getValue();</span><br><span class="line"></span><br><span class="line">            TypeElement parentType = findParentType(type, erasedTargetNames);<span class="comment">//父类</span></span><br><span class="line">            <span class="keyword">if</span> (parentType == <span class="keyword">null</span>) &#123;<span class="comment">//自己就是了</span></span><br><span class="line">                bindingMap.put(type, builder.build());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BindingSet parentBinding = bindingMap.get(parentType);<span class="comment">//拿到父类的BindingSet</span></span><br><span class="line">                <span class="keyword">if</span> (parentBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    builder.setParent(parentBinding);</span><br><span class="line">                    bindingMap.put(type, builder.build());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Has a superclass binding but we haven't built it yet. Re-enqueue for later.</span></span><br><span class="line">                    entries.addLast(entry);<span class="comment">//放到最后（先解析父类的）</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bindingMap;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span><br><span class="line">     * Finds the parent binder type in the supplied set, if any.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TypeElement <span class="title">findParentType</span><span class="params">(TypeElement typeElement, Set&lt;TypeElement&gt; parents)</span> </span>&#123;</span><br><span class="line">        TypeMirror type;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            type = typeElement.getSuperclass();</span><br><span class="line">            <span class="keyword">if</span> (type.getKind() == TypeKind.NONE) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            typeElement = (TypeElement) ((DeclaredType) type).asElement();</span><br><span class="line">            <span class="keyword">if</span> (parents.contains(typeElement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> typeElement;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ButterKnifeProcessor-process"><a href="#ButterKnifeProcessor-process" class="headerlink" title="ButterKnifeProcessor#process"></a>ButterKnifeProcessor#process</h4><p>findAndParseTargets 算是解析完了，再回过头来看第二步，生成文件的步骤</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterKnifeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; elements, RoundEnvironment env)</span> </span>&#123;</span><br><span class="line">        Map&lt;TypeElement, BindingSet&gt; bindingMap = findAndParseTargets(env);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;TypeElement, BindingSet&gt; entry : bindingMap.entrySet()) &#123;</span><br><span class="line">            TypeElement typeElement = entry.getKey();</span><br><span class="line">            BindingSet binding = entry.getValue();</span><br><span class="line"></span><br><span class="line">            JavaFile javaFile = binding.brewJava(sdk);<span class="comment">//变成JavaFile</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                javaFile.writeTo(filer);<span class="comment">//生成文件</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                error(typeElement, <span class="string">"Unable to write binding for type %s: %s"</span>, typeElement, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将信息转变成 <code>JavaFile</code> ，通过 filer 完成。</p>
<h4 id="write过程"><a href="#write过程" class="headerlink" title="write过程"></a>write过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingSet</span> </span>&#123;</span><br><span class="line">    <span class="function">JavaFile <span class="title">brewJava</span><span class="params">(<span class="keyword">int</span> sdk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaFile.builder(bindingClassName.packageName(), createType(sdk))<span class="comment">//packageName--&gt;com.yydcdut.textdemo</span></span><br><span class="line">                .addFileComment(<span class="string">"Generated code from Butter Knife. Do not modify!"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TypeSpec <span class="title">createType</span><span class="params">(<span class="keyword">int</span> sdk)</span> </span>&#123;</span><br><span class="line">        TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName())</span><br><span class="line">                .addModifiers(PUBLIC);<span class="comment">//申明类</span></span><br><span class="line">        <span class="keyword">if</span> (isFinal) &#123;</span><br><span class="line">            result.addModifiers(FINAL);<span class="comment">//添加final关键字</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parentBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.superclass(parentBinding.bindingClassName);<span class="comment">//继承父类</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.addSuperinterface(UNBINDER);<span class="comment">//实现Unbinder接口</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasTargetField()) &#123;</span><br><span class="line">            result.addField(targetTypeName, <span class="string">"target"</span>, PRIVATE);<span class="comment">//设置private的target变量</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isView) &#123;</span><br><span class="line">            result.addMethod(createBindingConstructorForView());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isActivity) &#123;</span><br><span class="line">            result.addMethod(createBindingConstructorForActivity());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDialog) &#123;</span><br><span class="line">            result.addMethod(createBindingConstructorForDialog());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!constructorNeedsView()) &#123;</span><br><span class="line">            <span class="comment">// Add a delegating constructor with a target type + view signature for reflective use.</span></span><br><span class="line">            result.addMethod(createBindingViewDelegateConstructor());</span><br><span class="line">        &#125;</span><br><span class="line">        result.addMethod(createBindingConstructor(sdk));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasViewBindings() || parentBinding == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.addMethod(createBindingUnbindMethod(result));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.build();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> MethodSpec <span class="title">createBindingConstructorForView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodSpec.Builder builder = MethodSpec.constructorBuilder()<span class="comment">//创建构造器</span></span><br><span class="line">                .addAnnotation(UI_THREAD)<span class="comment">//添加UIThread的注解</span></span><br><span class="line">                .addModifiers(PUBLIC)<span class="comment">//为public</span></span><br><span class="line">                .addParameter(targetTypeName, <span class="string">"target"</span>);<span class="comment">//构造函数中得有target参数</span></span><br><span class="line">        <span class="keyword">if</span> (constructorNeedsView()) &#123;<span class="comment">//构造函数中的方法</span></span><br><span class="line">            builder.addStatement(<span class="string">"this(target, target)"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            builder.addStatement(<span class="string">"this(target, target.getContext())"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * True if this binding requires a view. Otherwise only a context is needed.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">constructorNeedsView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasViewBindings() <span class="comment">//</span></span><br><span class="line">                || parentBinding != <span class="keyword">null</span> &amp;&amp; parentBinding.constructorNeedsView();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> MethodSpec <span class="title">createBindingViewDelegateConstructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MethodSpec.constructorBuilder()</span><br><span class="line">                .addJavadoc(<span class="string">"@deprecated Use &#123;@link #$T($T, $T)&#125; for direct creation.\n    "</span></span><br><span class="line">                                + <span class="string">"Only present for runtime invocation through &#123;@code ButterKnife.bind()&#125;.\n"</span>,</span><br><span class="line">                        bindingClassName, targetTypeName, CONTEXT)</span><br><span class="line">                .addAnnotation(Deprecated.class)</span><br><span class="line">                .addAnnotation(UI_THREAD)</span><br><span class="line">                .addModifiers(PUBLIC)</span><br><span class="line">                .addParameter(targetTypeName, <span class="string">"target"</span>)</span><br><span class="line">                .addParameter(VIEW, <span class="string">"source"</span>)</span><br><span class="line">                .addStatement((<span class="string">"this(target, source.getContext())"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> MethodSpec <span class="title">createBindingConstructor</span><span class="params">(<span class="keyword">int</span> sdk)</span> </span>&#123;</span><br><span class="line">        MethodSpec.Builder constructor = MethodSpec.constructorBuilder()<span class="comment">//构造方法</span></span><br><span class="line">                .addAnnotation(UI_THREAD)<span class="comment">//UIThread注解</span></span><br><span class="line">                .addModifiers(PUBLIC);<span class="comment">//public</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasMethodBindings()) &#123;</span><br><span class="line">            constructor.addParameter(targetTypeName, <span class="string">"target"</span>, FINAL);<span class="comment">//final的target变量</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            constructor.addParameter(targetTypeName, <span class="string">"target"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (constructorNeedsView()) &#123;</span><br><span class="line">            constructor.addParameter(VIEW, <span class="string">"source"</span>);<span class="comment">//变量名为source的View</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            constructor.addParameter(CONTEXT, <span class="string">"context"</span>);<span class="comment">//变量名为context的Context</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasUnqualifiedResourceBindings()) &#123;</span><br><span class="line">            <span class="comment">// Aapt can change IDs out from underneath us, just suppress since all will work at runtime.</span></span><br><span class="line">            constructor.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)</span><br><span class="line">                    .addMember(<span class="string">"value"</span>, <span class="string">"$S"</span>, <span class="string">"ResourceType"</span>)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasOnTouchMethodBindings()) &#123;</span><br><span class="line">            constructor.addAnnotation(AnnotationSpec.builder(SUPPRESS_LINT)</span><br><span class="line">                    .addMember(<span class="string">"value"</span>, <span class="string">"$S"</span>, <span class="string">"ClickableViewAccessibility"</span>)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parentBinding != <span class="keyword">null</span>) &#123;<span class="comment">//如果有父类，则调用super</span></span><br><span class="line">            <span class="keyword">if</span> (parentBinding.constructorNeedsView()) &#123;</span><br><span class="line">                constructor.addStatement(<span class="string">"super(target, source)"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (constructorNeedsView()) &#123;</span><br><span class="line">                constructor.addStatement(<span class="string">"super(target, source.getContext())"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                constructor.addStatement(<span class="string">"super(target, context)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            constructor.addCode(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasTargetField()) &#123;</span><br><span class="line">            constructor.addStatement(<span class="string">"this.target = target"</span>);<span class="comment">//赋值</span></span><br><span class="line">            constructor.addCode(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasViewBindings()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasViewLocal()) &#123;</span><br><span class="line">                <span class="comment">// Local variable in which all views will be temporarily stored.</span></span><br><span class="line">                constructor.addStatement(<span class="string">"$T view"</span>, VIEW);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (ViewBinding binding : viewBindings) &#123;</span><br><span class="line">                addViewBinding(constructor, binding);<span class="comment">//View的初始化</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (FieldCollectionViewBinding binding : collectionBindings) &#123;</span><br><span class="line">                constructor.addStatement(<span class="string">"$L"</span>, binding.render());<span class="comment">//资源的初始化</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!resourceBindings.isEmpty()) &#123;</span><br><span class="line">                constructor.addCode(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!resourceBindings.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (constructorNeedsView()) &#123;</span><br><span class="line">                constructor.addStatement(<span class="string">"$T context = source.getContext()"</span>, CONTEXT);<span class="comment">//赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hasResourceBindingsNeedingResource(sdk)) &#123;</span><br><span class="line">                constructor.addStatement(<span class="string">"$T res = context.getResources()"</span>, RESOURCES);<span class="comment">//赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (ResourceBinding binding : resourceBindings) &#123;</span><br><span class="line">                constructor.addStatement(<span class="string">"$L"</span>, binding.render(sdk));<span class="comment">//通过不同的SDK版本实现Resource相关(Drawable,Color等)的初始化</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> constructor.build();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addViewBinding</span><span class="params">(MethodSpec.Builder result, ViewBinding binding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (binding.isSingleFieldBinding()) &#123;<span class="comment">//只有findView的情况，没有监听器</span></span><br><span class="line">            <span class="comment">// Optimize the common case where there's a single binding directly to a field.</span></span><br><span class="line">            FieldViewBinding fieldBinding = binding.getFieldBinding();</span><br><span class="line">            CodeBlock.Builder builder = CodeBlock.builder()</span><br><span class="line">                    .add(<span class="string">"target.$L = "</span>, fieldBinding.getName());<span class="comment">//(target--&gt;MainActivity) ($L--&gt;mEditText)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> requiresCast = requiresCast(fieldBinding.getType());<span class="comment">//是否需要强转</span></span><br><span class="line">            <span class="keyword">if</span> (!requiresCast &amp;&amp; !fieldBinding.isRequired()) &#123;</span><br><span class="line">                builder.add(<span class="string">"source.findViewById($L)"</span>, binding.getId().code);<span class="comment">//findViewById</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                builder.add(<span class="string">"$T.find"</span>, UTILS);</span><br><span class="line">                builder.add(fieldBinding.isRequired() ? <span class="string">"RequiredView"</span> : <span class="string">"OptionalView"</span>);</span><br><span class="line">                <span class="keyword">if</span> (requiresCast) &#123;</span><br><span class="line">                    builder.add(<span class="string">"AsType"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                builder.add(<span class="string">"(source, $L"</span>, binding.getId().code);</span><br><span class="line">                <span class="keyword">if</span> (fieldBinding.isRequired() || requiresCast) &#123;</span><br><span class="line">                    builder.add(<span class="string">", $S"</span>, asHumanDescription(singletonList(fieldBinding)));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (requiresCast) &#123;</span><br><span class="line">                    builder.add(<span class="string">", $T.class"</span>, fieldBinding.getRawType());</span><br><span class="line">                &#125;</span><br><span class="line">                builder.add(<span class="string">")"</span>);<span class="comment">//target.mEditText = Utils.findRequiredViewAsType(source, R.id.edit, "field 'mEditText'", EditText.class);</span></span><br><span class="line">            &#125;</span><br><span class="line">            result.addStatement(<span class="string">"$L"</span>, builder.build());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;MemberViewBinding&gt; requiredBindings = binding.getRequiredBindings();</span><br><span class="line">        <span class="keyword">if</span> (requiredBindings.isEmpty()) &#123;</span><br><span class="line">            result.addStatement(<span class="string">"view = source.findViewById($L)"</span>, binding.getId().code);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!binding.isBoundToRoot()) &#123;</span><br><span class="line">            result.addStatement(<span class="string">"view = $T.findRequiredView(source, $L, $S)"</span>, UTILS,</span><br><span class="line">                    binding.getId().code, asHumanDescription(requiredBindings));<span class="comment">//view = Utils.findRequiredView(source, R.id.hello, "field 'hello', method 'sayHello', and method 'sayGetOffMe'");</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addFieldBinding(result, binding);<span class="comment">//强转</span></span><br><span class="line">        addMethodBindings(result, binding);<span class="comment">//各种监听器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addFieldBinding</span><span class="params">(MethodSpec.Builder result, ViewBinding binding)</span> </span>&#123;</span><br><span class="line">        FieldViewBinding fieldBinding = binding.getFieldBinding();</span><br><span class="line">        <span class="keyword">if</span> (fieldBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (requiresCast(fieldBinding.getType())) &#123;</span><br><span class="line">                result.addStatement(<span class="string">"target.$L = $T.castView(view, $L, $S, $T.class)"</span>,</span><br><span class="line">                        fieldBinding.getName(), UTILS, binding.getId().code,</span><br><span class="line">                        asHumanDescription(singletonList(fieldBinding)), fieldBinding.getRawType());<span class="comment">// target.hello = Utils.castView(view, R.id.hello, "field 'hello'", Button.class);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.addStatement(<span class="string">"target.$L = view"</span>, fieldBinding.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后文件的生成是通过 <code>com.squareup.javapoet.JavaFile</code> 生成的。</p>
<h4 id="官方-demo-的栗子"><a href="#官方-demo-的栗子" class="headerlink" title="官方 demo 的栗子"></a>官方 demo 的栗子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.butterknife.library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.AlphaAnimation;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> butterknife.BindView;</span><br><span class="line"><span class="keyword">import</span> butterknife.BindViews;</span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"><span class="keyword">import</span> butterknife.OnClick;</span><br><span class="line"><span class="keyword">import</span> butterknife.OnItemClick;</span><br><span class="line"><span class="keyword">import</span> butterknife.OnLongClick;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.widget.Toast.LENGTH_SHORT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ButterKnife.Action&lt;View&gt; ALPHA_FADE = <span class="keyword">new</span> ButterKnife.Action&lt;View&gt;() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(@NonNull View view, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            AlphaAnimation alphaAnimation = <span class="keyword">new</span> AlphaAnimation(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            alphaAnimation.setFillBefore(<span class="keyword">true</span>);</span><br><span class="line">            alphaAnimation.setDuration(<span class="number">500</span>);</span><br><span class="line">            alphaAnimation.setStartOffset(index * <span class="number">100</span>);</span><br><span class="line">            view.startAnimation(alphaAnimation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindView</span>(R2.id.title)</span><br><span class="line">    TextView title;</span><br><span class="line">    <span class="annotation">@BindView</span>(R2.id.subtitle)</span><br><span class="line">    TextView subtitle;</span><br><span class="line">    <span class="annotation">@BindView</span>(R2.id.hello)</span><br><span class="line">    Button hello;</span><br><span class="line">    <span class="annotation">@BindView</span>(R2.id.list_of_things)</span><br><span class="line">    ListView listOfThings;</span><br><span class="line">    <span class="annotation">@BindView</span>(R2.id.footer)</span><br><span class="line">    TextView footer;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindViews</span>(&#123;R2.id.title, R2.id.subtitle, R2.id.hello&#125;)</span><br><span class="line">    List&lt;View&gt; headerViews;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimpleAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@OnClick</span>(R2.id.hello)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Hello, views!"</span>, LENGTH_SHORT).show();</span><br><span class="line">        ButterKnife.apply(headerViews, ALPHA_FADE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@OnLongClick</span>(R2.id.hello)</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">sayGetOffMe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Let go of me!"</span>, LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@OnItemClick</span>(R2.id.list_of_things)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"You clicked: "</span> + adapter.getItem(position), LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.simple_activity);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Contrived code to use the bound fields.</span></span><br><span class="line">        title.setText(<span class="string">"Butter Knife"</span>);</span><br><span class="line">        subtitle.setText(<span class="string">"Field and method binding for Android views."</span>);</span><br><span class="line">        footer.setText(<span class="string">"by Jake Wharton"</span>);</span><br><span class="line">        hello.setText(<span class="string">"Say Hello"</span>);</span><br><span class="line"></span><br><span class="line">        adapter = <span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>);</span><br><span class="line">        listOfThings.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="官方-demo-的-apt-生成类的栗子"><a href="#官方-demo-的-apt-生成类的栗子" class="headerlink" title="官方 demo 的 apt 生成类的栗子"></a>官方 demo 的 apt 生成类的栗子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generated code from Butter Knife. Do not modify!</span></span><br><span class="line"><span class="keyword">package</span> com.example.butterknife.library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.annotation.CallSuper;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.UiThread;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> butterknife.Unbinder;</span><br><span class="line"><span class="keyword">import</span> butterknife.internal.DebouncingOnClickListener;</span><br><span class="line"><span class="keyword">import</span> butterknife.internal.Utils;</span><br><span class="line"><span class="keyword">import</span> java.lang.IllegalStateException;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleActivity_ViewBinding</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">SimpleActivity</span>&gt; <span class="keyword">implements</span> <span class="title">Unbinder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> T target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> View view2130968578;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> View view2130968579;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@UiThread</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleActivity_ViewBinding</span><span class="params">(<span class="keyword">final</span> T target, View source)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line"></span><br><span class="line">    View view;</span><br><span class="line">    target.title = Utils.findRequiredViewAsType(source, R.id.title, <span class="string">"field 'title'"</span>, TextView.class);</span><br><span class="line">    target.subtitle = Utils.findRequiredViewAsType(source, R.id.subtitle, <span class="string">"field 'subtitle'"</span>, TextView.class);</span><br><span class="line">    view = Utils.findRequiredView(source, R.id.hello, <span class="string">"field 'hello', method 'sayHello', and method 'sayGetOffMe'"</span>);</span><br><span class="line">    target.hello = Utils.castView(view, R.id.hello, <span class="string">"field 'hello'"</span>, Button.class);</span><br><span class="line">    view2130968578 = view;</span><br><span class="line">    view.setOnClickListener(<span class="keyword">new</span> DebouncingOnClickListener() &#123;</span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClick</span><span class="params">(View p0)</span> </span>&#123;</span><br><span class="line">        target.sayHello();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    view.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View p0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> target.sayGetOffMe();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    view = Utils.findRequiredView(source, R.id.list_of_things, <span class="string">"field 'listOfThings' and method 'onItemClick'"</span>);</span><br><span class="line">    target.listOfThings = Utils.castView(view, R.id.list_of_things, <span class="string">"field 'listOfThings'"</span>, ListView.class);</span><br><span class="line">    view2130968579 = view;</span><br><span class="line">    ((AdapterView&lt;?&gt;) view).setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; p0, View p1, <span class="keyword">int</span> p2, <span class="keyword">long</span> p3)</span> </span>&#123;</span><br><span class="line">        target.onItemClick(p2);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    target.footer = Utils.findRequiredViewAsType(source, R.id.footer, <span class="string">"field 'footer'"</span>, TextView.class);</span><br><span class="line">    target.headerViews = Utils.listOf(</span><br><span class="line">        Utils.findRequiredView(source, R.id.title, <span class="string">"field 'headerViews'"</span>), </span><br><span class="line">        Utils.findRequiredView(source, R.id.subtitle, <span class="string">"field 'headerViews'"</span>), </span><br><span class="line">        Utils.findRequiredView(source, R.id.hello, <span class="string">"field 'headerViews'"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="annotation">@CallSuper</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unbind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T target = <span class="keyword">this</span>.target;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Bindings already cleared."</span>);</span><br><span class="line"></span><br><span class="line">    target.title = <span class="keyword">null</span>;</span><br><span class="line">    target.subtitle = <span class="keyword">null</span>;</span><br><span class="line">    target.hello = <span class="keyword">null</span>;</span><br><span class="line">    target.listOfThings = <span class="keyword">null</span>;</span><br><span class="line">    target.footer = <span class="keyword">null</span>;</span><br><span class="line">    target.headerViews = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    view2130968578.setOnClickListener(<span class="keyword">null</span>);</span><br><span class="line">    view2130968578.setOnLongClickListener(<span class="keyword">null</span>);</span><br><span class="line">    view2130968578 = <span class="keyword">null</span>;</span><br><span class="line">    ((AdapterView&lt;?&gt;) view2130968579).setOnItemClickListener(<span class="keyword">null</span>);</span><br><span class="line">    view2130968579 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.target = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ButterKnife"><a href="#ButterKnife" class="headerlink" title="ButterKnife"></a>ButterKnife</h3><p>当要进行 bind 的时候，都需要在 Activity 或 View 等的初始化函数中进行绑定，这里就拿 Activity 为栗子进行分析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ButterKnife</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * BindView annotated fields and methods in the specified &#123;<span class="doctag">@link</span> Activity&#125;. The current content</span><br><span class="line">     * view is used as the view root.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> target Target activity for view binding.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@NonNull</span></span><br><span class="line">    <span class="annotation">@UiThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unbinder <span class="title">bind</span><span class="params">(@NonNull Activity target)</span> </span>&#123;</span><br><span class="line">        View sourceView = target.getWindow().getDecorView();</span><br><span class="line">        <span class="keyword">return</span> createBinding(target, sourceView);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Unbinder <span class="title">createBinding</span><span class="params">(@NonNull Object target, @NonNull View source)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; targetClass = target.getClass();</span><br><span class="line">        <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"Looking up binding for "</span> + targetClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;? extends Unbinder&gt; constructor = findBindingConstructorForClass(targetClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (constructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Unbinder.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection TryWithIdenticalCatches Resolves to API 19+ only type.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(target, source);<span class="comment">//申明实例</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to invoke "</span> + constructor, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to invoke "</span> + constructor, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable cause = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) cause;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (Error) cause;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to create binding instance."</span>, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Nullable</span></span><br><span class="line">    <span class="annotation">@CheckResult</span></span><br><span class="line">    <span class="annotation">@UiThread</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Constructor&lt;? extends Unbinder&gt; findBindingConstructorForClass(Class&lt;?&gt; cls) &#123;</span><br><span class="line">        Constructor&lt;? extends Unbinder&gt; bindingCtor = BINDINGS.get(cls);<span class="comment">//判断绑定过了没有</span></span><br><span class="line">        <span class="keyword">if</span> (bindingCtor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"HIT: Cached in binding map."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bindingCtor;</span><br><span class="line">        &#125;</span><br><span class="line">        String clsName = cls.getName();</span><br><span class="line">        <span class="keyword">if</span> (clsName.startsWith(<span class="string">"android."</span>) || clsName.startsWith(<span class="string">"java."</span>)) &#123;<span class="comment">//排除android和java的包</span></span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"MISS: Reached framework class. Abandoning search."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; bindingClass = cls.getClassLoader().loadClass(clsName + <span class="string">"_ViewBinding"</span>);<span class="comment">//加载后面加"_ViewBinding"的累</span></span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            bindingCtor = (Constructor&lt;? extends Unbinder&gt;) bindingClass.getConstructor(cls, View.class);<span class="comment">//初始化</span></span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"HIT: Loaded binding class and constructor."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Not found. Trying superclass "</span> + cls.getSuperclass().getName());</span><br><span class="line">            &#125;</span><br><span class="line">            bindingCtor = findBindingConstructorForClass(cls.getSuperclass());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to find binding constructor for "</span> + clsName, e);</span><br><span class="line">        &#125;</span><br><span class="line">        BINDINGS.put(cls, bindingCtor);</span><br><span class="line">        <span class="keyword">return</span> bindingCtor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终通过 ClassLoader 的方式将类加载出来，最后 constructor.newInstance 方法来调用该类的构造函数。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>平时了解到更多的是运行时注解，即声明注解的生命周期为 RUNTIME ，然后在运行的时候通过反射完成注入，这种方式虽然简单，但是设计到比较多的反射，必然多多少少会有性能的损耗。而 ButterKnife 用的 APT 编译时解析技术，比较好的解决了反射这些问题。</p>
<p>APT 大概就是声明的注解的生命周期为 CLASS ，然后继承 AbstractProcessor 类。继承这个类后，在编译的时候，编译器会扫描所有带有你要处理的注解的类，然后再调用 AbstractProcessor 的 process 方法，对注解进行处理，那么就可以在处理的时候，动态生成绑定事件或者控件的 java 代码，然后在运行的时候，直接调用 bind 方法完成绑定。<br>其实这种方式的好处是我们不用再一遍一遍地写 findViewById 和 onClick 等代码了，这个框架在编译的时候帮我们自动生成了这些代码，然后在运行的时候调用就行了。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android UI优化]]></title>
      <url>/2017/03/10/ui-optimize/</url>
      <content type="html"><![CDATA[<p>Android 的 UI 优化学习笔记和总结，包括一些导致卡顿的原因和一些解决方案，欢迎大家一起学习交流！</p>
<a id="more"></a>
<h2 id="16ms"><a href="#16ms" class="headerlink" title="16ms"></a>16ms</h2><p>Android 系统每隔 16ms 发出 VSYNC 信号触发对UI进行渲染，那么就要求每一帧都要在 16ms 内绘制完成（包括发送给 GPU 和 CPU 绘制到缓冲区的命令，这样就能够达到流畅的画面所需要的60fps。</p>
<p><img src="http://yydcdut.github.io/img/16ms.png" alt="http://yydcdut.github.io/img/16ms.png"></p>
<p>如果你的某个操作花费时间是24ms，系统在得到 VSYNC 信号的时候就无法进行正常渲染，这样就发生了丢帧现象。那么用户在 32ms 内看到的会是同一帧画面。</p>
<p><img src="http://yydcdut.github.io/img/34ms.png" alt="http://yydcdut.github.io/img/34ms.png"></p>
<h2 id="丢帧原因"><a href="#丢帧原因" class="headerlink" title="丢帧原因"></a>丢帧原因</h2><p>有很多原因可以导致丢帧，这里列举一些常见的：</p>
<ul>
<li>layout 太过复杂，层次过多</li>
<li>UI 上有层叠太多的绘制单元，过度绘制</li>
<li>CPU 或者 GPU 负载过重</li>
<li>动画执行的次数过多</li>
<li>频繁 GC，主要是内存抖动</li>
<li>UI 线程执行耗时操作</li>
<li>等等</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>接下来逐个分析导致原因以及解决方案：</p>
<h3 id="布局太过复杂，层次过多"><a href="#布局太过复杂，层次过多" class="headerlink" title="布局太过复杂，层次过多"></a>布局太过复杂，层次过多</h3><p>layout 布局是一棵树，树根是 window 的 decorView，套嵌的子 view 越深，树就越复杂，渲染就越费时间。每个 View 都会经过 measure、layout 和 draw 三个流程，都是从树根开始，那么选父布局的时候就要考虑渲染的性能问题：这里分析一下常见的布局控件 <code>LinearLayout</code> 、<code>RelativeLayout</code> 和 <code>FrameLayout</code> ：</p>
<h4 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h4><p>LinearLayout 在 measure 的时候，在横向或者纵向会去测量子 View 的宽度或高度，且只会测量一次，但是当设置 <code>layout_weight</code> 属性的时候会去测量两次才能获得精确的展示尺寸。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class="line">            measureVertical(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            measureHorizontal(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">measureVertical</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//blablabla......</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">            <span class="comment">//blablabla......</span></span><br><span class="line">            <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY &amp;&amp; lp.height == <span class="number">0</span> &amp;&amp; lp.weight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//blablabla......</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//blablabla......</span></span><br><span class="line">              </span><br><span class="line">                <span class="comment">// Determine how big this child would like to be. If this or</span></span><br><span class="line">                <span class="comment">// previous children have given a weight, then we allow it to</span></span><br><span class="line">                <span class="comment">// use all available space (and we will shrink things later</span></span><br><span class="line">                <span class="comment">// if needed).</span></span><br><span class="line">                measureChildBeforeLayout(</span><br><span class="line">                       child, i, widthMeasureSpec, <span class="number">0</span>, heightMeasureSpec,</span><br><span class="line">                       totalWeight == <span class="number">0</span> ? mTotalLength : <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//blablabla......</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//blablabla......</span></span><br><span class="line">        <span class="keyword">if</span> (skippedMeasure || delta != <span class="number">0</span> &amp;&amp; totalWeight &gt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">float</span> childExtra = lp.weight;</span><br><span class="line">                <span class="keyword">if</span> (childExtra &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> share = (<span class="keyword">int</span>) (childExtra * delta / weightSum);</span><br><span class="line">                    weightSum -= childExtra;</span><br><span class="line">                    delta -= share;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(widthMeasureSpec,</span><br><span class="line">                            mPaddingLeft + mPaddingRight +</span><br><span class="line">                                    lp.leftMargin + lp.rightMargin, lp.width);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ((lp.height != <span class="number">0</span>) || (heightMode != MeasureSpec.EXACTLY)) &#123;</span><br><span class="line">                        <span class="comment">// child was measured once already above...</span></span><br><span class="line">                        <span class="comment">// base new measurement on stored values</span></span><br><span class="line">                        <span class="keyword">int</span> childHeight = child.getMeasuredHeight() + share;</span><br><span class="line">                        <span class="keyword">if</span> (childHeight &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                            childHeight = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        child.measure(childWidthMeasureSpec,</span><br><span class="line">                                MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// child was skipped in the loop above.</span></span><br><span class="line">                        <span class="comment">// Measure for this first time here      </span></span><br><span class="line">                        child.measure(childWidthMeasureSpec,</span><br><span class="line">                                MeasureSpec.makeMeasureSpec(share &gt; <span class="number">0</span> ? share : <span class="number">0</span>,</span><br><span class="line">                                        MeasureSpec.EXACTLY));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alternativeMaxWidth = Math.max(alternativeMaxWidth,</span><br><span class="line">                                           weightedMaxWidth);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// We have no limit, so make all weighted views as tall as the largest child.</span></span><br><span class="line">            <span class="comment">// Children will have already been measured once.</span></span><br><span class="line">            <span class="keyword">if</span> (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                    <span class="keyword">final</span> View child = getVirtualChildAt(i);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (child == <span class="keyword">null</span> || child.getVisibility() == View.GONE) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> LinearLayout.LayoutParams lp =</span><br><span class="line">                            (LinearLayout.LayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">float</span> childExtra = lp.weight;</span><br><span class="line">                    <span class="keyword">if</span> (childExtra &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        child.measure(</span><br><span class="line">                                MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),</span><br><span class="line">                                        MeasureSpec.EXACTLY),</span><br><span class="line">                                MeasureSpec.makeMeasureSpec(largestChildHeight,</span><br><span class="line">                                        MeasureSpec.EXACTLY));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//blablabla......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h4><p>RelativeLayout 在 measure 的时候会在横向和纵向各测量一次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RelativeLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//blablabla......</span></span><br><span class="line">      </span><br><span class="line">        View[] views = mSortedHorizontalChildren;</span><br><span class="line">        <span class="keyword">int</span> count = views.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            View child = views[i];</span><br><span class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">                LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class="line">                <span class="keyword">int</span>[] rules = params.getRules(layoutDirection);</span><br><span class="line"></span><br><span class="line">                applyHorizontalSizeRules(params, myWidth, rules);</span><br><span class="line">                measureChildHorizontal(child, params, myWidth, myHeight);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (positionChildHorizontal(child, params, myWidth, isWrapContentWidth)) &#123;</span><br><span class="line">                    offsetHorizontalAxis = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//blablabla......</span></span><br><span class="line">      </span><br><span class="line">        views = mSortedVerticalChildren;</span><br><span class="line">        count = views.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = views[i];</span><br><span class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</span><br><span class="line">                <span class="keyword">final</span> LayoutParams params = (LayoutParams) child.getLayoutParams();</span><br><span class="line"></span><br><span class="line">                applyVerticalSizeRules(params, myHeight, child.getBaseline());</span><br><span class="line">                measureChild(child, params, myWidth, myHeight);</span><br><span class="line">                <span class="keyword">if</span> (positionChildVertical(child, params, myHeight, isWrapContentHeight)) &#123;</span><br><span class="line">                    offsetVerticalAxis = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isWrapContentWidth) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isLayoutRtl()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">                            width = Math.max(width, myWidth - params.mLeft);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            width = Math.max(width, myWidth - params.mLeft - params.leftMargin);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">                            width = Math.max(width, params.mRight);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            width = Math.max(width, params.mRight + params.rightMargin);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isWrapContentHeight) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (targetSdkVersion &lt; Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">                        height = Math.max(height, params.mBottom);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        height = Math.max(height, params.mBottom + params.bottomMargin);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (child != ignore || verticalGravity) &#123;</span><br><span class="line">                    left = Math.min(left, params.mLeft - params.leftMargin);</span><br><span class="line">                    top = Math.min(top, params.mTop - params.topMargin);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (child != ignore || horizontalGravity) &#123;</span><br><span class="line">                    right = Math.max(right, params.mRight + params.rightMargin);</span><br><span class="line">                    bottom = Math.max(bottom, params.mBottom + params.bottomMargin);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//blablabla......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="简析"><a href="#简析" class="headerlink" title="简析"></a>简析</h4><p>如果带有 weight 属性的 LinearLayout 或者 RelativeLayout 被套嵌使用，measure 所费时间可能会呈指数级增长（两个套嵌的叶子 view 会有四次 measure，三个套嵌的叶子 view 会有8次的 measure）。为了缩短这个时间，保持树形结构尽量扁平（深度低），而且尽量要移除所有不需要渲染的 view。</p>
<h4 id="Hierarchy-Viewer"><a href="#Hierarchy-Viewer" class="headerlink" title="Hierarchy Viewer"></a>Hierarchy Viewer</h4><p>Hierarchy Viewer 可以很方便可视化的查看屏幕上套嵌 view 结构，这个工具在 sdk 的 tools 文件里面。</p>
<h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><p><img src="http://yydcdut.github.io/img/MsgNumberView_before0.png" alt="http://yydcdut.github.io/img/MsgNumberView_before0.png"></p>
<p><img src="http://yydcdut.github.io/img/MsgNumberView_before1.png" alt="http://yydcdut.github.io/img/MsgNumberView_before1.png"></p>
<p>MsgNumberView 是一个自定义控件，其 measure、layout 和 draw 共花费 3ms 的时间，可以发现布局中多了一层 LinearLayout，而该 LinearLayout 而进行了测量等操作，共花费 1.4ms 时间。当我们去除中间的 LinearLayout 后再分析看：</p>
<p><img src="http://yydcdut.github.io/img/MsgNumberView_after.png" alt="http://yydcdut.github.io/img/MsgNumberView_after.png"></p>
<p>去除之后发现，总体在渲染上下降了很多时间，变为了 0.25ms。</p>
<p>你可能已经注意到了每个 view 里黄色、绿色等圆圈。它们表示该 view 在那一层树形结构里 measure，layout 和 draw 所花费的相对时间。绿色表示最快的前 50%，黄色表示最慢的前 50%，红色表示那一层里面最慢的 view 。</p>
<p>再来看一个栗子：</p>
<p><img src="http://yydcdut.github.io/img/JobPostDetail_CompanyScale_before.png" alt="http://yydcdut.github.io/img/JobPostDetail_CompanyScale_before.png"></p>
<p>该 LinearLayout 里面有三个子 View，其中两个也是 LinearLayout ，并且子 LinearLayout 中是两个 TextView，对于最外层的 LinearLayout 来说，渲染共花费了 3.6ms 左右。那么处理一下，减少深度：</p>
<p><img src="http://yydcdut.github.io/img/JobPostDetail_CompanyScale_after.png" alt="http://yydcdut.github.io/img/JobPostDetail_CompanyScale_after.png"></p>
<p>发现渲染减到了 1ms 左右。当然这里的修改不仅仅是布局上的修改，在 java 代码上也有一些改动，之前上边的 TextView 是作为 Label 控件，那么现在 Label 和 真正显示数据的 TextView 合并成一个，在 Java 代码中也进行了处理，包括 Label 的字体颜色与显示控件的字体颜色不一样，通过 Html 或者 Spannable 进行修饰等等。</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul>
<li>避免复杂的 View 层级</li>
<li>避免 layout 顶层使用 RelativeLayout</li>
<li>布局层次相同的情况下，使用 LinearLayout</li>
<li>复杂布局建议采用 RelativeLayout 而不是多层次的 LinearLayout</li>
<li><code>&lt;include/&gt;</code>  标签复用</li>
<li><code>&lt;merge/&gt;</code> 标签减少嵌套</li>
<li>尽量避免 <code>layout_weight</code> </li>
<li>视图按需加载或者使用 ViewStub</li>
</ul>
<h3 id="层叠太多，过度绘制"><a href="#层叠太多，过度绘制" class="headerlink" title="层叠太多，过度绘制"></a>层叠太多，过度绘制</h3><p>跟 measure 一样， View 的绘制也是从树根开始一层一层往叶子绘制，就难免导致叶子的绘制挡住了其父节点的一些绘制的内容。过渡绘制是一个术语，表示某些组件在屏幕上的一个像素点的绘制次数超过 1 次。过度绘制导致的问题是花了太多的时间去绘制那些堆叠在下面的、用户看不到的东西，浪费了 CPU 周期和渲染时间。</p>
<h4 id="调试-GPU-过度绘制"><a href="#调试-GPU-过度绘制" class="headerlink" title="调试 GPU 过度绘制"></a>调试 GPU 过度绘制</h4><p><img src="http://yydcdut.github.io/img/overdraw.png" alt="http://yydcdut.github.io/img/overdraw.png"></p>
<p>蓝色，淡绿，淡红，深红代表了4种不同程度的 Overdraw 情况，我们的目标就是尽量减少红色 Overdraw，看到更多的蓝色甚至白色区域。</p>
<p><img src="http://yydcdut.github.io/img/overdraw_options_view.png" alt="http://yydcdut.github.io/img/overdraw_options_view.png"></p>
<h4 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h4><p><img src="http://yydcdut.github.io/img/overdraw_bad.png" alt="http://yydcdut.github.io/img/overdraw_bad.png"><img src="http://yydcdut.github.io/img/overdraw_good.png" alt="http://yydcdut.github.io/img/overdraw_good.png"></p>
<p>这里展示的是帖子的详情页 Activity，在做这里的过度绘制的优化的时候，我从 xml 文件和 Java 代码两个层面去进行优化，在 xml 中去除无用的 background 等，点击态的 normal 状态统一用 transparent，在 Java 代码中，当 loading 结束后，修改 loading 的背景由灰色变为白色颜色等。</p>
<h4 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h4><ul>
<li>去除重复或者不必要的 background</li>
<li>点击态中的 normal 尽量设置成 transparent</li>
<li>去除 window 中的 background（这个可以通过处理 decorView 或者设置 Theme 的方式）</li>
<li>若是自定义控件的话，通过 <code>canvas.clipRect()</code> 帮助系统识别那些可见的区域</li>
</ul>
<p><img src="http://yydcdut.github.io/img/android_perf_course_clip_1.png" alt="http://yydcdut.github.io/img/android_perf_course_clip_1.png"></p>
<p>上面的示例图中显示了一个自定义的 View，主要效果是呈现多张重叠的卡片。这个 View 的 onDraw 方法如下图所示：</p>
<p><img src="http://yydcdut.github.io/img/android_perf_course_clip_3.png" alt="http://yydcdut.github.io/img/android_perf_course_clip_3.png"></p>
<p>打开开发者选项中的显示过度渲染，可以看到我们这个自定义的 View 部分区域存在着过度绘制。下面的代码显示了如何通过 clipRect 来解决自定义 View 的过度绘制，提高自定义 View 的绘制性能：</p>
<p><img src="http://yydcdut.github.io/img/android_perf_course_clip_code_compare.png" alt="http://yydcdut.github.io/img/android_perf_course_clip_code_compare.png"></p>
<p>下面是优化过后的效果：</p>
<p><img src="http://yydcdut.github.io/img/android_perf_course_clip_result.png" alt="http://yydcdut.github.io/img/android_perf_course_clip_result.png"></p>
<h3 id="负载过重"><a href="#负载过重" class="headerlink" title="负载过重"></a>负载过重</h3><p>UI 线程是应用的主线程，很多的性能和卡顿问题是由于在主线程中做了大量的工作。除了主线程外，子线程占用过多 CPU 资源也会导致渲染性能问题。</p>
<p>在 UI 渲染的过程中，是 CPU 和 GPU 共同合作完成的，其中 CPU 负责把 UI 组件计算成 Polygons，Texture 纹理，然后交给 GPU 进行栅格化渲染。</p>
<p><img src="http://yydcdut.github.io/img/gpu_cpu_rasterization.png" alt="http://yydcdut.github.io/img/gpu_cpu_rasterization.png"></p>
<h4 id="GPU-呈现模式分析"><a href="#GPU-呈现模式分析" class="headerlink" title="GPU 呈现模式分析"></a>GPU 呈现模式分析</h4><p><img src="http://yydcdut.github.io/img/tools_gpu_profile.png" alt="http://yydcdut.github.io/img/tools_gpu_profile.png"></p>
<p>通过在 Android 设备的开发者选项里启动 “ GPU 呈现模式分析 ” ，可以得到最近 128 帧 每一帧渲染的时间。在 Android 6.0 之前，界面上显示的柱状图主要是三个颜色，分别是黄、红和蓝色。</p>
<p>通俗点来讲，黄色代表 CPU 通知 GPU，当 CPU 有太多事情做的时候，黄色的线就会长一些；红色代表渲染时间，比如层次深的情况下，渲染时间就会长一点，红色的线也会长一些；蓝色代表执行 <code>onDraw()</code> 时间。而横着的绿色的那条线代表 16ms 分割线。</p>
<h4 id="栗子-2"><a href="#栗子-2" class="headerlink" title="栗子"></a>栗子</h4><p><img src="http://yydcdut.github.io/img/cpu_gpu_good.jpg" alt="http://yydcdut.github.io/img/cpu_gpu_good.jpg"><img src="http://yydcdut.github.io/img/cpu_gpu_bad.jpg" alt="http://yydcdut.github.io/img/cpu_gpu_bad.jpg"></p>
<p>这是一个选择照片的功能的一个页面，用的 RecyclerView，两张图的唯一区别在于 Adapter 中加入了一段异步耗时操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaPhotoAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MediaPhotoViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MediaPhotoViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    YLog.i(<span class="string">"tag"</span>, <span class="string">"i--&gt;"</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//blablabla.....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次更新 View 的时候都会开启新线程做一些耗时的操作，这个线程就用了大部分 CPU 资源，这个过程就跟在 ListView 滑动的时候异步加载图片类似。</p>
<h4 id="Android-System-Trace"><a href="#Android-System-Trace" class="headerlink" title="Android System Trace"></a>Android System Trace</h4><p>VSYNC-app 是均匀分布的宽条，每个宽条表示 16 ms。当发出 VSYNC 信号时， surfaceflinger 会去绘制刷新，在理想情况下 surfaceflinger 之间相距也是 16ms，因此如果出现长条空缺则表示 surfaceflinger 丢掉了一次 VSYNC 更新信号，屏幕就没有及时的刷新。</p>
<p><img src="http://yydcdut.github.io/img/trace_0.png" alt="http://yydcdut.github.io/img/trace_0.png"></p>
<p>从图片上来看，在加载页面的时候发生过好几次丢帧的情况，可以通过方法开查看具体什么原因导致的丢帧。Frames 是提供的判断绘制该帧的情况，分别有绿、黄和红色，当为空色的时候表示该帧耗时很严重，我们就可以从这些红色的 F 为出发点去分析。</p>
<p><img src="http://yydcdut.github.io/img/trace_1.png" alt="http://yydcdut.github.io/img/trace_1.png"></p>
<p>我们可以查从图片上可以看出，先进行了 dorceView-inflate 操作（UI Thread 绿色那部分），这个操作在 UI 线程，且速度很快，在 1ms 内就完成了，接下来就是两个蓝色的 inflate 操作了。</p>
<p><img src="http://yydcdut.github.io/img/trace_2.png" alt="http://yydcdut.github.io/img/trace_2.png"></p>
<p><img src="http://yydcdut.github.io/img/trace_3.png" alt="http://yydcdut.github.io/img/trace_3.png"></p>
<p>第一次 inflate 是在 Activity 的 <code>setContent()</code> 中完成，其中看到了之前所说的 <code>MsgNumberView</code>，第二次 inflate 是发生在 Fragment 中，界面中除了  Titlebar，其他的都是在这个 Fragment 中展示的，所以这个界面的 inflate 比 Activity 的更加耗时。</p>
<p>第一次 inflate 和 第二次 inflate 之间还有一段时间的白色间隙，这是因为初始化 View （比如 <code>findViewById</code> 等）、网络请求封装、业务逻辑等操作。在完成第二次 inflate 之后发现后面还有一小段的白色间隙，这是因为等待一下个 VSYNC 信号。</p>
<p><img src="http://yydcdut.github.io/img/trace_4.png" alt="http://yydcdut.github.io/img/trace_4.png"></p>
<p>这里的 F 是黄色的，我的猜测这里应该是网络请求的数据返回回来了，因为这个页面的数据量巨大，接近百个字段吧，同时数据解析是放在 UI 线程进行的，包括 InputStream 转 String，String 转 Json 再解析。同时在下面建议中也说明了建议放在后台线程中以免阻塞 UI 线程。</p>
<p><img src="http://yydcdut.github.io/img/trace_5.png" alt="http://yydcdut.github.io/img/trace_5.png"></p>
<p>这里又发生了在 UI 线程的耗时的 inflate 事情，这是因为对于不同的帖子，这些数据可能会展示可能会不展示，而在需求开发中明确了这些数据不展示的情况大于真是的情况，所以采用了动态的 inflate 操作，也可以采用 ViewStub 哈。</p>
<p><img src="http://yydcdut.github.io/img/trace_6.png" alt="http://yydcdut.github.io/img/trace_6.png"></p>
<p>这里又发生了超级耗时的操作， F 都为红色了，根据描述来分析是因为 Measure 和 Layout 以及 <code>draw()</code> 花费了太多的时间。</p>
<p>（Android System Trace 用的还不是很熟练，有不对的地方轻喷）</p>
<h3 id="内存抖动"><a href="#内存抖动" class="headerlink" title="内存抖动"></a>内存抖动</h3><p><img src="http://yydcdut.github.io/img/memory_monitor_gc.png" alt="http://yydcdut.github.io/img/memory_monitor_gc.png"></p>
<p>在我接触过的内存抖动中，主要导致原因是频繁创建大对象或者频繁创建大量对象，并且这些对象属于用完就废弃的，比如 byte[] 。我接触到的内存抖动是在 Camera 获取帧数据，在回调函数中 <code>onPreviewFrame(byte[] data, Camera camera)</code> 使用到了 byte[] ，等到下一帧数据回调回来的时候又是一个新的 byte[] 。而 GC 操作或多或少都会 “ stop-the-world “，<strong>比如 GC 操作花费了 5ms 的时间，那么该帧的绘制就会从原来的 16ms 变为 11ms</strong>。</p>
<h4 id="优化-2"><a href="#优化-2" class="headerlink" title="优化"></a>优化</h4><ul>
<li>大对象可以使用对象池复用，比如 byte[]</li>
<li>尽量在 16ms 内少创建对象，比如在 <code>onDraw</code> 中创建 <code>Paint</code> 对象，decode Bitmap 之类的</li>
</ul>
<h3 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h3><p>并非所有的都支持硬件加速，其中包括 <code>clipPath()</code> 等；同时也有一些方法在开启硬件加速之后与不开启硬件加速效果不一样，比如 <code>drawBitmapMesh()</code> 等。</p>
<h4 id="Application-级别"><a href="#Application-级别" class="headerlink" title="Application 级别"></a>Application 级别</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">applicationandroid:hardwareAccelerated</span> = "<span class="attribute">true</span>" <span class="attribute">...</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Activity-级别"><a href="#Activity-级别" class="headerlink" title="Activity 级别"></a>Activity 级别</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:hardwareAccelerated</span> = "<span class="attribute">true</span>" <span class="attribute">...</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Window-级别"><a href="#Window-级别" class="headerlink" title="Window 级别"></a>Window 级别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setFlags(</span><br><span class="line">    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,</span><br><span class="line">    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);</span><br></pre></td></tr></table></figure>
<h4 id="View-级别"><a href="#View-级别" class="headerlink" title="View 级别"></a>View 级别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View.setLayerType(View.LAYER_TYPE_HARDWARE, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://hukai.me/android-performance-patterns/" target="_blank" rel="external">Android性能优化典范 - 第1季</a></li>
<li><a href="http://hukai.me/android-performance-render/" target="_blank" rel="external">Android性能优化之渲染篇</a></li>
<li><a href="https://testerhome.com/topics/4304" target="_blank" rel="external">Android界面性能调优手册</a></li>
<li><a href="http://mrpeak.cn/android/2016/01/11/android-performance-ui" target="_blank" rel="external">Android UI性能优化详解</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Animation和Animator流程分析]]></title>
      <url>/2017/03/01/the-flow-of-animation-and-animator-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 分析版本：android-23</p>
</blockquote>
<p>Animation 和 Animator 是 Android 上实现动画的两种不同方式，本文是对这两种动画进行流程上的解析，其分析方向主要是 Listener 是怎么回调的，是怎么不断的调用自己的，是间隔多少时间调用自己的。</p>
<a id="more"></a>
<h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>从 startAnimation 开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mView.startAnimation(animation);</span><br></pre></td></tr></table></figure>
<p>进入到 View 里面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>, <span class="title">AccessibilityEventSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAnimation</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">        animation.setStartTime(Animation.START_ON_FIRST_FRAME);<span class="comment">//START_ON_FIRST_FRAME == -1</span></span><br><span class="line">        setAnimation(animation);</span><br><span class="line">        invalidateParentCaches();</span><br><span class="line">        invalidate(<span class="keyword">true</span>);</span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">protected</span> Animation mCurrentAnimation = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimation</span><span class="params">(Animation animation)</span> </span>&#123;</span><br><span class="line">        mCurrentAnimation = animation;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (animation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If the screen is off assume the animation start time is now instead of</span></span><br><span class="line">            <span class="comment">// the next frame we draw. Keeping the START_ON_FIRST_FRAME start time</span></span><br><span class="line">            <span class="comment">// would cause the animation to start when the screen turns back on</span></span><br><span class="line">            <span class="keyword">if</span> (mAttachInfo != <span class="keyword">null</span> &amp;&amp; mAttachInfo.mDisplayState == Display.STATE_OFF</span><br><span class="line">                    &amp;&amp; animation.getStartTime() == Animation.START_ON_FIRST_FRAME) &#123;<span class="comment">//START_ON_FIRST_FRAME == -1</span></span><br><span class="line">                animation.setStartTime(AnimationUtils.currentAnimationTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">            animation.reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invalidateParentCaches</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mParent <span class="keyword">instanceof</span> View) &#123;</span><br><span class="line">            ((View) mParent).mPrivateFlags |= PFLAG_INVALIDATED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(<span class="keyword">boolean</span> invalidateCache)</span> </span>&#123;</span><br><span class="line">        invalidateInternal(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop, invalidateCache, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置 Animation 变量并设置时间等，刷新父视图绘画缓存，刷新自己：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>, <span class="title">AccessibilityEventSource</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidateInternal</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b, <span class="keyword">boolean</span> invalidateCache,</span><br><span class="line">            <span class="keyword">boolean</span> fullInvalidate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mGhostView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mGhostView.invalidate(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (skipInvalidate()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((mPrivateFlags &amp; (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)</span><br><span class="line">                || (invalidateCache &amp;&amp; (mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID)</span><br><span class="line">                || (mPrivateFlags &amp; PFLAG_INVALIDATED) != PFLAG_INVALIDATED</span><br><span class="line">                || (fullInvalidate &amp;&amp; isOpaque() != mLastIsOpaque)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fullInvalidate) &#123;</span><br><span class="line">                mLastIsOpaque = isOpaque();</span><br><span class="line">                mPrivateFlags &amp;= ~PFLAG_DRAWN;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mPrivateFlags |= PFLAG_DIRTY;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (invalidateCache) &#123;</span><br><span class="line">                mPrivateFlags |= PFLAG_INVALIDATED;</span><br><span class="line">                mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate the damage rectangle to the parent view.</span></span><br><span class="line">            <span class="keyword">final</span> AttachInfo ai = mAttachInfo;</span><br><span class="line">            <span class="keyword">final</span> ViewParent p = mParent;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; ai != <span class="keyword">null</span> &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</span><br><span class="line">                <span class="keyword">final</span> Rect damage = ai.mTmpInvalRect;</span><br><span class="line">                damage.set(l, t, r, b);</span><br><span class="line">                p.invalidateChild(<span class="keyword">this</span>, damage);<span class="comment">//主要是这里</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Damage the entire projection receiver, if necessary.</span></span><br><span class="line">            <span class="keyword">if</span> (mBackground != <span class="keyword">null</span> &amp;&amp; mBackground.isProjected()) &#123;</span><br><span class="line">                <span class="keyword">final</span> View receiver = getProjectionReceiver();</span><br><span class="line">                <span class="keyword">if</span> (receiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    receiver.damageInParent();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Damage the entire IsolatedZVolume receiving this view's shadow.</span></span><br><span class="line">            <span class="keyword">if</span> (isHardwareAccelerated() &amp;&amp; getZ() != <span class="number">0</span>) &#123;</span><br><span class="line">                damageShadowReceiver();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面最重要的是 <code>p.invalidateChild(this, damage);</code> 那么进入到 ViewGroup 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroup</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">ViewParent</span>, <span class="title">ViewManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invalidateChild</span><span class="params">(View child, <span class="keyword">final</span> Rect dirty)</span> </span>&#123;</span><br><span class="line">        ViewParent parent = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">        <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If the child is drawing an animation, we want to copy this flag onto</span></span><br><span class="line">            <span class="comment">// ourselves and the parent to make sure the invalidate request goes</span></span><br><span class="line">            <span class="comment">// through</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> drawAnimation = (child.mPrivateFlags &amp; PFLAG_DRAW_ANIMATION)</span><br><span class="line">                    == PFLAG_DRAW_ANIMATION;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check whether the child that requests the invalidate is fully opaque</span></span><br><span class="line">            <span class="comment">// Views being animated or transformed are not considered opaque because we may</span></span><br><span class="line">            <span class="comment">// be invalidating their old position and need the parent to paint behind them.</span></span><br><span class="line">            Matrix childMatrix = child.getMatrix();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> isOpaque = child.isOpaque() &amp;&amp; !drawAnimation &amp;&amp;</span><br><span class="line">                    child.getAnimation() == <span class="keyword">null</span> &amp;&amp; childMatrix.isIdentity();</span><br><span class="line">            <span class="comment">// Mark the child as dirty, using the appropriate flag</span></span><br><span class="line">            <span class="comment">// Make sure we do not set both flags at the same time</span></span><br><span class="line">            <span class="keyword">int</span> opaqueFlag = isOpaque ? PFLAG_DIRTY_OPAQUE : PFLAG_DIRTY;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (child.mLayerType != LAYER_TYPE_NONE) &#123;</span><br><span class="line">                mPrivateFlags |= PFLAG_INVALIDATED;</span><br><span class="line">                mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] location = attachInfo.mInvalidateChildLocation;</span><br><span class="line">            location[CHILD_LEFT_INDEX] = child.mLeft;</span><br><span class="line">            location[CHILD_TOP_INDEX] = child.mTop;</span><br><span class="line">            <span class="keyword">if</span> (!childMatrix.isIdentity() ||</span><br><span class="line">                    (mGroupFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != <span class="number">0</span>) &#123;</span><br><span class="line">                RectF boundingRect = attachInfo.mTmpTransformRect;</span><br><span class="line">                boundingRect.set(dirty);</span><br><span class="line">                Matrix transformMatrix;</span><br><span class="line">                <span class="keyword">if</span> ((mGroupFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != <span class="number">0</span>) &#123;</span><br><span class="line">                    Transformation t = attachInfo.mTmpTransformation;</span><br><span class="line">                    <span class="keyword">boolean</span> transformed = getChildStaticTransformation(child, t);</span><br><span class="line">                    <span class="keyword">if</span> (transformed) &#123;</span><br><span class="line">                        transformMatrix = attachInfo.mTmpMatrix;</span><br><span class="line">                        transformMatrix.set(t.getMatrix());</span><br><span class="line">                        <span class="keyword">if</span> (!childMatrix.isIdentity()) &#123;</span><br><span class="line">                            transformMatrix.preConcat(childMatrix);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        transformMatrix = childMatrix;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    transformMatrix = childMatrix;</span><br><span class="line">                &#125;</span><br><span class="line">                transformMatrix.mapRect(boundingRect);</span><br><span class="line">                dirty.set((<span class="keyword">int</span>) (boundingRect.left - <span class="number">0.5f</span>),</span><br><span class="line">                        (<span class="keyword">int</span>) (boundingRect.top - <span class="number">0.5f</span>),</span><br><span class="line">                        (<span class="keyword">int</span>) (boundingRect.right + <span class="number">0.5f</span>),</span><br><span class="line">                        (<span class="keyword">int</span>) (boundingRect.bottom + <span class="number">0.5f</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            do &#123;</span><br><span class="line">                View view = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (parent <span class="keyword">instanceof</span> View) &#123;</span><br><span class="line">                    view = (View) parent;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (drawAnimation) &#123;<span class="comment">//设置Animation标志参数</span></span><br><span class="line">                    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        view.mPrivateFlags |= PFLAG_DRAW_ANIMATION;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent <span class="keyword">instanceof</span> ViewRootImpl) &#123;</span><br><span class="line">                        ((ViewRootImpl) parent).mIsAnimating = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the parent is dirty opaque or not dirty, mark it dirty with the opaque</span></span><br><span class="line">                <span class="comment">// flag coming from the child that initiated the invalidate</span></span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((view.mViewFlags &amp; FADING_EDGE_MASK) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                            view.getSolidColor() == <span class="number">0</span>) &#123;</span><br><span class="line">                        opaqueFlag = PFLAG_DIRTY;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((view.mPrivateFlags &amp; PFLAG_DIRTY_MASK) != PFLAG_DIRTY) &#123;</span><br><span class="line">                        view.mPrivateFlags = (view.mPrivateFlags &amp; ~PFLAG_DIRTY_MASK) | opaqueFlag;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                parent = parent.invalidateChildInParent(location, dirty);</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Account for transform on current parent</span></span><br><span class="line">                    Matrix m = view.getMatrix();</span><br><span class="line">                    <span class="keyword">if</span> (!m.isIdentity()) &#123;</span><br><span class="line">                        RectF boundingRect = attachInfo.mTmpTransformRect;</span><br><span class="line">                        boundingRect.set(dirty);</span><br><span class="line">                        m.mapRect(boundingRect);</span><br><span class="line">                        dirty.set((<span class="keyword">int</span>) (boundingRect.left - <span class="number">0.5f</span>),</span><br><span class="line">                                (<span class="keyword">int</span>) (boundingRect.top - <span class="number">0.5f</span>),</span><br><span class="line">                                (<span class="keyword">int</span>) (boundingRect.right + <span class="number">0.5f</span>),</span><br><span class="line">                                (<span class="keyword">int</span>) (boundingRect.bottom + <span class="number">0.5f</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (parent != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>parent = parent.invalidateChildInParent(location, dirty);</code>  进入到 ViewRootImpl 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewRootImpl</span> <span class="keyword">implements</span> <span class="title">ViewParent</span>, <span class="title">View</span>.<span class="title">AttachInfo</span>.<span class="title">Callbacks</span>, <span class="title">HardwareRenderer</span>.<span class="title">HardwareDrawCallbacks</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewParent <span class="title">invalidateChildInParent</span><span class="params">(<span class="keyword">int</span>[] location, Rect dirty)</span> </span>&#123;</span><br><span class="line">        checkThread();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_DRAW) Log.v(TAG, <span class="string">"Invalidate child: "</span> + dirty);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dirty == <span class="keyword">null</span>) &#123;<span class="comment">//视图没脏</span></span><br><span class="line">            invalidate();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dirty.isEmpty() &amp;&amp; !mIsAnimating) &#123;<span class="comment">//不是动画的操作</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mCurScrollY != <span class="number">0</span> || mTranslator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mTempRect.set(dirty);</span><br><span class="line">            dirty = mTempRect;</span><br><span class="line">            <span class="keyword">if</span> (mCurScrollY != <span class="number">0</span>) &#123;</span><br><span class="line">                dirty.offset(<span class="number">0</span>, -mCurScrollY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mTranslator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mTranslator.translateRectInAppWindowToScreen(dirty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mAttachInfo.mScalingRequired) &#123;</span><br><span class="line">                dirty.inset(-<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        invalidateRectOnScreen(dirty);<span class="comment">//主要是这里</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invalidateRectOnScreen</span><span class="params">(Rect dirty)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Rect localDirty = mDirty;</span><br><span class="line">        <span class="keyword">if</span> (!localDirty.isEmpty() &amp;&amp; !localDirty.contains(dirty)) &#123;</span><br><span class="line">            mAttachInfo.mSetIgnoreDirtyState = <span class="keyword">true</span>;</span><br><span class="line">            mAttachInfo.mIgnoreDirtyState = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the new dirty rect to the current one</span></span><br><span class="line">        localDirty.union(dirty.left, dirty.top, dirty.right, dirty.bottom);</span><br><span class="line">        <span class="comment">// Intersect with the bounds of the window to skip</span></span><br><span class="line">        <span class="comment">// updates that lie outside of the visible region</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> appScale = mAttachInfo.mApplicationScale;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> intersected = localDirty.intersect(<span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                (<span class="keyword">int</span>) (mWidth * appScale + <span class="number">0.5f</span>), (<span class="keyword">int</span>) (mHeight * appScale + <span class="number">0.5f</span>));</span><br><span class="line">        <span class="keyword">if</span> (!intersected) &#123;</span><br><span class="line">            localDirty.setEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!mWillDrawSoon &amp;&amp; (intersected || mIsAnimating)) &#123;</span><br><span class="line">            scheduleTraversals();<span class="comment">//主要是这里</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mTraversalScheduled) &#123;</span><br><span class="line">            mTraversalScheduled = <span class="keyword">true</span>;</span><br><span class="line">            mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();<span class="comment">//阻塞的Barrier，『同步分割栏』</span></span><br><span class="line">            mChoreographer.postCallback(</span><br><span class="line">                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="keyword">null</span>);<span class="comment">//记住CALLBACK_TRAVERSAL</span></span><br><span class="line">            <span class="keyword">if</span> (!mUnbufferedInputDispatch) &#123;</span><br><span class="line">                scheduleConsumeBatchedInput();</span><br><span class="line">            &#125;</span><br><span class="line">            notifyRendererOfFramePending();</span><br><span class="line">            pokeDrawLockIfNeeded();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先记住比较重要的信息，<code>Choreographer.CALLBACK_TRAVERSAL</code>，然后比较重要的 Choreographer 来了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Choreographer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Enable/disable vsync for animations and drawing.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> USE_VSYNC = SystemProperties.getBoolean(</span><br><span class="line">            <span class="string">"debug.choreographer.vsync"</span>, <span class="keyword">true</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// The display event receiver can only be accessed by the looper thread to which</span></span><br><span class="line">    <span class="comment">// it is attached.  We take care to ensure that we post message to the looper</span></span><br><span class="line">    <span class="comment">// if appropriate when interacting with the display event receiver.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FrameDisplayEventReceiver mDisplayEventReceiver;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Posts a callback to run on the next frame.</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * The callback runs once then is automatically removed.</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> callbackType The callback type.</span><br><span class="line">     * <span class="doctag">@param</span> action The callback action to run during the next frame.</span><br><span class="line">     * <span class="doctag">@param</span> token The callback token, or null if none.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@see</span> #removeCallbacks</span><br><span class="line">     * <span class="doctag">@hide</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCallback</span><span class="params">(<span class="keyword">int</span> callbackType, Runnable action, Object token)</span> </span>&#123;</span><br><span class="line">        postCallbackDelayed(callbackType, action, token, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Posts a callback to run on the next frame after the specified delay.</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * The callback runs once then is automatically removed.</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> callbackType The callback type.</span><br><span class="line">     * <span class="doctag">@param</span> action The callback action to run during the next frame after the specified delay.</span><br><span class="line">     * <span class="doctag">@param</span> token The callback token, or null if none.</span><br><span class="line">     * <span class="doctag">@param</span> delayMillis The delay time in milliseconds.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@see</span> #removeCallback</span><br><span class="line">     * <span class="doctag">@hide</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postCallbackDelayed</span><span class="params">(<span class="keyword">int</span> callbackType,</span><br><span class="line">            Runnable action, Object token, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"action must not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (callbackType &lt; <span class="number">0</span> || callbackType &gt; CALLBACK_LAST) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"callbackType is invalid"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        postCallbackDelayedInternal(callbackType, action, token, delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postCallbackDelayedInternal</span><span class="params">(<span class="keyword">int</span> callbackType,</span><br><span class="line">            Object action, Object token, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"PostCallback: type="</span> + callbackType</span><br><span class="line">                    + <span class="string">", action="</span> + action + <span class="string">", token="</span> + token</span><br><span class="line">                    + <span class="string">", delayMillis="</span> + delayMillis);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> dueTime = now + delayMillis;</span><br><span class="line">            mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);<span class="comment">//将Runnable封装后放到mCallbackQueues中</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dueTime &lt;= now) &#123;</span><br><span class="line">                scheduleFrameLocked(now);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</span><br><span class="line">                msg.arg1 = callbackType;</span><br><span class="line">                msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">                mHandler.sendMessageAtTime(msg, dueTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleFrameLocked</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">            mFrameScheduled = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (USE_VSYNC) &#123;<span class="comment">//使用SYNC信号形式</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"Scheduling next frame on vsync."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If running on the Looper thread, then schedule the vsync immediately,</span></span><br><span class="line">                <span class="comment">// otherwise post a message to schedule the vsync from the UI thread</span></span><br><span class="line">                <span class="comment">// as soon as possible.</span></span><br><span class="line">                <span class="keyword">if</span> (isRunningOnLooperThreadLocked()) &#123;<span class="comment">//true</span></span><br><span class="line">                    scheduleVsyncLocked();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);</span><br><span class="line">                    msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">                    mHandler.sendMessageAtFrontOfQueue(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> nextFrameTime = Math.max(</span><br><span class="line">                        mLastFrameTimeNanos / TimeUtils.NANOS_PER_MS + sFrameDelay, now);</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"Scheduling next frame in "</span> + (nextFrameTime - now) + <span class="string">" ms."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Message msg = mHandler.obtainMessage(MSG_DO_FRAME);</span><br><span class="line">                msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">                mHandler.sendMessageAtTime(msg, nextFrameTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRunningOnLooperThreadLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Looper.myLooper() == mLooper;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleVsyncLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mDisplayEventReceiver.scheduleVsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终调用 <code>scheduleVsyncLocke()</code> 方法，而这个方法里面是通过 mDisplayEventReceiver 调用 <code>scheduleVsync()</code>，该方法最终执行的是一个 native 方法，当 SYNC 信号返回时候，会回调 <code>DisplayEventReceiver#onVsync(timestampNanos, builtInDisplayId, frame)</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Choreographer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameDisplayEventReceiver</span> <span class="keyword">extends</span> <span class="title">DisplayEventReceiver</span></span><br><span class="line">            <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> mHavePendingVsync;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> mTimestampNanos;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mFrame;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FrameDisplayEventReceiver</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVsync</span><span class="params">(<span class="keyword">long</span> timestampNanos, <span class="keyword">int</span> builtInDisplayId, <span class="keyword">int</span> frame)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Ignore vsync from secondary display.</span></span><br><span class="line">            <span class="comment">// This can be problematic because the call to scheduleVsync() is a one-shot.</span></span><br><span class="line">            <span class="comment">// We need to ensure that we will still receive the vsync from the primary</span></span><br><span class="line">            <span class="comment">// display which is the one we really care about.  Ideally we should schedule</span></span><br><span class="line">            <span class="comment">// vsync for a particular display.</span></span><br><span class="line">            <span class="comment">// At this time Surface Flinger won't send us vsyncs for secondary displays</span></span><br><span class="line">            <span class="comment">// but that could change in the future so let's log a message to help us remember</span></span><br><span class="line">            <span class="comment">// that we need to fix this.</span></span><br><span class="line">            <span class="keyword">if</span> (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"Received vsync from secondary display, but we don't support "</span></span><br><span class="line">                        + <span class="string">"this case yet.  Choreographer needs a way to explicitly request "</span></span><br><span class="line">                        + <span class="string">"vsync for a specific display to ensure it doesn't lose track "</span></span><br><span class="line">                        + <span class="string">"of its scheduled vsync."</span>);</span><br><span class="line">                scheduleVsync();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Post the vsync event to the Handler.</span></span><br><span class="line">            <span class="comment">// The idea is to prevent incoming vsync events from completely starving</span></span><br><span class="line">            <span class="comment">// the message queue.  If there are no messages in the queue with timestamps</span></span><br><span class="line">            <span class="comment">// earlier than the frame time, then the vsync event will be processed immediately.</span></span><br><span class="line">            <span class="comment">// Otherwise, messages that predate the vsync event will be handled first.</span></span><br><span class="line">            <span class="keyword">long</span> now = System.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (timestampNanos &gt; now) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Frame time is "</span> + ((timestampNanos - now) * <span class="number">0.000001f</span>)</span><br><span class="line">                        + <span class="string">" ms in the future!  Check that graphics HAL is generating vsync "</span></span><br><span class="line">                        + <span class="string">"timestamps using the correct timebase."</span>);</span><br><span class="line">                timestampNanos = now;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mHavePendingVsync) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"Already have a pending vsync event.  There should only be "</span></span><br><span class="line">                        + <span class="string">"one at a time."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mHavePendingVsync = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mTimestampNanos = timestampNanos;</span><br><span class="line">            mFrame = frame;</span><br><span class="line">            Message msg = Message.obtain(mHandler, <span class="keyword">this</span>);<span class="comment">//第二个参数是Runnable</span></span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">            mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mHavePendingVsync = <span class="keyword">false</span>;</span><br><span class="line">            doFrame(mTimestampNanos, mFrame);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 Handler 发送一个异步的消息，然后就自己的 <code>run()</code> 方法中，执行 <code>doFrame()</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Choreographer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doFrame</span><span class="params">(<span class="keyword">long</span> frameTimeNanos, <span class="keyword">int</span> frame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> startNanos;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mFrameScheduled) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// no work to do</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_JANK &amp;&amp; mDebugPrintNextFrameTimeDelta) &#123;</span><br><span class="line">                mDebugPrintNextFrameTimeDelta = <span class="keyword">false</span>;</span><br><span class="line">                Log.d(TAG, <span class="string">"Frame time delta: "</span></span><br><span class="line">                        + ((frameTimeNanos - mLastFrameTimeNanos) * <span class="number">0.000001f</span>) + <span class="string">" ms"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> intendedFrameTimeNanos = frameTimeNanos;</span><br><span class="line">            startNanos = System.nanoTime();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> jitterNanos = startNanos - frameTimeNanos;</span><br><span class="line">            <span class="keyword">if</span> (jitterNanos &gt;= mFrameIntervalNanos) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> skippedFrames = jitterNanos / mFrameIntervalNanos;</span><br><span class="line">                <span class="keyword">if</span> (skippedFrames &gt;= SKIPPED_FRAME_WARNING_LIMIT) &#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">"Skipped "</span> + skippedFrames + <span class="string">" frames!  "</span></span><br><span class="line">                            + <span class="string">"The application may be doing too much work on its main thread."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> lastFrameOffset = jitterNanos % mFrameIntervalNanos;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_JANK) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"Missed vsync by "</span> + (jitterNanos * <span class="number">0.000001f</span>) + <span class="string">" ms "</span></span><br><span class="line">                            + <span class="string">"which is more than the frame interval of "</span></span><br><span class="line">                            + (mFrameIntervalNanos * <span class="number">0.000001f</span>) + <span class="string">" ms!  "</span></span><br><span class="line">                            + <span class="string">"Skipping "</span> + skippedFrames + <span class="string">" frames and setting frame "</span></span><br><span class="line">                            + <span class="string">"time to "</span> + (lastFrameOffset * <span class="number">0.000001f</span>) + <span class="string">" ms in the past."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                frameTimeNanos = startNanos - lastFrameOffset;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (frameTimeNanos &lt; mLastFrameTimeNanos) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_JANK) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"Frame time appears to be going backwards.  May be due to a "</span></span><br><span class="line">                            + <span class="string">"previously skipped frame.  Waiting for next vsync."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                scheduleVsyncLocked();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mFrameInfo.setVsync(intendedFrameTimeNanos, frameTimeNanos);</span><br><span class="line">            mFrameScheduled = <span class="keyword">false</span>;</span><br><span class="line">            mLastFrameTimeNanos = frameTimeNanos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"Choreographer#doFrame"</span>);</span><br><span class="line"></span><br><span class="line">            mFrameInfo.markInputHandlingStart();</span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);<span class="comment">//输入</span></span><br><span class="line"></span><br><span class="line">            mFrameInfo.markAnimationsStart();</span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);<span class="comment">//动画</span></span><br><span class="line"></span><br><span class="line">            mFrameInfo.markPerformTraversalsStart();</span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);<span class="comment">//主要关心这个</span></span><br><span class="line"></span><br><span class="line">            doCallbacks(Choreographer.CALLBACK_COMMIT, frameTimeNanos);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> endNanos = System.nanoTime();</span><br><span class="line">            Log.d(TAG, <span class="string">"Frame "</span> + frame + <span class="string">": Finished, took "</span></span><br><span class="line">                    + (endNanos - startNanos) * <span class="number">0.000001f</span> + <span class="string">" ms, latency "</span></span><br><span class="line">                    + (startNanos - frameTimeNanos) * <span class="number">0.000001f</span> + <span class="string">" ms."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doCallbacks</span><span class="params">(<span class="keyword">int</span> callbackType, <span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</span><br><span class="line">        CallbackRecord callbacks;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="comment">// We use "now" to determine when callbacks become due because it's possible</span></span><br><span class="line">            <span class="comment">// for earlier processing phases in a frame to post callbacks that should run</span></span><br><span class="line">            <span class="comment">// in a following phase, such as an input event that causes an animation to start.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = System.nanoTime();</span><br><span class="line">            callbacks = mCallbackQueues[callbackType].extractDueCallbacksLocked(</span><br><span class="line">                    now / TimeUtils.NANOS_PER_MS);<span class="comment">//拿到之前传入的runnable，在该方法中还处理了丢帧的情况</span></span><br><span class="line">            <span class="keyword">if</span> (callbacks == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mCallbacksRunning = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the frame time if necessary when committing the frame.</span></span><br><span class="line">            <span class="comment">// We only update the frame time if we are more than 2 frames late reaching</span></span><br><span class="line">            <span class="comment">// the commit phase.  This ensures that the frame time which is observed by the</span></span><br><span class="line">            <span class="comment">// callbacks will always increase from one frame to the next and never repeat.</span></span><br><span class="line">            <span class="comment">// We never want the next frame's starting frame time to end up being less than</span></span><br><span class="line">            <span class="comment">// or equal to the previous frame's commit frame time.  Keep in mind that the</span></span><br><span class="line">            <span class="comment">// next frame has most likely already been scheduled by now so we play it</span></span><br><span class="line">            <span class="comment">// safe by ensuring the commit time is always at least one frame behind.</span></span><br><span class="line">            <span class="keyword">if</span> (callbackType == Choreographer.CALLBACK_COMMIT) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> jitterNanos = now - frameTimeNanos;</span><br><span class="line">                Trace.traceCounter(Trace.TRACE_TAG_VIEW, <span class="string">"jitterNanos"</span>, (<span class="keyword">int</span>) jitterNanos);</span><br><span class="line">                <span class="keyword">if</span> (jitterNanos &gt;= <span class="number">2</span> * mFrameIntervalNanos) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">long</span> lastFrameOffset = jitterNanos % mFrameIntervalNanos</span><br><span class="line">                            + mFrameIntervalNanos;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_JANK) &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"Commit callback delayed by "</span> + (jitterNanos * <span class="number">0.000001f</span>)</span><br><span class="line">                                + <span class="string">" ms which is more than twice the frame interval of "</span></span><br><span class="line">                                + (mFrameIntervalNanos * <span class="number">0.000001f</span>) + <span class="string">" ms!  "</span></span><br><span class="line">                                + <span class="string">"Setting frame time to "</span> + (lastFrameOffset * <span class="number">0.000001f</span>)</span><br><span class="line">                                + <span class="string">" ms in the past."</span>);</span><br><span class="line">                        mDebugPrintNextFrameTimeDelta = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    frameTimeNanos = now - lastFrameOffset;</span><br><span class="line">                    mLastFrameTimeNanos = frameTimeNanos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, CALLBACK_TRACE_TITLES[callbackType]);</span><br><span class="line">            <span class="keyword">for</span> (CallbackRecord c = callbacks; c != <span class="keyword">null</span>; c = c.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"RunCallback: type="</span> + callbackType</span><br><span class="line">                            + <span class="string">", action="</span> + c.action + <span class="string">", token="</span> + c.token</span><br><span class="line">                            + <span class="string">", latencyMillis="</span> + (SystemClock.uptimeMillis() - c.dueTime));</span><br><span class="line">                &#125;</span><br><span class="line">                c.run(frameTimeNanos);<span class="comment">//执行run方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">                mCallbacksRunning = <span class="keyword">false</span>;</span><br><span class="line">                do &#123;</span><br><span class="line">                    <span class="keyword">final</span> CallbackRecord next = callbacks.next;</span><br><span class="line">                    recycleCallbackLocked(callbacks);<span class="comment">//回收</span></span><br><span class="line">                    callbacks = next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (callbacks != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>c.run(frameTimeNanos)</code> 中执行了之前通过 Choreographer 传送的 Runnable，回到 ViewRootImpl  ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewRootImpl</span> <span class="keyword">implements</span> <span class="title">ViewParent</span>, <span class="title">View</span>.<span class="title">AttachInfo</span>.<span class="title">Callbacks</span>, <span class="title">HardwareRenderer</span>.<span class="title">HardwareDrawCallbacks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TraversalRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            doTraversal();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> TraversalRunnable mTraversalRunnable = <span class="keyword">new</span> TraversalRunnable();</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doTraversal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mTraversalScheduled) &#123;</span><br><span class="line">            mTraversalScheduled = <span class="keyword">false</span>;</span><br><span class="line">            mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);<span class="comment">//取消阻塞</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">                Debug.startMethodTracing(<span class="string">"ViewAncestor"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            performTraversals();<span class="comment">//View的measue，layout，draw的开始的地方</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mProfile) &#123;</span><br><span class="line">                Debug.stopMethodTracing();</span><br><span class="line">                mProfile = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接看 ViewGroup 的 <code>View.draw(Canvas, ViewGroup, long)</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroup</span> <span class="keyword">extends</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">ViewParent</span>, <span class="title">ViewManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> usingRenderNodeProperties = canvas.isRecordingFor(mRenderNode);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childrenCount = mChildrenCount;</span><br><span class="line">        <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">        <span class="keyword">int</span> flags = mGroupFlags;</span><br><span class="line">        <span class="comment">//动画开始</span></span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; FLAG_RUN_ANIMATION) != <span class="number">0</span> &amp;&amp; canAnimate()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> buildCache = !isHardwareAccelerated();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> View child = children[i];</span><br><span class="line">                <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE) &#123;</span><br><span class="line">                    <span class="keyword">final</span> LayoutParams params = child.getLayoutParams();</span><br><span class="line">                    attachLayoutAnimationParameters(child, params, i, childrenCount);</span><br><span class="line">                    bindLayoutAnimation(child);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> LayoutAnimationController controller = mLayoutAnimationController;</span><br><span class="line">            <span class="keyword">if</span> (controller.willOverlap()) &#123;</span><br><span class="line">                mGroupFlags |= FLAG_OPTIMIZE_INVALIDATE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            controller.start();</span><br><span class="line"></span><br><span class="line">            mGroupFlags &amp;= ~FLAG_RUN_ANIMATION;</span><br><span class="line">            mGroupFlags &amp;= ~FLAG_ANIMATION_DONE;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mAnimationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mAnimationListener.onAnimationStart(controller.getAnimation());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> clipSaveCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> clipToPadding = (flags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK;</span><br><span class="line">        <span class="keyword">if</span> (clipToPadding) &#123;</span><br><span class="line">            clipSaveCount = canvas.save();</span><br><span class="line">            canvas.clipRect(mScrollX + mPaddingLeft, mScrollY + mPaddingTop,</span><br><span class="line">                    mScrollX + mRight - mLeft - mPaddingRight,</span><br><span class="line">                    mScrollY + mBottom - mTop - mPaddingBottom);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We will draw our child's animation, let's reset the flag</span></span><br><span class="line">        mPrivateFlags &amp;= ~PFLAG_DRAW_ANIMATION;</span><br><span class="line">        mGroupFlags &amp;= ~FLAG_INVALIDATE_REQUIRED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> more = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> drawingTime = getDrawingTime();<span class="comment">//获得当前的绘画时间  </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usingRenderNodeProperties) canvas.insertReorderBarrier();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> transientCount = mTransientIndices == <span class="keyword">null</span> ? <span class="number">0</span> : mTransientIndices.size();</span><br><span class="line">        <span class="keyword">int</span> transientIndex = transientCount != <span class="number">0</span> ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// Only use the preordered list if not HW accelerated, since the HW pipeline will do the</span></span><br><span class="line">        <span class="comment">// draw reordering internally</span></span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = usingRenderNodeProperties</span><br><span class="line">                ? <span class="keyword">null</span> : buildOrderedChildList();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenCount; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (transientIndex &gt;= <span class="number">0</span> &amp;&amp; mTransientIndices.get(transientIndex) == i) &#123;</span><br><span class="line">                <span class="keyword">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class="line">                <span class="keyword">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class="line">                        transientChild.getAnimation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    more |= drawChild(canvas, transientChild, drawingTime);<span class="comment">//遍历Child，分发draw事件</span></span><br><span class="line">                &#125;</span><br><span class="line">                transientIndex++;</span><br><span class="line">                <span class="keyword">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class="line">                    transientIndex = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> childIndex = customOrder ? getChildDrawingOrder(childrenCount, i) : i;</span><br><span class="line">            <span class="keyword">final</span> View child = (preorderedList == <span class="keyword">null</span>)</span><br><span class="line">                    ? children[childIndex] : preorderedList.get(childIndex);</span><br><span class="line">            <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE || child.getAnimation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                more |= drawChild(canvas, child, drawingTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (transientIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// there may be additional transient views after the normal views</span></span><br><span class="line">            <span class="keyword">final</span> View transientChild = mTransientViews.get(transientIndex);</span><br><span class="line">            <span class="keyword">if</span> ((transientChild.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE ||</span><br><span class="line">                    transientChild.getAnimation() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                more |= drawChild(canvas, transientChild, drawingTime);</span><br><span class="line">            &#125;</span><br><span class="line">            transientIndex++;</span><br><span class="line">            <span class="keyword">if</span> (transientIndex &gt;= transientCount) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) preorderedList.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Draw any disappearing views that have animations</span></span><br><span class="line">        <span class="keyword">if</span> (mDisappearingChildren != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ArrayList&lt;View&gt; disappearingChildren = mDisappearingChildren;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> disappearingCount = disappearingChildren.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// Go backwards -- we may delete as animations finish</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = disappearingCount; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> View child = disappearingChildren.get(i);</span><br><span class="line">                more |= drawChild(canvas, child, drawingTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (usingRenderNodeProperties) canvas.insertInorderBarrier();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debugDraw()) &#123;</span><br><span class="line">            onDebugDraw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clipToPadding) &#123;</span><br><span class="line">            canvas.restoreToCount(clipSaveCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mGroupFlags might have been updated by drawChild()</span></span><br><span class="line">        flags = mGroupFlags;</span><br><span class="line">        <span class="comment">//判断动画是否结束     </span></span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) &#123;</span><br><span class="line">            invalidate(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; FLAG_ANIMATION_DONE) == <span class="number">0</span> &amp;&amp; (flags &amp; FLAG_NOTIFY_ANIMATION_LISTENER) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                mLayoutAnimationController.isDone() &amp;&amp; !more) &#123;</span><br><span class="line">            <span class="comment">// We want to erase the drawing cache and notify the listener after the</span></span><br><span class="line">            <span class="comment">// next frame is drawn because one extra invalidate() is caused by</span></span><br><span class="line">            <span class="comment">// drawChild() after the animation is over</span></span><br><span class="line">            mGroupFlags |= FLAG_NOTIFY_ANIMATION_LISTENER;</span><br><span class="line">            <span class="keyword">final</span> Runnable end = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   notifyAnimationListener();<span class="comment">//通知动画结束监听者  </span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            post(end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyAnimationListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mGroupFlags &amp;= ~FLAG_NOTIFY_ANIMATION_LISTENER;</span><br><span class="line">        mGroupFlags |= FLAG_ANIMATION_DONE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mAnimationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> Runnable end = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   mAnimationListener.onAnimationEnd(mLayoutAnimationController.getAnimation());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">           post(end);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        invalidate(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Draw one child of this View Group. This method is responsible for getting</span><br><span class="line">     * the canvas in the right state. This includes clipping, translating so</span><br><span class="line">     * that the child's scrolled origin is at 0, 0, and applying any animation</span><br><span class="line">     * transformations.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> canvas The canvas on which to draw the child</span><br><span class="line">     * <span class="doctag">@param</span> child Who to draw</span><br><span class="line">     * <span class="doctag">@param</span> drawingTime The time at which draw is occurring</span><br><span class="line">     * <span class="doctag">@return</span> True if an invalidate() was issued</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View child, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> child.draw(canvas, <span class="keyword">this</span>, drawingTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来看 View 的 <code>draw(Canvas canvas, ViewGroup parent, long drawingTime)</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>, <span class="title">AccessibilityEventSource</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * This method is called by ViewGroup.drawChild() to have each child view draw itself.</span><br><span class="line">     *</span><br><span class="line">     * This is where the View specializes rendering behavior based on layer type,</span><br><span class="line">     * and hardware acceleration.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">draw</span><span class="params">(Canvas canvas, ViewGroup parent, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> hardwareAcceleratedCanvas = canvas.isHardwareAccelerated();</span><br><span class="line">        <span class="comment">/* If an attached view draws to a HW canvas, it may use its RenderNode + DisplayList.</span><br><span class="line">         *</span><br><span class="line">         * If a view is dettached, its DisplayList shouldn't exist. If the canvas isn't</span><br><span class="line">         * HW accelerated, it can't handle drawing RenderNodes.</span><br><span class="line">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> drawingWithRenderNode = mAttachInfo != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; mAttachInfo.mHardwareAccelerated</span><br><span class="line">                &amp;&amp; hardwareAcceleratedCanvas;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> more = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> childHasIdentityMatrix = hasIdentityMatrix();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> parentFlags = parent.mGroupFlags;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((parentFlags &amp; ViewGroup.FLAG_CLEAR_TRANSFORMATION) != <span class="number">0</span>) &#123;</span><br><span class="line">            parent.getChildTransformation().clear();</span><br><span class="line">            parent.mGroupFlags &amp;= ~ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Transformation transformToApply = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> concatMatrix = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> scalingRequired = mAttachInfo != <span class="keyword">null</span> &amp;&amp; mAttachInfo.mScalingRequired;</span><br><span class="line">        <span class="keyword">final</span> Animation a = getAnimation();<span class="comment">//得到动画</span></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">            more = applyLegacyAnimation(parent, drawingTime, a, scalingRequired);</span><br><span class="line">            concatMatrix = a.willChangeTransformationMatrix();</span><br><span class="line">            <span class="keyword">if</span> (concatMatrix) &#123;</span><br><span class="line">                mPrivateFlags3 |= PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;</span><br><span class="line">            &#125;</span><br><span class="line">            transformToApply = parent.getChildTransformation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mPrivateFlags3 &amp; PFLAG3_VIEW_IS_ANIMATING_TRANSFORM) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// No longer animating: clear out old animation matrix</span></span><br><span class="line">                mRenderNode.setAnimationMatrix(<span class="keyword">null</span>);</span><br><span class="line">                mPrivateFlags3 &amp;= ~PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!drawingWithRenderNode</span><br><span class="line">                    &amp;&amp; (parentFlags &amp; ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> Transformation t = parent.getChildTransformation();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> hasTransform = parent.getChildStaticTransformation(<span class="keyword">this</span>, t);</span><br><span class="line">                <span class="keyword">if</span> (hasTransform) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> transformType = t.getTransformationType();</span><br><span class="line">                    transformToApply = transformType != Transformation.TYPE_IDENTITY ? t : <span class="keyword">null</span>;</span><br><span class="line">                    concatMatrix = (transformType &amp; Transformation.TYPE_MATRIX) != <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        concatMatrix |= !childHasIdentityMatrix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sets the flag as early as possible to allow draw() implementations</span></span><br><span class="line">        <span class="comment">// to call invalidate() successfully when doing animations</span></span><br><span class="line">        mPrivateFlags |= PFLAG_DRAWN;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!concatMatrix &amp;&amp;</span><br><span class="line">                (parentFlags &amp; (ViewGroup.FLAG_SUPPORT_STATIC_TRANSFORMATIONS |</span><br><span class="line">                        ViewGroup.FLAG_CLIP_CHILDREN)) == ViewGroup.FLAG_CLIP_CHILDREN &amp;&amp;</span><br><span class="line">                canvas.quickReject(mLeft, mTop, mRight, mBottom, Canvas.EdgeType.BW) &amp;&amp;</span><br><span class="line">                (mPrivateFlags &amp; PFLAG_DRAW_ANIMATION) == <span class="number">0</span>) &#123;</span><br><span class="line">            mPrivateFlags2 |= PFLAG2_VIEW_QUICK_REJECTED;</span><br><span class="line">            <span class="keyword">return</span> more;</span><br><span class="line">        &#125;</span><br><span class="line">        mPrivateFlags2 &amp;= ~PFLAG2_VIEW_QUICK_REJECTED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hardwareAcceleratedCanvas) &#123;</span><br><span class="line">            <span class="comment">// Clear INVALIDATED flag to allow invalidation to occur during rendering, but</span></span><br><span class="line">            <span class="comment">// retain the flag's value temporarily in the mRecreateDisplayList flag</span></span><br><span class="line">            mRecreateDisplayList = (mPrivateFlags &amp; PFLAG_INVALIDATED) != <span class="number">0</span>;</span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_INVALIDATED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RenderNode renderNode = <span class="keyword">null</span>;</span><br><span class="line">        Bitmap cache = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> layerType = getLayerType(); <span class="comment">// <span class="doctag">TODO:</span> signify cache state with just 'cache' local</span></span><br><span class="line">        <span class="keyword">if</span> (layerType == LAYER_TYPE_SOFTWARE</span><br><span class="line">                || (!drawingWithRenderNode &amp;&amp; layerType != LAYER_TYPE_NONE)) &#123;</span><br><span class="line">            <span class="comment">// If not drawing with RenderNode, treat HW layers as SW</span></span><br><span class="line">            layerType = LAYER_TYPE_SOFTWARE;</span><br><span class="line">            buildDrawingCache(<span class="keyword">true</span>);</span><br><span class="line">            cache = getDrawingCache(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">            <span class="comment">// Delay getting the display list until animation-driven alpha values are</span></span><br><span class="line">            <span class="comment">// set up and possibly passed on to the view</span></span><br><span class="line">            renderNode = updateDisplayListIfDirty();</span><br><span class="line">            <span class="keyword">if</span> (!renderNode.isValid()) &#123;</span><br><span class="line">                <span class="comment">// Uncommon, but possible. If a view is removed from the hierarchy during the call</span></span><br><span class="line">                <span class="comment">// to getDisplayList(), the display list will be marked invalid and we should not</span></span><br><span class="line">                <span class="comment">// try to use it again.</span></span><br><span class="line">                renderNode = <span class="keyword">null</span>;</span><br><span class="line">                drawingWithRenderNode = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!drawingWithRenderNode) &#123;</span><br><span class="line">            computeScroll();</span><br><span class="line">            sx = mScrollX;</span><br><span class="line">            sy = mScrollY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> drawingWithDrawingCache = cache != <span class="keyword">null</span> &amp;&amp; !drawingWithRenderNode;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> offsetForScroll = cache == <span class="keyword">null</span> &amp;&amp; !drawingWithRenderNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> restoreTo = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!drawingWithRenderNode || transformToApply != <span class="keyword">null</span>) &#123;</span><br><span class="line">            restoreTo = canvas.save();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offsetForScroll) &#123;</span><br><span class="line">            canvas.translate(mLeft - sx, mTop - sy);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!drawingWithRenderNode) &#123;</span><br><span class="line">                canvas.translate(mLeft, mTop);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (scalingRequired) &#123;</span><br><span class="line">                <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> Might not need this if we put everything inside the DL</span></span><br><span class="line">                    restoreTo = canvas.save();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// mAttachInfo cannot be null, otherwise scalingRequired == false</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> scale = <span class="number">1.0f</span> / mAttachInfo.mApplicationScale;</span><br><span class="line">                canvas.scale(scale, scale);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> alpha = drawingWithRenderNode ? <span class="number">1</span> : (getAlpha() * getTransitionAlpha());</span><br><span class="line">        <span class="keyword">if</span> (transformToApply != <span class="keyword">null</span></span><br><span class="line">                || alpha &lt; <span class="number">1</span></span><br><span class="line">                || !hasIdentityMatrix()</span><br><span class="line">                || (mPrivateFlags3 &amp; PFLAG3_VIEW_IS_ANIMATING_ALPHA) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (transformToApply != <span class="keyword">null</span> || !childHasIdentityMatrix) &#123;</span><br><span class="line">                <span class="keyword">int</span> transX = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> transY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (offsetForScroll) &#123;</span><br><span class="line">                    transX = -sx;</span><br><span class="line">                    transY = -sy;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//Animation真正实现效果的地方</span></span><br><span class="line">                <span class="keyword">if</span> (transformToApply != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (concatMatrix) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">                            renderNode.setAnimationMatrix(transformToApply.getMatrix());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// Undo the scroll translation, apply the transformation matrix,</span></span><br><span class="line">                            <span class="comment">// then redo the scroll translate to get the correct result.</span></span><br><span class="line">                            canvas.translate(-transX, -transY);</span><br><span class="line">                            canvas.concat(transformToApply.getMatrix());<span class="comment">//矩阵变换</span></span><br><span class="line">                            canvas.translate(transX, transY);</span><br><span class="line">                        &#125;</span><br><span class="line">                        parent.mGroupFlags |= ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">float</span> transformAlpha = transformToApply.getAlpha();</span><br><span class="line">                    <span class="keyword">if</span> (transformAlpha &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                        alpha *= transformAlpha;</span><br><span class="line">                        parent.mGroupFlags |= ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!childHasIdentityMatrix &amp;&amp; !drawingWithRenderNode) &#123;</span><br><span class="line">                    canvas.translate(-transX, -transY);</span><br><span class="line">                    canvas.concat(getMatrix());</span><br><span class="line">                    canvas.translate(transX, transY);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Deal with alpha if it is or used to be &lt;1</span></span><br><span class="line">            <span class="keyword">if</span> (alpha &lt; <span class="number">1</span> || (mPrivateFlags3 &amp; PFLAG3_VIEW_IS_ANIMATING_ALPHA) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (alpha &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                    mPrivateFlags3 |= PFLAG3_VIEW_IS_ANIMATING_ALPHA;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mPrivateFlags3 &amp;= ~PFLAG3_VIEW_IS_ANIMATING_ALPHA;</span><br><span class="line">                &#125;</span><br><span class="line">                parent.mGroupFlags |= ViewGroup.FLAG_CLEAR_TRANSFORMATION;</span><br><span class="line">                <span class="keyword">if</span> (!drawingWithDrawingCache) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> multipliedAlpha = (<span class="keyword">int</span>) (<span class="number">255</span> * alpha);</span><br><span class="line">                    <span class="keyword">if</span> (!onSetAlpha(multipliedAlpha)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">                            renderNode.setAlpha(alpha * getAlpha() * getTransitionAlpha());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layerType == LAYER_TYPE_NONE) &#123;</span><br><span class="line">                            canvas.saveLayerAlpha(sx, sy, sx + getWidth(), sy + getHeight(),</span><br><span class="line">                                    multipliedAlpha);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Alpha is handled by the child directly, clobber the layer's alpha</span></span><br><span class="line">                        mPrivateFlags |= PFLAG_ALPHA_SET;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) &#123;</span><br><span class="line">            onSetAlpha(<span class="number">255</span>);</span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_ALPHA_SET;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!drawingWithRenderNode) &#123;</span><br><span class="line">            <span class="comment">// apply clips directly, since RenderNode won't do it for this draw</span></span><br><span class="line">            <span class="keyword">if</span> ((parentFlags &amp; ViewGroup.FLAG_CLIP_CHILDREN) != <span class="number">0</span> &amp;&amp; cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (offsetForScroll) &#123;</span><br><span class="line">                    canvas.clipRect(sx, sy, sx + getWidth(), sy + getHeight());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!scalingRequired || cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, cache.getWidth(), cache.getHeight());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mClipBounds != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// clip bounds ignore scroll</span></span><br><span class="line">                canvas.clipRect(mClipBounds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!drawingWithDrawingCache) &#123;</span><br><span class="line">            <span class="keyword">if</span> (drawingWithRenderNode) &#123;</span><br><span class="line">                mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">                ((DisplayListCanvas) canvas).drawRenderNode(renderNode);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Fast path for layouts with no backgrounds</span></span><br><span class="line">                <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) &#123;</span><br><span class="line">                    mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">                    dispatchDraw(canvas);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    draw(canvas);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_DIRTY_MASK;</span><br><span class="line">            <span class="keyword">if</span> (layerType == LAYER_TYPE_NONE) &#123;</span><br><span class="line">                <span class="comment">// no layer paint, use temporary paint to draw bitmap</span></span><br><span class="line">                Paint cachePaint = parent.mCachePaint;</span><br><span class="line">                <span class="keyword">if</span> (cachePaint == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cachePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">                    cachePaint.setDither(<span class="keyword">false</span>);</span><br><span class="line">                    parent.mCachePaint = cachePaint;</span><br><span class="line">                &#125;</span><br><span class="line">                cachePaint.setAlpha((<span class="keyword">int</span>) (alpha * <span class="number">255</span>));</span><br><span class="line">                canvas.drawBitmap(cache, <span class="number">0.0f</span>, <span class="number">0.0f</span>, cachePaint);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// use layer paint to draw the bitmap, merging the two alphas, but also restore</span></span><br><span class="line">                <span class="keyword">int</span> layerPaintAlpha = mLayerPaint.getAlpha();</span><br><span class="line">                mLayerPaint.setAlpha((<span class="keyword">int</span>) (alpha * layerPaintAlpha));</span><br><span class="line">                canvas.drawBitmap(cache, <span class="number">0.0f</span>, <span class="number">0.0f</span>, mLayerPaint);</span><br><span class="line">                mLayerPaint.setAlpha(layerPaintAlpha);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (restoreTo &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            canvas.restoreToCount(restoreTo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span> &amp;&amp; !more) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hardwareAcceleratedCanvas &amp;&amp; !a.getFillAfter()) &#123;</span><br><span class="line">                onSetAlpha(<span class="number">255</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            parent.finishAnimatingView(<span class="keyword">this</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (more &amp;&amp; hardwareAcceleratedCanvas) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.hasAlpha() &amp;&amp; (mPrivateFlags &amp; PFLAG_ALPHA_SET) == PFLAG_ALPHA_SET) &#123;</span><br><span class="line">                <span class="comment">// alpha animations should cause the child to recreate its display list</span></span><br><span class="line">                invalidate(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mRecreateDisplayList = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> more;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Utility function, called by draw(canvas, parent, drawingTime) to handle the less common</span><br><span class="line">     * case of an active Animation being run on the view.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">applyLegacyAnimation</span><span class="params">(ViewGroup parent, <span class="keyword">long</span> drawingTime,</span><br><span class="line">            Animation a, <span class="keyword">boolean</span> scalingRequired)</span> </span>&#123;</span><br><span class="line">        Transformation invalidationTransform;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> flags = parent.mGroupFlags;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> initialized = a.isInitialized();</span><br><span class="line">        <span class="keyword">if</span> (!initialized) &#123;</span><br><span class="line">            a.initialize(mRight - mLeft, mBottom - mTop, parent.getWidth(), parent.getHeight());</span><br><span class="line">            a.initializeInvalidateRegion(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop);</span><br><span class="line">            <span class="keyword">if</span> (mAttachInfo != <span class="keyword">null</span>) a.setListenerHandler(mAttachInfo.mHandler);</span><br><span class="line">            onAnimationStart();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformation t = parent.getChildTransformation();</span><br><span class="line">        <span class="keyword">boolean</span> more = a.getTransformation(drawingTime, t, <span class="number">1f</span>);</span><br><span class="line">        <span class="keyword">if</span> (scalingRequired &amp;&amp; mAttachInfo.mApplicationScale != <span class="number">1f</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent.mInvalidationTransformation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                parent.mInvalidationTransformation = <span class="keyword">new</span> Transformation();</span><br><span class="line">            &#125;</span><br><span class="line">            invalidationTransform = parent.mInvalidationTransformation;</span><br><span class="line">            a.getTransformation(drawingTime, invalidationTransform, <span class="number">1f</span>);<span class="comment">//回调Animation的applyTransformation方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            invalidationTransform = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (more) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a.willChangeBounds()) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((flags &amp; (ViewGroup.FLAG_OPTIMIZE_INVALIDATE | ViewGroup.FLAG_ANIMATION_DONE)) ==</span><br><span class="line">                        ViewGroup.FLAG_OPTIMIZE_INVALIDATE) &#123;</span><br><span class="line">                    parent.mGroupFlags |= ViewGroup.FLAG_INVALIDATE_REQUIRED;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((flags &amp; ViewGroup.FLAG_INVALIDATE_REQUIRED) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// The child need to draw an animation, potentially offscreen, so</span></span><br><span class="line">                    <span class="comment">// make sure we do not cancel invalidate requests</span></span><br><span class="line">                    parent.mPrivateFlags |= PFLAG_DRAW_ANIMATION;</span><br><span class="line">                    parent.invalidate(mLeft, mTop, mRight, mBottom);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent.mInvalidateRegion == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    parent.mInvalidateRegion = <span class="keyword">new</span> RectF();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> RectF region = parent.mInvalidateRegion;</span><br><span class="line">                a.getInvalidateRegion(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop, region,</span><br><span class="line">                        invalidationTransform);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// The child need to draw an animation, potentially offscreen, so</span></span><br><span class="line">                <span class="comment">// make sure we do not cancel invalidate requests</span></span><br><span class="line">                parent.mPrivateFlags |= PFLAG_DRAW_ANIMATION;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> left = mLeft + (<span class="keyword">int</span>) region.left;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> top = mTop + (<span class="keyword">int</span>) region.top;</span><br><span class="line">                parent.invalidate(left, top, left + (<span class="keyword">int</span>) (region.width() + .<span class="number">5f</span>),</span><br><span class="line">                        top + (<span class="keyword">int</span>) (region.height() + .<span class="number">5f</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> more;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><ol>
<li>View#startAnimation 调用 View#invalidate()</li>
<li>View#invalidate() 调用 ViewGroup#invalidateChild()</li>
<li>ViewGroup#invalidateChild() 调用 ViewRootImpl#invalidateChildInParent()</li>
<li>ViewRootImpl#invalidateChildInParent() 调用 ViewRootImpl#scheduleTraversals()</li>
<li>ViewRootImpl#scheduleTraversals() 调用 Choreographer#postCallback(Runnable)</li>
<li>Choreographer 等待 SYNC 信号，调用 Runnable 的 run 方法，执行 ViewRootImpl#performTraversals()</li>
<li>经过一系列传递，来到 View#draw(cavas, viewGroup, drawingTime)</li>
<li>View#draw(cavas, viewGroup, drawingTime) 调用 View#applyLegacyAniamtion()</li>
<li>View#applyLegacyAniamtion() 调用 Animation#getTransFormation()，回调 Animation#applyTransFormation()</li>
<li>View#draw(cavas, viewGroup, drawingTime) 通过 Matrix 实现了动画</li>
<li>View#applyLegacyAniamtion() 返回 true, 继续执行 View#invalidate()，回到了第二步</li>
</ol>
<h2 id="Animator"><a href="#Animator" class="headerlink" title="Animator"></a>Animator</h2><p>从 ObjectAnimator 开始分析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnimator</span> <span class="keyword">extends</span> <span class="title">ValueAnimator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectAnimator <span class="title">ofInt</span><span class="params">(Object target, String propertyName, <span class="keyword">int</span>... values)</span> </span>&#123;</span><br><span class="line">        ObjectAnimator anim = <span class="keyword">new</span> ObjectAnimator(target, propertyName);</span><br><span class="line">        anim.setIntValues(values);</span><br><span class="line">        <span class="keyword">return</span> anim;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ObjectAnimator</span><span class="params">(Object target, String propertyName)</span> </span>&#123;</span><br><span class="line">        setTarget(target);</span><br><span class="line">        setPropertyName(propertyName);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Object&gt; mTarget;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(@Nullable Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object oldTarget = getTarget();</span><br><span class="line">        <span class="keyword">if</span> (oldTarget != target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isStarted()) &#123;</span><br><span class="line">                cancel();</span><br><span class="line">            &#125;</span><br><span class="line">            mTarget = target == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> WeakReference&lt;Object&gt;(target);</span><br><span class="line">            <span class="comment">// New target should cause re-initialization prior to starting</span></span><br><span class="line">            mInitialized = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    PropertyValuesHolder[] mValues;</span><br><span class="line">    HashMap&lt;String, PropertyValuesHolder&gt; mValuesMap;</span><br><span class="line">    <span class="keyword">private</span> String mPropertyName;</span><br><span class="line">    <span class="keyword">boolean</span> mInitialized = <span class="keyword">false</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyName</span><span class="params">(@NonNull String propertyName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// mValues could be null if this is being constructed piecemeal. Just record the</span></span><br><span class="line">        <span class="comment">// propertyName to be used later when setValues() is called if so.</span></span><br><span class="line">        <span class="keyword">if</span> (mValues != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PropertyValuesHolder valuesHolder = mValues[<span class="number">0</span>];</span><br><span class="line">            String oldName = valuesHolder.getPropertyName();</span><br><span class="line">            valuesHolder.setPropertyName(propertyName);</span><br><span class="line">            mValuesMap.remove(oldName);</span><br><span class="line">            mValuesMap.put(propertyName, valuesHolder);</span><br><span class="line">        &#125;</span><br><span class="line">        mPropertyName = propertyName;</span><br><span class="line">        <span class="comment">// New property/values/target should cause re-initialization prior to starting</span></span><br><span class="line">        mInitialized = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntValues</span><span class="params">(<span class="keyword">int</span>... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValues == <span class="keyword">null</span> || mValues.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// No values yet - this animator is being constructed piecemeal. Init the values with</span></span><br><span class="line">            <span class="comment">// whatever the current propertyName is</span></span><br><span class="line">            <span class="keyword">if</span> (mProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">                setValues(PropertyValuesHolder.ofInt(mProperty, values));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setValues(PropertyValuesHolder.ofInt(mPropertyName, values));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.setIntValues(values);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将 target 保存，是要操作的对象，通过 PropertyValuesHolder 和 mPropertyName 存储 propertyName ，是要操作的属性，调用 <code>start()</code> 方法开始动画：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnimator</span> <span class="keyword">extends</span> <span class="title">ValueAnimator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> ThreadLocal&lt;AnimationHandler&gt; sAnimationHandler =</span><br><span class="line">            <span class="keyword">new</span> ThreadLocal&lt;AnimationHandler&gt;();</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// See if any of the current active/pending animators need to be canceled</span></span><br><span class="line">        AnimationHandler handler = sAnimationHandler.get();</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> numAnims = handler.mAnimations.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = numAnims - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (handler.mAnimations.get(i) <span class="keyword">instanceof</span> ObjectAnimator) &#123;</span><br><span class="line">                    ObjectAnimator anim = (ObjectAnimator) handler.mAnimations.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (anim.mAutoCancel &amp;&amp; hasSameTargetAndProperties(anim)) &#123;</span><br><span class="line">                        anim.cancel();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            numAnims = handler.mPendingAnimations.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = numAnims - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (handler.mPendingAnimations.get(i) <span class="keyword">instanceof</span> ObjectAnimator) &#123;</span><br><span class="line">                    ObjectAnimator anim = (ObjectAnimator) handler.mPendingAnimations.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (anim.mAutoCancel &amp;&amp; hasSameTargetAndProperties(anim)) &#123;</span><br><span class="line">                        anim.cancel();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            numAnims = handler.mDelayedAnims.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = numAnims - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (handler.mDelayedAnims.get(i) <span class="keyword">instanceof</span> ObjectAnimator) &#123;</span><br><span class="line">                    ObjectAnimator anim = (ObjectAnimator) handler.mDelayedAnims.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (anim.mAutoCancel &amp;&amp; hasSameTargetAndProperties(anim)) &#123;</span><br><span class="line">                        anim.cancel();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DBG) &#123;</span><br><span class="line">            Log.d(LOG_TAG, <span class="string">"Anim target, duration: "</span> + getTarget() + <span class="string">", "</span> + getDuration());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mValues.length; ++i) &#123;</span><br><span class="line">                PropertyValuesHolder pvh = mValues[i];</span><br><span class="line">                Log.d(LOG_TAG, <span class="string">"   Values["</span> + i + <span class="string">"]: "</span> +</span><br><span class="line">                    pvh.getPropertyName() + <span class="string">", "</span> + pvh.mKeyframes.getValue(<span class="number">0</span>) + <span class="string">", "</span> +</span><br><span class="line">                    pvh.mKeyframes.getValue(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueAnimator</span> <span class="keyword">extends</span> <span class="title">Animator</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">boolean</span> playBackwards)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Looper.myLooper() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(<span class="string">"Animators may only be run on Looper threads"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mReversing = playBackwards;</span><br><span class="line">        mPlayingBackwards = playBackwards;</span><br><span class="line">        <span class="keyword">if</span> (playBackwards &amp;&amp; mSeekFraction != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSeekFraction == <span class="number">0</span> &amp;&amp; mCurrentIteration == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// special case: reversing from seek-to-0 should act as if not seeked at all</span></span><br><span class="line">                mSeekFraction = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mRepeatCount == INFINITE) &#123;</span><br><span class="line">                mSeekFraction = <span class="number">1</span> - (mSeekFraction % <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mSeekFraction = <span class="number">1</span> + mRepeatCount - (mCurrentIteration + mSeekFraction);</span><br><span class="line">            &#125;</span><br><span class="line">            mCurrentIteration = (<span class="keyword">int</span>) mSeekFraction;</span><br><span class="line">            mSeekFraction = mSeekFraction % <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mCurrentIteration &gt; <span class="number">0</span> &amp;&amp; mRepeatMode == REVERSE &amp;&amp;</span><br><span class="line">                (mCurrentIteration &lt; (mRepeatCount + <span class="number">1</span>) || mRepeatCount == INFINITE)) &#123;</span><br><span class="line">            <span class="comment">// if we were seeked to some other iteration in a reversing animator,</span></span><br><span class="line">            <span class="comment">// figure out the correct direction to start playing based on the iteration</span></span><br><span class="line">            <span class="keyword">if</span> (playBackwards) &#123;</span><br><span class="line">                mPlayingBackwards = (mCurrentIteration % <span class="number">2</span>) == <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mPlayingBackwards = (mCurrentIteration % <span class="number">2</span>) != <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prevPlayingState = mPlayingState;</span><br><span class="line">        mPlayingState = STOPPED;</span><br><span class="line">        mStarted = <span class="keyword">true</span>;</span><br><span class="line">        mStartedDelay = <span class="keyword">false</span>;</span><br><span class="line">        mPaused = <span class="keyword">false</span>;</span><br><span class="line">        updateScaledDuration(); <span class="comment">// in case the scale factor has changed since creation time</span></span><br><span class="line">        AnimationHandler animationHandler = getOrCreateAnimationHandler();</span><br><span class="line">        animationHandler.mPendingAnimations.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mStartDelay == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// This sets the initial value of the animation, prior to actually starting it running</span></span><br><span class="line">            <span class="keyword">if</span> (prevPlayingState != SEEKED) &#123;</span><br><span class="line">                setCurrentPlayTime(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mPlayingState = STOPPED;</span><br><span class="line">            mRunning = <span class="keyword">true</span>;</span><br><span class="line">            notifyStartListeners();<span class="comment">//动画开始的回调</span></span><br><span class="line">        &#125;</span><br><span class="line">        animationHandler.start();<span class="comment">//最终调用的是AnimationHandler的start()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimationHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">AnimationHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mChoreographer = Choreographer.getInstance();<span class="comment">//还是Choreographer</span></span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            scheduleAnimation();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!mAnimationScheduled) &#123;</span><br><span class="line">                mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mAnimate, <span class="keyword">null</span>);</span><br><span class="line">                mAnimationScheduled = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// Called by the Choreographer.</span></span><br><span class="line">        <span class="keyword">final</span> Runnable mAnimate = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mAnimationScheduled = <span class="keyword">false</span>;</span><br><span class="line">                doAnimationFrame(mChoreographer.getFrameTime());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">      </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> frameTime)</span> </span>&#123;</span><br><span class="line">            mLastFrameTime = frameTime;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// mPendingAnimations holds any animations that have requested to be started</span></span><br><span class="line">            <span class="comment">// We're going to clear mPendingAnimations, but starting animation may</span></span><br><span class="line">            <span class="comment">// cause more to be added to the pending list (for example, if one animation</span></span><br><span class="line">            <span class="comment">// starting triggers another starting). So we loop until mPendingAnimations</span></span><br><span class="line">            <span class="comment">// is empty.</span></span><br><span class="line">            <span class="keyword">while</span> (mPendingAnimations.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ArrayList&lt;ValueAnimator&gt; pendingCopy =</span><br><span class="line">                        (ArrayList&lt;ValueAnimator&gt;) mPendingAnimations.clone();</span><br><span class="line">                mPendingAnimations.clear();</span><br><span class="line">                <span class="keyword">int</span> count = pendingCopy.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">                    ValueAnimator anim = pendingCopy.get(i);</span><br><span class="line">                    <span class="comment">// If the animation has a startDelay, place it on the delayed list</span></span><br><span class="line">                    <span class="keyword">if</span> (anim.mStartDelay == <span class="number">0</span>) &#123;</span><br><span class="line">                        anim.startAnimation(<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mDelayedAnims.add(anim);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Next, process animations currently sitting on the delayed queue, adding</span></span><br><span class="line">            <span class="comment">// them to the active animations if they are ready</span></span><br><span class="line">            <span class="keyword">int</span> numDelayedAnims = mDelayedAnims.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numDelayedAnims; ++i) &#123;</span><br><span class="line">                ValueAnimator anim = mDelayedAnims.get(i);</span><br><span class="line">                <span class="keyword">if</span> (anim.delayedAnimationFrame(frameTime)) &#123;</span><br><span class="line">                    mReadyAnims.add(anim);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> numReadyAnims = mReadyAnims.size();</span><br><span class="line">            <span class="keyword">if</span> (numReadyAnims &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numReadyAnims; ++i) &#123;</span><br><span class="line">                    ValueAnimator anim = mReadyAnims.get(i);</span><br><span class="line">                    anim.startAnimation(<span class="keyword">this</span>);</span><br><span class="line">                    anim.mRunning = <span class="keyword">true</span>;</span><br><span class="line">                    mDelayedAnims.remove(anim);</span><br><span class="line">                &#125;</span><br><span class="line">                mReadyAnims.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Now process all active animations. The return value from animationFrame()</span></span><br><span class="line">            <span class="comment">// tells the handler whether it should now be ended</span></span><br><span class="line">            <span class="keyword">int</span> numAnims = mAnimations.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numAnims; ++i) &#123;</span><br><span class="line">                mTmpAnimations.add(mAnimations.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numAnims; ++i) &#123;</span><br><span class="line">                ValueAnimator anim = mTmpAnimations.get(i);</span><br><span class="line">                <span class="keyword">if</span> (mAnimations.contains(anim) &amp;&amp; anim.doAnimationFrame(frameTime)) &#123;</span><br><span class="line">                    mEndingAnims.add(anim);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mTmpAnimations.clear();</span><br><span class="line">            <span class="keyword">if</span> (mEndingAnims.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEndingAnims.size(); ++i) &#123;</span><br><span class="line">                    mEndingAnims.get(i).endAnimation(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mEndingAnims.clear();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Schedule final commit for the frame.</span></span><br><span class="line">            mChoreographer.postCallback(Choreographer.CALLBACK_COMMIT, mCommit, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If there are still active or delayed animations, schedule a future call to</span></span><br><span class="line">            <span class="comment">// onAnimate to process the next frame of the animations.</span></span><br><span class="line">            <span class="keyword">if</span> (!mAnimations.isEmpty() || !mDelayedAnims.isEmpty()) &#123;<span class="comment">//动画没有完的话</span></span><br><span class="line">                scheduleAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调用 start() 方法，最终执行的是 <code>AnimationHandler#start()</code> 方法，该方法也是通过 <code>Choreographer.postCallback</code> 去执行，回调 mAnimate 这个 Runnable，执行 <code>doAnimationFrame()</code> 方法，调用ValueAnimator#doAnimationFrame()<code>,如果动画没有结束的话，继续调用</code>scheduleAnimation()` 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueAnimator</span> <span class="keyword">extends</span> <span class="title">Animator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Processes a frame of the animation, adjusting the start time if needed.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> frameTime The frame time.</span><br><span class="line">     * <span class="doctag">@return</span> true if the animation has ended.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">doAnimationFrame</span><span class="params">(<span class="keyword">long</span> frameTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mPlayingState == STOPPED) &#123;</span><br><span class="line">            mPlayingState = RUNNING;</span><br><span class="line">            <span class="keyword">if</span> (mSeekFraction &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mStartTime = frameTime;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> seekTime = (<span class="keyword">long</span>) (mDuration * mSeekFraction);</span><br><span class="line">                mStartTime = frameTime - seekTime;</span><br><span class="line">                mSeekFraction = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mStartTimeCommitted = <span class="keyword">false</span>; <span class="comment">// allow start time to be compensated for jank</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mPaused) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPauseTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                mPauseTime = frameTime;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mResumed) &#123;</span><br><span class="line">            mResumed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (mPauseTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Offset by the duration that the animation was paused</span></span><br><span class="line">                mStartTime += (frameTime - mPauseTime);</span><br><span class="line">                mStartTimeCommitted = <span class="keyword">false</span>; <span class="comment">// allow start time to be compensated for jank</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// The frame time might be before the start time during the first frame of</span></span><br><span class="line">        <span class="comment">// an animation.  The "current time" must always be on or after the start</span></span><br><span class="line">        <span class="comment">// time to avoid animating frames at negative time intervals.  In practice, this</span></span><br><span class="line">        <span class="comment">// is very rare and only happens when seeking backwards.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> currentTime = Math.max(frameTime, mStartTime);</span><br><span class="line">        <span class="keyword">return</span> animationFrame(currentTime);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">animationFrame</span><span class="params">(<span class="keyword">long</span> currentTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">switch</span> (mPlayingState) &#123;</span><br><span class="line">        <span class="keyword">case</span> RUNNING:</span><br><span class="line">        <span class="keyword">case</span> SEEKED:</span><br><span class="line">            <span class="keyword">float</span> fraction = mDuration &gt; <span class="number">0</span> ? (<span class="keyword">float</span>)(currentTime - mStartTime) / mDuration : <span class="number">1f</span>;</span><br><span class="line">            <span class="keyword">if</span> (mDuration == <span class="number">0</span> &amp;&amp; mRepeatCount != INFINITE) &#123;</span><br><span class="line">                <span class="comment">// Skip to the end</span></span><br><span class="line">                mCurrentIteration = mRepeatCount;</span><br><span class="line">                <span class="keyword">if</span> (!mReversing) &#123;</span><br><span class="line">                    mPlayingBackwards = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fraction &gt;= <span class="number">1f</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCurrentIteration &lt; mRepeatCount || mRepeatCount == INFINITE) &#123;</span><br><span class="line">                    <span class="comment">// Time to repeat</span></span><br><span class="line">                    <span class="keyword">if</span> (mListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> numListeners = mListeners.size();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                            mListeners.get(i).onAnimationRepeat(<span class="keyword">this</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (mRepeatMode == REVERSE) &#123;</span><br><span class="line">                        mPlayingBackwards = !mPlayingBackwards;</span><br><span class="line">                    &#125;</span><br><span class="line">                    mCurrentIteration += (<span class="keyword">int</span>) fraction;</span><br><span class="line">                    fraction = fraction % <span class="number">1f</span>;</span><br><span class="line">                    mStartTime += mDuration;</span><br><span class="line">                    <span class="comment">// Note: We do not need to update the value of mStartTimeCommitted here</span></span><br><span class="line">                    <span class="comment">// since we just added a duration offset.</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    done = <span class="keyword">true</span>;</span><br><span class="line">                    fraction = Math.min(fraction, <span class="number">1.0f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mPlayingBackwards) &#123;</span><br><span class="line">                fraction = <span class="number">1f</span> - fraction;</span><br><span class="line">            &#125;</span><br><span class="line">            animateValue(fraction);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> done;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animateValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">        fraction = mInterpolator.getInterpolation(fraction);<span class="comment">//通过插值器拿到数</span></span><br><span class="line">        mCurrentFraction = fraction;</span><br><span class="line">        <span class="keyword">int</span> numValues = mValues.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">            mValues[i].calculateValue(fraction);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mUpdateListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> numListeners = mUpdateListeners.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numListeners; ++i) &#123;</span><br><span class="line">                mUpdateListeners.get(i).onAnimationUpdate(<span class="keyword">this</span>);<span class="comment">//回调动画的listener</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnimator</span> <span class="keyword">extends</span> <span class="title">ValueAnimator</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">animateValue</span><span class="params">(<span class="keyword">float</span> fraction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object target = getTarget();</span><br><span class="line">        <span class="keyword">if</span> (mTarget != <span class="keyword">null</span> &amp;&amp; target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// We lost the target reference, cancel and clean up.</span></span><br><span class="line">            cancel();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.animateValue(fraction);</span><br><span class="line">        <span class="keyword">int</span> numValues = mValues.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numValues; ++i) &#123;</span><br><span class="line">            mValues[i].setAnimatedValue(target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要就是 <code>setAnimatedValue(target)</code> 来执行动画效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyValuesHolder</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntPropertyValuesHolder</span> <span class="keyword">extends</span> <span class="title">PropertyValuesHolder</span> </span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setAnimatedValue</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mIntProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mIntProperty.setValue(target, mIntAnimatedValue);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mProperty.set(target, mIntAnimatedValue);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mJniSetter != <span class="number">0</span>) &#123;</span><br><span class="line">                nCallIntMethod(target, mJniSetter, mIntAnimatedValue);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mSetter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mTmpValueArray[<span class="number">0</span>] = mIntAnimatedValue;</span><br><span class="line">                    mSetter.invoke(target, mTmpValueArray);<span class="comment">//反射改变属性</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                    Log.e(<span class="string">"PropertyValuesHolder"</span>, e.toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    Log.e(<span class="string">"PropertyValuesHolder"</span>, e.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="流程总结-1"><a href="#流程总结-1" class="headerlink" title="流程总结"></a>流程总结</h3><ol>
<li>ObjectAnimator#ofInt() 设置 target，propName 和 value(PropertyValuesHolder)</li>
<li>调用 start() 方法，最终执行的是 AnimationHandler#start()</li>
<li>AnimationHandler#start() 会调用 AnimationHandler#scheduleAnimation()</li>
<li>AnimationHandler#scheduleAnimation() 调用 Choreographer ，执行 Runnable 的 run 方法，调用 AnimationHandler#doAnimationFrame()</li>
<li>AnimationHandler#doAnimationFrame() 调用 ObjectAnimator#doAnimationFrame()</li>
<li>如果动画没有结束，AnimationHandler#doAnimationFrame() 继续调用 AnimationHandler#scheduleAnimation() ，回到第四步</li>
<li>ObjectAnimator#doAnimationFrame() 调用 ObjectAnimator#animationFrame()</li>
<li>ObjectAnimator#animationFrame() 调用 PropertyValuesHolder#setAnimatedValue()</li>
<li>PropertyValuesHolder#setAnimatedValue() 通过反射改变对应 propName 的值</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> 流程 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HashMap源码解析]]></title>
      <url>/2016/12/06/hashmap-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 分析版本： JDK1.8</p>
</blockquote>
<p>在 Java8 之前， HashMap 是链表散列的数据结构，即数组和链表的结合体；从 Java8 开始，引入红黑树的数据结构和扩容的优化。</p>
<a id="more"></a>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>从 Java8 引入红黑树之后， HashMap 是由数组、链表和红黑树组成，发现源码有些地方与之前不同，那就是 <code>Node</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Node ,也就是以前的 <code>Entry</code> ，内容没变，只是换了一种叫法。</p>
<h2 id="put-K-key-V-value"><a href="#put-K-key-V-value" class="headerlink" title="put(K key, V value)"></a>put(K key, V value)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Node&lt;K,V&gt; newNode(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HashMap 使用哈希表来存储。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java 中 HashMap 采用了链地址法。链地址法，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。</p>
<p>当我们往 HashMap 中 put 元素的时候，先根据 key 的 hashCode 重新计算 hash 值，根据 hash 值再通过高位运算和取模运算得到这个元素在数组中的位置（即下标），如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾，如果该链表超出 8 个的话，就转换成红黑树。如果数组该位置上没有元素，就直接将该元素放到此数组中的该位置上。</p>
<h3 id="hash-Object-key"><a href="#hash-Object-key" class="headerlink" title="hash(Object key)"></a>hash(Object key)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)<span class="comment">//取模运算</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);<span class="comment">//取hashCode值和高位参与运算</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定位位置的方法通过以上三个步骤得到，取 key 的 hashCode 的值，然后进行无符号右移 16 位，再与现有哈希桶数组的大小取模。通过 <code>(n - 1) &amp; hash</code> 来得到该对象的保存位求得这个位置的时候，马上就可以知道对应位置的元素，不用遍历链表，大大优化了查询的效率。</p>
<p><em>当 length 总是 2 的 n 次方时，(length - 1) &amp; hash 运算等价于对 length 取模，也就是h % length，但是 &amp; 比 % 具有更高的效率。</em></p>
<p>注意，在 Java8 之前的算法是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;  </span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);  </span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> hash, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> hash &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java8 优化了高位运算的算法，通过 hashCode() 的高 16 位异或低 16 位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组 table 的 length 比较小的时候，也能保证考虑到高低 Bit 都参与到 Hash 的计算中，同时不会有太大的开销。</p>
<p><img src="http://yydcdut.github.io/img/hashmap-analyse.png" alt="indexFor()"></p>
<h3 id="putVal-int-hash-K-key-V-value-boolean-onlyIfAbsent-boolean-evict"><a href="#putVal-int-hash-K-key-V-value-boolean-onlyIfAbsent-boolean-evict" class="headerlink" title="putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)"></a>putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)<span class="comment">//如果为null或者大小为0则创建</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)<span class="comment">//计算index</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))<span class="comment">//如果有key，那么直接覆盖value</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//是否是红黑树</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;<span class="comment">//为链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);<span class="comment">//链表长度大于8转换为红黑树进行处理</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;<span class="comment">//key已经存在直接覆盖value</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();<span class="comment">//扩容</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>当 table 数组为 null 或者大小为 0 的时候进行扩容。</li>
<li>第二步，计算出该 key 的索引 index 。</li>
<li>找到 table 数组中该位置，判断该位置上是否有值：<ol>
<li>如果有，判断 key 的 hashCode() 和 equals() 是否相等，相等的话覆盖，不相等的话再判断是否是红黑树还是链表。</li>
<li>如果没有，判断是不是红黑树：<ol>
<li>是，就插入到红黑树中；</li>
<li>不是话，遍历链表，如果大小大于8，转换成红黑树，插入到红黑树中，不大于8的话就插入到链表，如果在遍历的是否发现hashCode() 和 equals() 相等。</li>
</ol>
</li>
</ol>
</li>
<li>插入成功后，判断 table 数组大小是否超过了最大容量，是的话扩容</li>
</ol>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize()"></a>resize()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;<span class="comment">//旧的数组</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;<span class="comment">//旧的数组大小</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;<span class="comment">//旧的最大容量</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//扩容前的旧的数组大小如果已经达到最大(2^30)</span></span><br><span class="line">                threshold = Integer.MAX_VALUE;<span class="comment">////修改最大容量为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<span class="comment">//扩容后的小于数组大小最大值</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold 在旧值上乘以2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;<span class="comment">//旧的最大容量就是新的数组容量</span></span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//16</span></span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<span class="comment">//0.75*16</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;<span class="comment">//计算新的最容量</span></span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="annotation">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;<span class="comment">//新的table数组</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;<span class="comment">//将旧的移动到新的里面去</span></span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)<span class="comment">//没有重合的，就只有这一个值</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;<span class="comment">//给e找位置</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)<span class="comment">//如果是红黑树</span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order 处理链表</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        do &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;<span class="comment">//原来的索引</span></span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;<span class="comment">//原来的索引+oldCap</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;<span class="comment">//原索引放到新table数组里</span></span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;<span class="comment">//原索引+oldCap放到新table数组里</span></span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DexKnifePlugin源码解析]]></title>
      <url>/2016/09/25/dexknifeplugin-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/ceabie/DexKnifePlugin" target="_blank" rel="external">DexKnifePlugin</a>      分析版本：<a href="https://github.com/ceabie/DexKnifePlugin/tree/9d33ba952d295ae3e4d23b1c905d17f74031d1e0" target="_blank" rel="external">9d33ba9</a></p>
</blockquote>
<p>DexKnifePlugin 是一个简单的将指定使用通配符包名分包到第二个dex中gradle插件。</p>
<a id="more"></a>
<h2 id="DexKnifePlugin"><a href="#DexKnifePlugin" class="headerlink" title="DexKnifePlugin"></a>DexKnifePlugin</h2><p>一个简单的将指定使用通配符包名分包到第二个dex中gradle插件。</p>
<p>同时支持 android gradle plugin 2.2.0 multidex.</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li><p>在 project 的 <code>build.gradle</code> 添加依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        ....</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.0-beta2'</span>  <span class="comment">// or other</span></span><br><span class="line">        classpath <span class="string">'com.ceabie.dextools:gradle-dexknife-plugin:1.5.6'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意，请确保使用的gradle版本和android gradle plugin兼容，否则会出现同步错误，例如：Gradle sync failed: Unable to load class ‘com.android.builder.core.EvaluationErrorReporter’.</strong></p>
</li>
<li><p>在 app module 下创建 <code>dexknife.txt</code>，并填写要放到第二个 dex 中的包名路径的通配符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Patterns may include:&#10;&#10;&#39;*&#39; to match any number of characters&#10;&#39;?&#39; to match any single character&#10;&#39;**&#39; to match any number of directories or files&#10;Either &#39;.&#39; or &#39;/&#39; may be used in a pattern to separate directories.&#10;Patterns ending with &#39;.&#39; or &#39;/&#39; will have &#39;**&#39; automatically appended.</span><br></pre></td></tr></table></figure>
<p>更多参见: <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/util/PatternFilterable.html" target="_blank" rel="external">https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/util/PatternFilterable.html</a> </p>
<p><strong>注意: 如果你要过滤内部类, 使用 $* ，例如:  SomeClass$*.class </strong></p>
<p>其他配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#20351;&#29992; # &#36827;&#34892;&#27880;&#37322;, &#24403;&#34892;&#36215;&#22987;&#21152;&#19978; #, &#36825;&#34892;&#37197;&#32622;&#34987;&#31105;&#29992;.&#10;&#10;# &#20840;&#23616;&#36807;&#28388;, &#22914;&#26524;&#27809;&#35774;&#32622; -filter-suggest &#24182;&#19981;&#20250;&#24212;&#29992;&#21040; &#24314;&#35758;&#30340;maindexlist.&#10;# &#22914;&#26524;&#20320;&#24819;&#35201;&#26576;&#20010;&#21253;&#36335;&#24452;&#22312;maindex&#20013;&#65292;&#21017;&#20351;&#29992; -keep &#36873;&#39033;&#65292;&#21363;&#20351;&#20182;&#24050;&#32463;&#22312;&#20998;&#21253;&#30340;&#36335;&#24452;&#20013;.&#10;-keep android.support.v4.view.**&#10;&#10;# &#36825;&#26465;&#37197;&#32622;&#21487;&#20197;&#25351;&#23450;&#36825;&#20010;&#21253;&#19979;&#31867;&#22312;&#31532;&#20108;dex&#20013;.&#10;android.support.v?.**&#10;&#10;# &#20351;&#29992;.class&#21518;&#32512;&#65292;&#20195;&#34920;&#21333;&#20010;&#31867;.&#10;-keep android.support.v7.app.AppCompatDialogFragment.class&#10;&#10;# &#19981;&#21253;&#21547;Android gradle &#25554;&#20214;&#33258;&#21160;&#29983;&#25104;&#30340;miandex&#21015;&#34920;.&#10;-donot-use-suggest&#10;&#10;# &#23558; &#20840;&#23616;&#36807;&#28388;&#37197;&#32622;&#24212;&#29992;&#21040; &#24314;&#35758;&#30340;maindexlist&#20013;, &#20294; -donot-use-suggest &#35201;&#20851;&#38381;.&#10;-filter-suggest&#10;&#10;# &#19981;&#36827;&#34892;dex&#20998;&#21253;&#65292; &#30452;&#21040; dex &#30340;id&#25968;&#37327;&#36229;&#36807; 65536.&#10;-auto-maindex&#10;&#10;# dex &#25193;&#23637;&#21442;&#25968;, &#20363;&#22914; --set-max-idx-number=50000&#10;# &#22914;&#26524;&#20986;&#29616; DexException: Too many classes in --main-dex-list, main dex capacity exceeded&#65292;&#21017;&#38656;&#35201;&#35843;&#22823;&#25968;&#20540;&#10;-dex-param --set-max-idx-number=50000&#10;&#10;# &#26174;&#31034;miandex&#30340;&#26085;&#24535;.&#10;-log-mainlist&#10;&#10;# &#22914;&#26524;&#20320;&#21482;&#24819;&#36807;&#28388; &#24314;&#35758;&#30340;maindexlist, &#20351;&#29992; -suggest-split &#21644; -suggest-keep.&#10;# &#22914;&#26524;&#21516;&#26102;&#21551;&#29992; -filter-suggest, &#20840;&#23616;&#36807;&#28388;&#20250;&#21512;&#24182;&#21040;&#23427;&#20204;&#20013;.&#10;-suggest-split **.MainActivity2.class&#10;-suggest-keep android.support.multidex.**</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 app module 的 <code>build.grade</code> 增加：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.ceabie.dexnkife'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后，在 app module 中设置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiDexEnabled <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：要在 defaultConfig 或者 buildTypes中打开 multiDexEnabled true，否则不起作用。</strong></p>
</li>
</ol>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>因为 DexKnifePlugin 这个工程是一个 gradle 的插件，所以在看源码之前得对 gradle 有一些了解。</p>
<h3 id="DexKnifePlugin-1"><a href="#DexKnifePlugin-1" class="headerlink" title="DexKnifePlugin"></a>DexKnifePlugin</h3><p>直接看 <code>DexKnifePlugin.groovy</code> 这个文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexKnifePlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就是该插件， <code>apply</code> 便是该插件的入口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexKnifePlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//gradle配置阶段完成后调用</span></span><br><span class="line">        project.afterEvaluate &#123;</span><br><span class="line">            <span class="keyword">for</span> (variant in project.android.applicationVariants) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isMultiDexEnabled(variant)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (SplitToolsFor130.isCompat(variant)) &#123;<span class="comment">//1.3.0版本</span></span><br><span class="line">                        System.err.println(<span class="string">"DexKnife: Compat 1.3.0."</span>);</span><br><span class="line">                        SplitToolsFor130.processSplitDex(project, variant)</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SplitToolsFor150.isCompat()) &#123;<span class="comment">//1.5.0及之后的版本</span></span><br><span class="line">                        SplitToolsFor150.processSplitDex(project, variant)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.err.println(<span class="string">"DexKnife Error: DexKnife is not compatible your Android gradle plugin."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.err.println(<span class="string">"DexKnife : MultiDexEnabled is false, it's not work."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否开启的分包</span><br><span class="line">     * <span class="doctag">@param</span> variant</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMultiDexEnabled</span><span class="params">(variant)</span> </span>&#123;</span><br><span class="line">        def is = variant.buildType.<span class="function">multiDexEnabled</span><br><span class="line">        <span class="title">if</span> <span class="params">(is != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> is;</span><br><span class="line">        &#125;</span><br><span class="line">        is = variant.mergedFlavor.<span class="function">multiDexEnabled</span><br><span class="line">        <span class="title">if</span> <span class="params">(is != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> is;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 gradle 配置阶段完成之后，去判断当前 gradle 插件版本，然后分配去做操作。</p>
<p>我们先来看 1.3.0 的吧</p>
<h3 id="SplitToolsFor130"><a href="#SplitToolsFor130" class="headerlink" title="SplitToolsFor130"></a>SplitToolsFor130</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitToolsFor130</span> <span class="keyword">extends</span> <span class="title">DexSplitTools</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="typename">boolean</span> isCompat(Object variant) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (variant != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//看看是不是有这个dex的task</span></span><br><span class="line">                variant.dex</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"><span class="comment">//            e.printStackTrace()</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="typename">void</span> processSplitDex(Project project, Object variant) &#123;</span><br><span class="line">        <span class="keyword">def</span> dex = variant.dex</span><br><span class="line">        <span class="keyword">if</span> (dex.multiDexEnabled) &#123;<span class="comment">//是否开启的分包</span></span><br><span class="line">            dex.inputs.file DEX_KNIFE_CFG_TXT</span><br><span class="line">            dex.doFirst &#123;</span><br><span class="line">                <span class="comment">//log,记录当前时间</span></span><br><span class="line">                startDexKnife()</span><br><span class="line">                <span class="comment">//通过解析dexknife.txt得到配置</span></span><br><span class="line">                DexKnifeConfig dexKnifeConfig = getDexKnifeConfig(project)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">def</span> scope = variant.getVariantData().getScope()</span><br><span class="line">                File mergedJar = scope.jarMergingOutputFile<span class="comment">//allclasses.jar</span></span><br><span class="line">                File mappingFile = variant.mappingFile<span class="comment">//mapping.txt</span></span><br><span class="line">                File andMainDexList = scope.mainDexListFile<span class="comment">//maindexlist.txt</span></span><br><span class="line">                <span class="typename">boolean</span> minifyEnabled = variant.buildType.minifyEnabled<span class="comment">//build.gradle中的『buildTypes』中的『release』或者『debug』中的minifyEnabled,debug和release的时候默认为false</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (processMainDexList(project, minifyEnabled, mappingFile, mergedJar, andMainDexList, dexKnifeConfig)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dex.additionalParameters == <span class="literal">null</span>) &#123;</span><br><span class="line">                        dex.additionalParameters = []</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    dex.additionalParameters += <span class="string">'--main-dex-list=maindexlist.txt'</span></span><br><span class="line">                    dex.additionalParameters += dexKnifeConfig.additionalParameters<span class="comment">//其他通过dexknife.txt设置的dx参数</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//log,打印花费时间</span></span><br><span class="line">                endDexKnife()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先找到 <code>dex</code> 这个 task ，然后主要的过程还是在 <code>processMainDexList</code> 中，进行完这个操作之后设置 <code>additionalParameters</code> 参数, <code>processMainDexList</code> 方法在父类 <code>DexSplitTools</code> 中：</p>
<h3 id="DexSplitTools"><a href="#DexSplitTools" class="headerlink" title="DexSplitTools"></a>DexSplitTools</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexSplitTools</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_TXT = <span class="string">"dexknife.txt"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_MINIMAL_MAIN_DEX = <span class="string">"--minimal-main-dex"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_DEX_PARAM = <span class="string">"-dex-param"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_SPLIT = <span class="string">"-split"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_KEEP = <span class="string">"-keep"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_AUTO_MAINDEX = <span class="string">"-auto-maindex"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_DONOT_USE_SUGGEST = <span class="string">"-donot-use-suggest"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_LOG_MAIN_DEX = <span class="string">"-log-mainlist"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_FILTER_SUGGEST = <span class="string">"-filter-suggest"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_SUGGEST_SPLIT = <span class="string">"-suggest-split"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_SUGGEST_KEEP = <span class="string">"-suggest-keep"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_KNIFE_CFG_LOG_FILTER_SUGGEST = <span class="string">"-log-filter-suggest"</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span><br><span class="line">     * get the config of dex knife</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> DexKnifeConfig <span class="title">getDexKnifeConfig</span><span class="params">(Project project)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//读文件</span></span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(project.file(DEX_KNIFE_CFG_TXT)));</span><br><span class="line">        <span class="comment">//申明变量,该变量存储文件中的信息</span></span><br><span class="line">        DexKnifeConfig dexKnifeConfig = <span class="keyword">new</span> DexKnifeConfig();</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">boolean</span> matchCmd;</span><br><span class="line">        <span class="keyword">boolean</span> minimalMainDex = <span class="keyword">true</span>;</span><br><span class="line">        Set&lt;String&gt; addParams = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; splitToSecond = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; keepMain = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; splitSuggest = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; keepSuggest = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            line = line.trim();</span><br><span class="line">            <span class="keyword">if</span> (line.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> rem = line.indexOf(<span class="string">'#'</span>);<span class="comment">//查找注释的地方</span></span><br><span class="line">            <span class="keyword">if</span> (rem != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rem == <span class="number">0</span>) &#123;<span class="comment">//该段落为注释</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    line = line.substring(<span class="number">0</span>, rem).trim();<span class="comment">//获取出内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String cmd = line.toLowerCase();</span><br><span class="line">            matchCmd = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (DEX_KNIFE_CFG_AUTO_MAINDEX.equals(cmd)) &#123;<span class="comment">//-auto-maindex(不进行dex分包， 直到 dex 的id数量超过 65536.)</span></span><br><span class="line">                minimalMainDex = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matchCommand(cmd, DEX_KNIFE_CFG_DEX_PARAM)) &#123;<span class="comment">//-dex-param(dex 扩展参数, 例如 --set-max-idx-number=50000)</span></span><br><span class="line">                String param = line.substring(DEX_KNIFE_CFG_DEX_PARAM.length()).trim();</span><br><span class="line">                <span class="keyword">if</span> (!param.toLowerCase().startsWith(<span class="string">"--main-dex-list"</span>)) &#123;</span><br><span class="line">                    addParams.add(param);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matchCommand(cmd, DEX_KNIFE_CFG_SPLIT)) &#123;<span class="comment">//-split</span></span><br><span class="line">                String sPattern = line.substring(DEX_KNIFE_CFG_SPLIT.length()).trim();</span><br><span class="line">                addClassFilePath(sPattern, splitToSecond);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matchCommand(cmd, DEX_KNIFE_CFG_KEEP)) &#123;<span class="comment">//-keep</span></span><br><span class="line">                String sPattern = line.substring(DEX_KNIFE_CFG_KEEP.length()).trim();</span><br><span class="line">                addClassFilePath(sPattern, keepMain);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEX_KNIFE_CFG_DONOT_USE_SUGGEST.equals(cmd)) &#123;<span class="comment">//-donot-use-suggest(不包含Android gradle 插件自动生成的miandex列表)</span></span><br><span class="line">                dexKnifeConfig.useSuggest = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEX_KNIFE_CFG_FILTER_SUGGEST.equals(cmd)) &#123;<span class="comment">//-filter-suggest(将 全局过滤配置应用到 建议的maindexlist中, 但 -donot-use-suggest 要关闭)</span></span><br><span class="line">                dexKnifeConfig.filterSuggest = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEX_KNIFE_CFG_LOG_MAIN_DEX.equals(cmd)) &#123;<span class="comment">//-log-mainlist(显示miandex的日志)</span></span><br><span class="line">                dexKnifeConfig.logMainList = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEX_KNIFE_CFG_LOG_FILTER_SUGGEST.equals(cmd)) &#123;<span class="comment">//-log-filter-suggest(显示过滤的日志)</span></span><br><span class="line">                dexKnifeConfig.logFilterSuggest = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matchCommand(cmd, DEX_KNIFE_CFG_SUGGEST_SPLIT)) &#123;<span class="comment">//-suggest-split(要在主dex排除掉的类)</span></span><br><span class="line">                String sPattern = line.substring(DEX_KNIFE_CFG_SUGGEST_SPLIT.length()).trim();</span><br><span class="line">                addClassFilePath(sPattern, splitSuggest);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matchCommand(cmd, DEX_KNIFE_CFG_SUGGEST_KEEP)) &#123;<span class="comment">//-suggest-keep(要在主dex保留的类)</span></span><br><span class="line">                String sPattern = line.substring(DEX_KNIFE_CFG_SUGGEST_KEEP.length()).trim();</span><br><span class="line">                addClassFilePath(sPattern, keepSuggest);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cmd.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                addClassFilePath(line, splitToSecond);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                matchCmd = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (matchCmd) &#123;</span><br><span class="line">                System.out.println(<span class="string">"DexKnife Config: "</span> + line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minimalMainDex) &#123;<span class="comment">//添加--minimal-main-dex参数</span></span><br><span class="line">            addParams.add(DEX_MINIMAL_MAIN_DEX);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dexKnifeConfig.useSuggest) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dexKnifeConfig.filterSuggest) &#123;</span><br><span class="line">                splitSuggest.addAll(splitToSecond);</span><br><span class="line">                keepSuggest.addAll(keepMain);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            for (String s : splitSuggest) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println("Suggest: " + s);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!splitSuggest.isEmpty() || !keepSuggest.isEmpty()) &#123;</span><br><span class="line">                dexKnifeConfig.suggestPatternSet = <span class="keyword">new</span> PatternSet()</span><br><span class="line">                        .exclude(splitSuggest)</span><br><span class="line">                        .include(keepSuggest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!splitToSecond.isEmpty() || !keepMain.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//            for (String s : splitToSecond) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(s);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            dexKnifeConfig.patternSet = <span class="keyword">new</span> PatternSet()</span><br><span class="line">                    .exclude(splitToSecond)</span><br><span class="line">                    .include(keepMain);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dexKnifeConfig.useSuggest = <span class="keyword">true</span>;</span><br><span class="line">            System.err.println(<span class="string">"DexKnife Warning: NO SET split Or keep path, it will use Suggest!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dexKnifeConfig.additionalParameters = addParams;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dexKnifeConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matchCommand</span><span class="params">(String text, String cmd)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">"^"</span> + cmd + <span class="string">"\\s+"</span>);</span><br><span class="line">        <span class="keyword">return</span> pattern.matcher(text).find();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * add the class path to pattern list, and the single class pattern can work.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addClassFilePath</span><span class="params">(String classPath, Set&lt;String&gt; patternList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (classPath != <span class="keyword">null</span> &amp;&amp; classPath.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (classPath.endsWith(CLASS_SUFFIX)) &#123;<span class="comment">//以.class结尾</span></span><br><span class="line">                classPath = classPath.substring(<span class="number">0</span>, classPath.length() - CLASS_SUFFIX.length()).replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + CLASS_SUFFIX;<span class="comment">//转化成路径形式</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                classPath = classPath.replace(<span class="string">'.'</span>, <span class="string">'/'</span>);<span class="comment">//转化成路径形式</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加到patternList中</span></span><br><span class="line">            patternList.add(classPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">processMainDexList</span><span class="params">(Project project, <span class="keyword">boolean</span> minifyEnabled, File mappingFile,</span><br><span class="line">                                             File jarMergingOutputFile, File andMainDexList,</span><br><span class="line">                                             DexKnifeConfig dexKnifeConfig)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//当minifyEnabled为false的时候,那么jarMergingOutputFile必定存在</span></span><br><span class="line">        <span class="comment">//当minifyEnabled为true的时候,那么jarMergingOutputFile可能不存在,因为此时可能打的release包,就不是allclass.jar了</span></span><br><span class="line">        <span class="keyword">if</span> (!minifyEnabled &amp;&amp; jarMergingOutputFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"DexKnife Error: jarMerging is Null! Skip DexKnife. Please report All Gradle Log."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> genMainDexList(project, minifyEnabled, mappingFile, jarMergingOutputFile, andMainDexList, dexKnifeConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">genMainDexList</span><span class="params">(Project project, <span class="keyword">boolean</span> minifyEnabled,</span><br><span class="line">                                          File mappingFile, File jarMergingOutputFile,</span><br><span class="line">                                          File andMainDexList, DexKnifeConfig dexKnifeConfig)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">":"</span> + project.getName() + <span class="string">":genMainDexList"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the adt's maindexlist</span></span><br><span class="line">        HashSet&lt;String&gt; mainCls = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (dexKnifeConfig.useSuggest) &#123;<span class="comment">//使用gradle生成的maindexlist</span></span><br><span class="line">            PatternSet patternSet = dexKnifeConfig.suggestPatternSet;<span class="comment">//-suggest-split和-suggest-keep</span></span><br><span class="line">            <span class="keyword">if</span> (dexKnifeConfig.filterSuggest &amp;&amp; patternSet == <span class="keyword">null</span>) &#123;</span><br><span class="line">                patternSet = dexKnifeConfig.patternSet;<span class="comment">//-split和-keep</span></span><br><span class="line">            &#125;</span><br><span class="line">            mainCls = getAdtMainDexClasses(andMainDexList, patternSet, dexKnifeConfig.logFilterSuggest);</span><br><span class="line">            System.out.println(<span class="string">"DexKnife: use suggest"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File keepFile = project.file(MAINDEXLIST_TXT);</span><br><span class="line">        keepFile.delete();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; mainClasses = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (minifyEnabled) &#123;</span><br><span class="line">            System.err.println(<span class="string">"DexKnife: From Mapping"</span>);</span><br><span class="line">            <span class="comment">// get classes from mapping</span></span><br><span class="line">            mainClasses = getMainClassesFromMapping(mappingFile, dexKnifeConfig.patternSet, mainCls);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"DexKnife: From MergedJar: "</span> + jarMergingOutputFile);</span><br><span class="line">            <span class="keyword">if</span> (jarMergingOutputFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// get classes from merged jar</span></span><br><span class="line">                mainClasses = getMainClassesFromJar(jarMergingOutputFile, dexKnifeConfig.patternSet, mainCls);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">"DexKnife: The Merged Jar is not exist! Can't be processed!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mainClasses != <span class="keyword">null</span> &amp;&amp; mainClasses.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(keepFile));<span class="comment">//写到app module的maindexlist.txt中</span></span><br><span class="line">            <span class="keyword">for</span> (String mainClass : mainClasses) &#123;</span><br><span class="line">                writer.write(mainClass);</span><br><span class="line">                writer.newLine();</span><br><span class="line">                <span class="keyword">if</span> (dexKnifeConfig.logMainList) &#123;</span><br><span class="line">                    System.out.println(mainClass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            writer.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"DexKnife Warning: Main dex is EMPTY ! Check your config and project!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HashSet&lt;String&gt; <span class="title">getAdtMainDexClasses</span><span class="params">(File outputDir, PatternSet mainDexPattern, <span class="keyword">boolean</span> logFilter)</span></span><br><span class="line">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (outputDir == <span class="keyword">null</span> || !outputDir.exists()) &#123;</span><br><span class="line">            System.err.println(<span class="string">"DexKnife Warning: Android recommand Main dex is no exist, try run again!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;String&gt; mainCls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(outputDir));</span><br><span class="line"></span><br><span class="line">        ClassFileTreeElement treeElement = <span class="keyword">new</span> ClassFileTreeElement();</span><br><span class="line">        <span class="comment">//将mainDexPattern转成Spec&lt;FileTreeElement&gt;格式</span></span><br><span class="line">        Spec&lt;FileTreeElement&gt; asSpec = mainDexPattern != <span class="keyword">null</span> ? getMaindexSpec(mainDexPattern) : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String line, clsPath;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            line = line.trim();</span><br><span class="line">            <span class="keyword">int</span> clsPos = line.lastIndexOf(CLASS_SUFFIX);</span><br><span class="line">            <span class="keyword">if</span> (clsPos != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (asSpec != <span class="keyword">null</span>) &#123;<span class="comment">//设置了过滤的情况</span></span><br><span class="line">                    clsPath = line.substring(<span class="number">0</span>, clsPos).replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + CLASS_SUFFIX;<span class="comment">//转路径</span></span><br><span class="line">                    treeElement.setClassPath(clsPath);<span class="comment">//设置路径</span></span><br><span class="line">                    <span class="keyword">boolean</span> satisfiedBy = asSpec.isSatisfiedBy(treeElement);</span><br><span class="line">                    <span class="keyword">if</span> (!satisfiedBy) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (logFilter) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"DexKnife-Suggest: [Split] "</span> + clsPath);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (logFilter) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"DexKnife-Suggest: [Keep]  "</span> + clsPath);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//满足的加到mainCls中</span></span><br><span class="line">                mainCls.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">if</span> (mainCls.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            mainCls = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mainCls;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Spec&lt;FileTreeElement&gt; <span class="title">getMaindexSpec</span><span class="params">(PatternSet patternSet)</span> </span>&#123;</span><br><span class="line">        Spec&lt;FileTreeElement&gt; maindexSpec = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (patternSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Spec&lt;FileTreeElement&gt; includeSpec = <span class="keyword">null</span>;</span><br><span class="line">            Spec&lt;FileTreeElement&gt; excludeSpec = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!patternSet.getIncludes().isEmpty()) &#123;</span><br><span class="line">                includeSpec = patternSet.getAsIncludeSpec();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!patternSet.getExcludes().isEmpty()) &#123;</span><br><span class="line">                excludeSpec = patternSet.getAsExcludeSpec();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (includeSpec != <span class="keyword">null</span> &amp;&amp; excludeSpec != <span class="keyword">null</span>) &#123;</span><br><span class="line">                maindexSpec = Specs.or(includeSpec, Specs.not(excludeSpec));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maindexSpec = excludeSpec != <span class="keyword">null</span> ? Specs.not(excludeSpec) : includeSpec;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maindexSpec == <span class="keyword">null</span>) &#123;</span><br><span class="line">            maindexSpec = Specs.satisfyNone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maindexSpec;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Gets main classes from mapping.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> mapping        the mapping file</span><br><span class="line">     * <span class="doctag">@param</span> mainDexPattern the main dex pattern</span><br><span class="line">     * <span class="doctag">@param</span> mainCls        the main cls</span><br><span class="line">     * <span class="doctag">@return</span> the main classes from mapping</span><br><span class="line">     * <span class="doctag">@throws</span> Exception the exception</span><br><span class="line">     * <span class="doctag">@author</span> ceabie</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">getMainClassesFromMapping</span><span class="params">(</span><br><span class="line">            File mapping,</span><br><span class="line">            PatternSet mainDexPattern,</span><br><span class="line">            HashSet&lt;String&gt; mainCls)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        ArrayList&lt;String&gt; mainDexList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(mapping));</span><br><span class="line"></span><br><span class="line">        ClassFileTreeElement treeElement = <span class="keyword">new</span> ClassFileTreeElement();</span><br><span class="line">        Spec&lt;FileTreeElement&gt; asSpec = getMaindexSpec(mainDexPattern);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            line = line.trim();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line.endsWith(<span class="string">":"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> flagPos = line.indexOf(MAPPING_FLAG);<span class="comment">//找『 -&gt; 』</span></span><br><span class="line">                <span class="keyword">if</span> (flagPos != -<span class="number">1</span>) &#123;</span><br><span class="line">                    String sOrg = line.substring(<span class="number">0</span>, flagPos).replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + CLASS_SUFFIX;<span class="comment">//获取前面的,是混淆前的</span></span><br><span class="line">                    treeElement.setClassPath(sOrg);<span class="comment">//设置路径</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (asSpec.isSatisfiedBy(treeElement)</span><br><span class="line">                            || (mainCls != <span class="keyword">null</span> &amp;&amp; mainCls.contains(sOrg))) &#123;</span><br><span class="line">                        String sMap = line.substring(flagPos + MAPPING_FLAG_LEN, line.length() - <span class="number">1</span>).replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + CLASS_SUFFIX;<span class="comment">//得到混淆后的</span></span><br><span class="line">                        mainDexList.add(sMap);<span class="comment">//添加到mainDexList中</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">return</span> mainDexList;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">getMainClassesFromJar</span><span class="params">(</span><br><span class="line">            File jarMergingOutputFile, PatternSet mainDexPattern, HashSet&lt;String&gt; mainCls)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ZipFile clsFile = <span class="keyword">new</span> ZipFile(jarMergingOutputFile);<span class="comment">//allclass.jar</span></span><br><span class="line">        Spec&lt;FileTreeElement&gt; asSpec = getMaindexSpec(mainDexPattern);</span><br><span class="line">        ClassFileTreeElement treeElement = <span class="keyword">new</span> ClassFileTreeElement();</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; mainDexList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Enumeration&lt;? extends ZipEntry&gt; entries = clsFile.entries();</span><br><span class="line">        <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">            ZipEntry entry = entries.nextElement();</span><br><span class="line">            String entryName = entry.getName();<span class="comment">//得到全名称</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entryName.endsWith(CLASS_SUFFIX)) &#123;</span><br><span class="line">                treeElement.setClassPath(entryName);</span><br><span class="line">                <span class="keyword">if</span> (asSpec.isSatisfiedBy(treeElement)</span><br><span class="line">                        || (mainCls != <span class="keyword">null</span> &amp;&amp; mainCls.contains(entryName))) &#123;</span><br><span class="line">                    mainDexList.add(entryName);<span class="comment">//写到mainDexList中</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clsFile.close();</span><br><span class="line">        <span class="keyword">return</span> mainDexList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先通过  <code>getDexKnifeConfig()</code> 来得到配置，然后通过 <code>genMainDexList()</code> 将配置中设置的一些类写入到  <code>maindexlist.txt</code> 中。这里需要注意一下 buildType 的 minifyEnabled，一般在 debug 的时候都没有设置这个参数，默认为 false，当 release 的时候设置该参数为 true，那么会进行混淆工作，所以这里如果该参数为 true 的话直接取读的 mapping 文件。</p>
<h3 id="SplitToolsFor150"><a href="#SplitToolsFor150" class="headerlink" title="SplitToolsFor150"></a>SplitToolsFor150</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitToolsFor150</span> <span class="keyword">extends</span> <span class="title">DexSplitTools</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="typename">boolean</span> isCompat() &#123;</span><br><span class="line"><span class="comment">//         if (getAndroidPluginVersion() &lt; 200) &#123;</span></span><br><span class="line"><span class="comment">//             return true;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="typename">void</span> processSplitDex(Project project, ApplicationVariant variant) &#123;</span><br><span class="line">        <span class="comment">//instantRun开启的话就跳过了</span></span><br><span class="line">        <span class="keyword">if</span> (isInInstantRunMode(variant)) &#123;</span><br><span class="line">            System.err.println(<span class="string">"DexKnife: Instant Run mode, DexKnife is auto disabled!"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransformTask dexTask</span><br><span class="line"><span class="comment">//        TransformTask proGuardTask</span></span><br><span class="line">        TransformTask jarMergingTask</span><br><span class="line"></span><br><span class="line">        String name = variant.name.capitalize()<span class="comment">//Debug或者Release</span></span><br><span class="line">        <span class="typename">boolean</span> minifyEnabled = variant.buildType.minifyEnabled</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find the task we want to process</span></span><br><span class="line">        project.tasks.matching &#123;</span><br><span class="line">            ((it <span class="keyword">instanceof</span> TransformTask) &amp;&amp; it.name.endsWith(name)) <span class="comment">// TransformTask</span></span><br><span class="line">        &#125;.each &#123; TransformTask theTask -&gt;</span><br><span class="line">            Transform transform = theTask.transform</span><br><span class="line">            String transformName = transform.name</span><br><span class="line"><span class="comment">//            if (minifyEnabled &amp;&amp; "proguard".equals(transformName)) &#123; // ProGuardTransform</span></span><br><span class="line"><span class="comment">//                proGuardTask = theTask</span></span><br><span class="line"><span class="comment">//            &#125; else</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"jarMerging"</span>.equalsIgnoreCase(transformName)) &#123;<span class="comment">//jarMerging</span></span><br><span class="line">                jarMergingTask = theTask<span class="comment">//transformClassWithJarMerging的时候执行</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"dex"</span>.equalsIgnoreCase(transformName)) &#123; <span class="comment">// DexTransform</span></span><br><span class="line">                dexTask = theTask<span class="comment">//transformClassWithDex的时候执行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dexTask != <span class="literal">null</span> &amp;&amp; ((DexTransform) dexTask.transform).multiDex) &#123;</span><br><span class="line">            dexTask.inputs.file DEX_KNIFE_CFG_TXT</span><br><span class="line"></span><br><span class="line">            dexTask.doFirst &#123;</span><br><span class="line">                <span class="comment">//记录开始时间</span></span><br><span class="line">                startDexKnife()</span><br><span class="line"></span><br><span class="line">                File mergedJar = <span class="literal">null</span></span><br><span class="line">                File mappingFile = variant.mappingFile<span class="comment">//mapping.txt</span></span><br><span class="line">                DexTransform dexTransform = it.transform</span><br><span class="line">                File fileAdtMainList = dexTransform.mainDexListFile<span class="comment">//maindexlist文件</span></span><br><span class="line"></span><br><span class="line">                println(<span class="string">"DexKnife Adt Main: "</span> + fileAdtMainList)</span><br><span class="line"></span><br><span class="line">                DexKnifeConfig dexKnifeConfig = getDexKnifeConfig(project)<span class="comment">//获取配置</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 非混淆的，从合并后的jar文件中提起maindexlist；</span></span><br><span class="line">                <span class="comment">// 混淆的，直接从mapping文件中提取</span></span><br><span class="line">                <span class="keyword">if</span> (minifyEnabled) &#123;</span><br><span class="line">                    println(<span class="string">"DexKnife-From Mapping: "</span> + mappingFile)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (jarMergingTask != <span class="literal">null</span>) &#123;</span><br><span class="line">                        Transform transform = jarMergingTask.transform</span><br><span class="line">                        <span class="keyword">def</span> outputProvider = jarMergingTask.outputStream.asOutput()</span><br><span class="line">                        mergedJar = outputProvider.getContentLocation(<span class="string">"combined"</span>,</span><br><span class="line">                                transform.getOutputTypes(),</span><br><span class="line">                                transform.getScopes(), Format.JAR)<span class="comment">//得到jar</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    println(<span class="string">"DexKnife-From MergedJar: "</span> + mergedJar)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//与130一样</span></span><br><span class="line">                <span class="keyword">if</span> (processMainDexList(project, minifyEnabled, mappingFile, mergedJar,</span><br><span class="line">                        fileAdtMainList, dexKnifeConfig)) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//得到version</span></span><br><span class="line">                    <span class="typename">int</span> version = getAndroidPluginVersion(getAndroidGradlePluginVersion())</span><br><span class="line">                    println(<span class="string">"DexKnife: AndroidPluginVersion: "</span> + version)</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// after 2.2.0, it can additionalParameters, but it is a copy in task</span></span><br><span class="line"><span class="comment">//                    if (version &gt;= 220) &#123;</span></span><br><span class="line"><span class="comment">//                        DexOptions dexOptions = project.android.dexOptions;</span></span><br><span class="line"><span class="comment">//                        InjectAndroidBuilder.mergeParams(dexOptions.getAdditionalParameters(),</span></span><br><span class="line"><span class="comment">//                                dexKnifeConfig.additionalParameters)</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 替换 AndroidBuilder</span></span><br><span class="line">                    InjectAndroidBuilder.proxyAndroidBuilder(dexTransform,</span><br><span class="line">                            dexKnifeConfig.additionalParameters)</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 替换这个文件</span></span><br><span class="line">                    fileAdtMainList.delete()</span><br><span class="line">                    project.copy &#123;</span><br><span class="line">                        from <span class="string">'maindexlist.txt'</span></span><br><span class="line">                        into fileAdtMainList.parentFile</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//记录并打印执行时间</span></span><br><span class="line">                endDexKnife()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="typename">boolean</span> isInInstantRunMode(Object variant) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">def</span> scope = variant.getVariantData().getScope()</span><br><span class="line">            InstantRunBuildContext instantRunBuildContext = scope.getInstantRunBuildContext()</span><br><span class="line">            <span class="keyword">return</span> instantRunBuildContext.isInInstantRunMode()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要的 <code>processMainDexList</code> 与 130 的一样，这里就不多说了，再来看看是怎么通过 maindexlist.txt 来实现分包的：</p>
<h3 id="InjectAndroidBuilder"><a href="#InjectAndroidBuilder" class="headerlink" title="InjectAndroidBuilder"></a>InjectAndroidBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectAndroidBuilder</span> <span class="keyword">extends</span> <span class="title">AndroidBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * addParams 就是130的dex的那些分包参数</span><br><span class="line">     * <span class="doctag">@param</span> transform</span><br><span class="line">     * <span class="doctag">@param</span> addParams</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">proxyAndroidBuilder</span><span class="params">(DexTransform transform, Collection&lt;String&gt; addParams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (addParams != <span class="keyword">null</span> &amp;&amp; addParams.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//反射，替换成自己的</span></span><br><span class="line">            accessibleField(DexTransform.class, <span class="string">"androidBuilder"</span>)</span><br><span class="line">                    .set(transform, getProxyAndroidBuilder(transform.androidBuilder, addParams))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * new一个自己的出来</span><br><span class="line">     * <span class="doctag">@param</span> orgAndroidBuilder</span><br><span class="line">     * <span class="doctag">@param</span> addParams</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AndroidBuilder <span class="title">getProxyAndroidBuilder</span><span class="params">(AndroidBuilder orgAndroidBuilder,</span><br><span class="line">                                                         Collection&lt;String&gt; addParams)</span> </span>&#123;</span><br><span class="line">        InjectAndroidBuilder myAndroidBuilder = <span class="keyword">new</span> InjectAndroidBuilder(</span><br><span class="line">                orgAndroidBuilder.mProjectId,</span><br><span class="line">                orgAndroidBuilder.mCreatedBy,</span><br><span class="line">                orgAndroidBuilder.getProcessExecutor(),</span><br><span class="line">                orgAndroidBuilder.mJavaProcessExecutor,</span><br><span class="line">                orgAndroidBuilder.getErrorReporter(),</span><br><span class="line">                orgAndroidBuilder.getLogger(),</span><br><span class="line">                orgAndroidBuilder.mVerboseExec)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if &gt;= 2.2.0</span></span><br><span class="line">        def to = myAndroidBuilder.respondsTo(<span class="string">"setTargetInfo"</span>, TargetInfo.class)</span><br><span class="line">        <span class="comment">//分版本适配</span></span><br><span class="line">        <span class="keyword">if</span> (to.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            myAndroidBuilder.setTargetInfo(orgAndroidBuilder.getTargetInfo())</span><br><span class="line">            myAndroidBuilder.setSdkInfo(orgAndroidBuilder.getSdkInfo())</span><br><span class="line">            myAndroidBuilder.setLibraryRequests(orgAndroidBuilder.mLibraryRequests)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            myAndroidBuilder.setTargetInfo(</span><br><span class="line">                    orgAndroidBuilder.getSdkInfo(),</span><br><span class="line">                    orgAndroidBuilder.getTargetInfo(),</span><br><span class="line">                    orgAndroidBuilder.mLibraryRequests)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将参数传入</span></span><br><span class="line">        myAndroidBuilder.mAddParams = addParams</span><br><span class="line">        myAndroidBuilder.mAndroidBuilder = orgAndroidBuilder</span><br><span class="line"><span class="comment">//        myAndroidBuilder.mBootClasspathFiltered = orgAndroidBuilder.mBootClasspathFiltered</span></span><br><span class="line"><span class="comment">//        myAndroidBuilder.mBootClasspathAll = orgAndroidBuilder.mBootClasspathAll</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> myAndroidBuilder</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@CompileStatic</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Field <span class="title">accessibleField</span><span class="params">(Class cls, String field)</span> </span>&#123;</span><br><span class="line">        Field f = cls.getDeclaredField(field)</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>)</span><br><span class="line">        <span class="keyword">return</span> f</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Collection&lt;String&gt; mAddParams;</span><br><span class="line">    AndroidBuilder mAndroidBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InjectAndroidBuilder</span><span class="params">(String projectId,</span><br><span class="line">                                String createdBy,</span><br><span class="line">                                ProcessExecutor processExecutor,</span><br><span class="line">                                JavaProcessExecutor javaProcessExecutor,</span><br><span class="line">                                ErrorReporter errorReporter,</span><br><span class="line">                                ILogger logger,</span><br><span class="line">                                <span class="keyword">boolean</span> verboseExec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(projectId, createdBy, processExecutor, javaProcessExecutor, errorReporter, logger, verboseExec)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override // for &lt; 2.2.0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertByteCode</span><span class="params">(Collection&lt;File&gt; inputs,</span><br><span class="line">                                File outDexFolder,</span><br><span class="line">                                <span class="keyword">boolean</span> multidex,</span><br><span class="line">                                File mainDexList,</span><br><span class="line">                                DexOptions dexOptions,</span><br><span class="line">                                List&lt;String&gt; additionalParameters,</span><br><span class="line">                                <span class="keyword">boolean</span> incremental,</span><br><span class="line">                                <span class="keyword">boolean</span> optimize,</span><br><span class="line">                                ProcessOutputHandler processOutputHandler)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, InterruptedException, ProcessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"DexKnife: convertByteCode before 2.2.0"</span>)</span><br><span class="line">        <span class="keyword">if</span> (mAddParams != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (additionalParameters == <span class="keyword">null</span>) &#123;</span><br><span class="line">                additionalParameters = <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将参数添加到additionalParameters中</span></span><br><span class="line">            mergeParams(additionalParameters, mAddParams)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// groovy call super has bug</span></span><br><span class="line">        mAndroidBuilder.convertByteCode(inputs, outDexFolder, multidex, mainDexList, dexOptions,</span><br><span class="line">                additionalParameters, incremental, optimize, processOutputHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override for &gt;= 2.2.0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertByteCode</span><span class="params">(Collection&lt;File&gt; inputs,</span><br><span class="line">                                File outDexFolder,</span><br><span class="line">                                <span class="keyword">boolean</span> multidex,</span><br><span class="line">                                File mainDexList,</span><br><span class="line">                                <span class="keyword">final</span> DexOptions dexOptions,</span><br><span class="line">                                <span class="keyword">boolean</span> optimize,</span><br><span class="line">                                ProcessOutputHandler processOutputHandler)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, InterruptedException, ProcessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"DexKnife:convertByteCode after 2.2.0"</span>)</span><br><span class="line"></span><br><span class="line">        DexOptions dexOptionsProxy = <span class="function">dexOptions</span><br><span class="line"></span><br><span class="line">        <span class="title">if</span> <span class="params">(mAddParams != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">            List&lt;String&gt; additionalParameters = dexOptions.getAdditionalParameters()</span><br><span class="line">            <span class="keyword">if</span> (additionalParameters == <span class="keyword">null</span>) &#123;</span><br><span class="line">                additionalParameters = <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mergeParams(additionalParameters, mAddParams)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mAndroidBuilder.convertByteCode(inputs, outDexFolder, multidex, mainDexList, dexOptionsProxy,</span><br><span class="line">                optimize, processOutputHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@CompileStatic</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function">List&lt;File&gt; <span class="title">getBootClasspath</span><span class="params">(<span class="keyword">boolean</span> includeOptionalLibraries)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAndroidBuilder.getBootClasspath(includeOptionalLibraries)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@CompileStatic</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getBootClasspathAsStrings</span><span class="params">(<span class="keyword">boolean</span> includeOptionalLibraries)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAndroidBuilder.getBootClasspathAsStrings(includeOptionalLibraries)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@CompileStatic</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeParams</span><span class="params">(List&lt;String&gt; additionalParameters, Collection&lt;String&gt; addParams)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; mergeParam = <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        <span class="keyword">for</span> (String param : addParams) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!additionalParameters.contains(param)) &#123;</span><br><span class="line">                mergeParam.add(param)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mergeParam.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            additionalParameters.addAll(mergeParam)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过反射将 <code>AndroidBuilder</code> 替换成自己的，将分包的参数加上，最终是通过 <code>AndroidBuilder#convertByteCode()</code> 写进去的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>通过插件的方式很赞，使用的人不需要做太多配置，只需要将插件设置进来便可</li>
<li>通过 <code>dexknife.txt</code> 方式来配置也很赞</li>
<li>1.5.0 之后的方式很赞</li>
<li>-split 和 -keep 以及 -suggest-split 和 -suggest-keep 等，参数实在过多</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Dex </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Parallax-Layer-Layout源码解析]]></title>
      <url>/2016/08/30/parallax-layer-layout-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/SchibstedSpain/Parallax-Layer-Layout" target="_blank" rel="external">Parallax-Layer-Layout</a>      分析版本：<a href="https://github.com/SchibstedSpain/Parallax-Layer-Layout/tree/5375a3a4db4aff1831aa7aabea2fb0b1e002abf9" target="_blank" rel="external">5375a3a</a></p>
</blockquote>
<p>在 Android 上的分层视差效果的开源库。</p>
<a id="more"></a>
<h2 id="Parallax-Layer-Layout"><a href="#Parallax-Layer-Layout" class="headerlink" title="Parallax-Layer-Layout"></a>Parallax-Layer-Layout</h2><p><img src="http://yydcdut.github.io/img/Parallax_Layer_Layout.gif" alt="Parallax-Layer-Layout"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加到 layout 中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">com.schibsted.spain.parallaxlayerlayout.ParallaxLayerLayout</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/parallax"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"0dp"</span></span><br><span class="line">        <span class="attribute">android:layout_weight</span>=<span class="value">"1"</span></span><br><span class="line">        <span class="attribute">app:parallaxOffsetBase</span>=<span class="value">"20dp"</span></span><br><span class="line">        <span class="attribute">app:parallaxOffsetIncrement</span>=<span class="value">"10dp"</span></span><br><span class="line">        <span class="attribute">app:parallaxScaleVertical</span>=<span class="value">"0.5"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/layer_3"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"200dp"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"200dp"</span></span><br><span class="line">            <span class="attribute">android:background</span>=<span class="value">"@drawable/background_primary_dark"</span></span><br><span class="line">            <span class="attribute">app:layout_parallaxZIndex</span>=<span class="value">"3"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/layer_2"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"152dp"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"152dp"</span></span><br><span class="line">            <span class="attribute">android:background</span>=<span class="value">"@drawable/background_primary"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="title">View</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/layer_1"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"120dp"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"120dp"</span></span><br><span class="line">            <span class="attribute">android:background</span>=<span class="value">"@drawable/background_accent"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="title">com.schibsted.spain.parallaxlayerlayout.ParallaxLayerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注册传感器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ParallaxLayerLayout parallaxLayout;</span><br><span class="line">    <span class="keyword">private</span> SensorTranslationUpdater translationUpdater;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main_squares);</span><br><span class="line">      </span><br><span class="line">        parallaxLayout = (ParallaxLayerLayout) findViewById(R.id.parallax);</span><br><span class="line">        translationUpdater = <span class="keyword">new</span> SensorTranslationUpdater(<span class="keyword">this</span>);</span><br><span class="line">        parallaxLayout.setTranslationUpdater(translationUpdater);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        translationUpdater.registerSensorManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        translationUpdater.unregisterSensorManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="SensorTranslationUpdater"><a href="#SensorTranslationUpdater" class="headerlink" title="SensorTranslationUpdater"></a>SensorTranslationUpdater</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorTranslationUpdater</span> <span class="keyword">implements</span> <span class="title">ParallaxLayerLayout</span>.<span class="title">TranslationUpdater</span>, <span class="title">SensorEventListener</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SAMPLING_PERIOD = <span class="number">100</span>;<span class="comment">//传感器回调间隔时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SensorManager sensorManager;<span class="comment">//传感器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mTiltVector = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mTargeted = <span class="keyword">false</span>;<span class="comment">//是否第一次进入或者reset了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mTargetMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];<span class="comment">//初始矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mRotationMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];<span class="comment">//当前矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mOrientedRotationMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];<span class="comment">//屏幕旋转后转换回来之后的矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mTruncatedRotationVector;<span class="comment">//适配机型的传感器返回的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mTiltSensitivity = <span class="number">2.0f</span>;<span class="comment">//灵敏度</span></span><br><span class="line">    <span class="keyword">private</span> ParallaxLayerLayout parallax;<span class="comment">//View</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SensorTranslationUpdater</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>((SensorManager) context.getSystemService(Context.SENSOR_SERVICE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SensorTranslationUpdater</span><span class="params">(SensorManager sensorManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sensorManager = sensorManager;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 注册传感器</span><br><span class="line">     * 使用的是TYPE_ROTATION_VECTOR传感器</span><br><span class="line">     * 在Activity的onResume中调用</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerSensorManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sensorManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sensorManager.registerListener(<span class="keyword">this</span>,sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR), DEFAULT_SAMPLING_PERIOD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 注销传感器</span><br><span class="line">     * 在Activity的onPause中调用</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterSensorManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sensorManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sensorManager.unregisterListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 传感器的回调</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> event</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSensorChanged</span><span class="params">(SensorEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parallax == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到每个角度都是间于-1到1之间</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span>[] vectors = interpretSensorEvent(parallax.getContext(), event);</span><br><span class="line">        <span class="keyword">if</span> (vectors == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> roll = vectors[<span class="number">2</span>];<span class="comment">//X轴方向的值</span></span><br><span class="line">        <span class="keyword">float</span> pitch = -vectors[<span class="number">1</span>];<span class="comment">//Y轴方向的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//做平移动画</span></span><br><span class="line">        parallax.updateTranslations(<span class="keyword">new</span> <span class="keyword">float</span>[]&#123;roll, pitch&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span><br><span class="line">     * 将View设置进来</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> parallaxLayerLayout</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ParallaxLayerLayout parallaxLayerLayout)</span> </span>&#123;</span><br><span class="line">        parallax = parallaxLayerLayout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 清理掉View</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unSubscribe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        parallax = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化 <code>SensorTranslationUpdater</code> 完成了，现在看一些方法的具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorTranslationUpdater</span> <span class="keyword">implements</span> <span class="title">ParallaxLayerLayout</span>.<span class="title">TranslationUpdater</span>, <span class="title">SensorEventListener</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SAMPLING_PERIOD = <span class="number">100</span>;<span class="comment">//传感器回调间隔时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SensorManager sensorManager;<span class="comment">//传感器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mTiltVector = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mTargeted = <span class="keyword">false</span>;<span class="comment">//是否第一次进入或者reset了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mTargetMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];<span class="comment">//初始矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mRotationMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];<span class="comment">//当前矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mOrientedRotationMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];<span class="comment">//屏幕旋转后转换回来之后的矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mTruncatedRotationVector;<span class="comment">//适配机型的传感器返回的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mTiltSensitivity = <span class="number">2.0f</span>;<span class="comment">//灵敏度</span></span><br><span class="line">    <span class="keyword">private</span> ParallaxLayerLayout parallax;<span class="comment">//View</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//最后返回的在-1到1之间</span></span><br><span class="line">    <span class="annotation">@Nullable</span></span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(<span class="string">"SuspiciousNameCombination"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] interpretSensorEvent(<span class="annotation">@NonNull</span> Context context, <span class="annotation">@Nullable</span> SensorEvent event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//适配</span></span><br><span class="line">        <span class="comment">// Retrieves the RotationVector from SensorEvent</span></span><br><span class="line">        <span class="keyword">float</span>[] rotationVector = getRotationVectorFromSensorEvent(event);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次的时候会进到这里</span></span><br><span class="line">        <span class="comment">//赋值mTargetMatrix,这个为最初始的matrix</span></span><br><span class="line">        <span class="comment">//就是将传感器得到的值转换成矩阵</span></span><br><span class="line">        <span class="comment">// Set target rotation if none has been set</span></span><br><span class="line">        <span class="keyword">if</span> (!mTargeted) &#123;</span><br><span class="line">            setTargetVector(rotationVector);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换成矩阵</span></span><br><span class="line">        <span class="comment">// Get rotation matrix from event's values</span></span><br><span class="line">        SensorManager.getRotationMatrixFromVector(mRotationMatrix, rotationVector);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到当前屏幕的旋转角度</span></span><br><span class="line">        <span class="comment">// Acquire rotation of screen</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> rotation =</span><br><span class="line">                ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay()</span><br><span class="line">                        .getRotation();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过屏幕的选择来计算角度</span></span><br><span class="line">        <span class="comment">// Calculate angle differential between target and current orientation</span></span><br><span class="line">        <span class="keyword">if</span> (rotation == Surface.ROTATION_0) &#123;</span><br><span class="line">            <span class="comment">//通过当前的mRotationMatrix矩阵和最开始的mTargetMatrix矩阵,对比得到变换的角度</span></span><br><span class="line">            SensorManager.getAngleChange(mTiltVector, mRotationMatrix, mTargetMatrix);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//通过屏幕的选择角度重新映射坐标</span></span><br><span class="line">            <span class="comment">// Adjust axes on screen orientation by remapping coordinates</span></span><br><span class="line">            <span class="keyword">switch</span> (rotation) &#123;</span><br><span class="line">                <span class="keyword">case</span> Surface.ROTATION_90:</span><br><span class="line">                    SensorManager.remapCoordinateSystem(mRotationMatrix, SensorManager.AXIS_Y,</span><br><span class="line">                            SensorManager.AXIS_MINUS_X, mOrientedRotationMatrix);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> Surface.ROTATION_180:</span><br><span class="line">                    SensorManager.remapCoordinateSystem(mRotationMatrix, SensorManager.AXIS_MINUS_X,</span><br><span class="line">                            SensorManager.AXIS_MINUS_Y, mOrientedRotationMatrix);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> Surface.ROTATION_270:</span><br><span class="line">                    SensorManager.remapCoordinateSystem(mRotationMatrix, SensorManager.AXIS_MINUS_Y,</span><br><span class="line">                            SensorManager.AXIS_X, mOrientedRotationMatrix);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SensorManager.getAngleChange(mTiltVector, mOrientedRotationMatrix, mTargetMatrix);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到的角度都是在-π到π之间,转化成-1到1之间</span></span><br><span class="line">        <span class="comment">// Perform value scaling and clamping on value array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mTiltVector.length; i++) &#123;</span><br><span class="line">            <span class="comment">// Map domain of tilt vector from radian (-PI, PI) to fraction (-1, 1)</span></span><br><span class="line">            mTiltVector[i] /= Math.PI;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Adjust for tilt sensitivity</span></span><br><span class="line">            mTiltVector[i] *= mTiltSensitivity;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Clamp values to bounds</span></span><br><span class="line">            <span class="keyword">if</span> (mTiltVector[i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                mTiltVector[i] = <span class="number">1f</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mTiltVector[i] &lt; -<span class="number">1</span>) &#123;</span><br><span class="line">                mTiltVector[i] = -<span class="number">1f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mTiltVector;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 适配,只要前4个</span><br><span class="line">     * 一般的都只返回3个,XYZ</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> event</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@NonNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] getRotationVectorFromSensorEvent(<span class="annotation">@NonNull</span> SensorEvent event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.values.length &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// On some Samsung devices SensorManager.getRotationMatrixFromVector</span></span><br><span class="line">            <span class="comment">// appears to throw an exception if rotation vector has length &gt; 4.</span></span><br><span class="line">            <span class="comment">// For the purposes of this class the first 4 values of the</span></span><br><span class="line">            <span class="comment">// rotation vector are sufficient (see crbug.com/335298 for details).</span></span><br><span class="line">            <span class="keyword">if</span> (mTruncatedRotationVector == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mTruncatedRotationVector = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(event.values, <span class="number">0</span>, mTruncatedRotationVector, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">return</span> mTruncatedRotationVector;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> event.values;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该俩方法就是将传感器返回的值转换成 -1 到 1 区间内的值，然后传递给 <code>ParallaxLayerLayout</code>，再看看 <code>ParallaxLayerLayout</code> ：</p>
<h3 id="ParallaxLayerLayout"><a href="#ParallaxLayerLayout" class="headerlink" title="ParallaxLayerLayout"></a>ParallaxLayerLayout</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallaxLayerLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认移动范围</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_BASE_OFFSET_DP = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_OFFSET_INCREMENT_DP = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Interpolator interpolator = <span class="keyword">new</span> DecelerateInterpolator();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> offsetIncrementPx;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseOffsetPx;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> scaleX = <span class="number">1.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> scaleY = <span class="number">1.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> TranslationUpdater translationUpdater;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParallaxLayerLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParallaxLayerLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line"></span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ParallaxLayerLayout);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            baseOffsetPx =</span><br><span class="line">                    a.getDimensionPixelSize(R.styleable.ParallaxLayerLayout_parallaxOffsetBase, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (baseOffsetPx == -<span class="number">1</span>) &#123;</span><br><span class="line">                baseOffsetPx =</span><br><span class="line">                        (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, DEFAULT_BASE_OFFSET_DP,</span><br><span class="line">                                getResources().getDisplayMetrics());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            offsetIncrementPx =</span><br><span class="line">                    a.getDimensionPixelSize(R.styleable.ParallaxLayerLayout_parallaxOffsetIncrement, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (offsetIncrementPx == -<span class="number">1</span>) &#123;</span><br><span class="line">                offsetIncrementPx = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,</span><br><span class="line">                        DEFAULT_OFFSET_INCREMENT_DP, getResources().getDisplayMetrics());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            scaleX = a.getFloat(R.styleable.ParallaxLayerLayout_parallaxScaleHorizontal, <span class="number">1.0f</span>);</span><br><span class="line">            scaleY = a.getFloat(R.styleable.ParallaxLayerLayout_parallaxScaleVertical, <span class="number">1.0f</span>);</span><br><span class="line">            <span class="keyword">if</span> (scaleX &gt; <span class="number">1.0f</span> || scaleX &lt; <span class="number">0.0f</span> || scaleY &gt; <span class="number">1.0f</span> || scaleY &lt; <span class="number">0.0f</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Parallax scale must be a value between -1.0 and 1.0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            a.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//region Offset computation</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onFinishInflate();</span><br><span class="line"></span><br><span class="line">        computeOffsets();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用于IDE的预览</span></span><br><span class="line">        <span class="keyword">if</span> (isInEditMode()) &#123;</span><br><span class="line">            updateTranslations(<span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">1.0f</span>, <span class="number">1.0f</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeOffsets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            View child = getChildAt(i);</span><br><span class="line">            LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="comment">//该childView当前的索引</span></span><br><span class="line">            <span class="keyword">if</span> (lp.customIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//Reversed for parallax effect</span></span><br><span class="line">                index = childCount - <span class="number">1</span> - i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index = lp.customIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            lp.offsetPx = offsetPxForIndex(index, lp.incrementMultiplier);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这里计算出不同的childView的索引不同从而移动的距离也不同</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> index</span><br><span class="line">     * <span class="doctag">@param</span> incrementMultiplier</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">offsetPxForIndex</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">float</span> incrementMultiplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> incrementMultiplier * baseOffsetPx + index * offsetIncrementPx;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//endregion</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//region Translation</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 移动</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> translations X and Y translation percentage, with values from -1.0 to 1.0.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTranslations</span><span class="params">(@Size(<span class="number">2</span>)</span> <span class="keyword">float</span>[] translations) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(translations[<span class="number">0</span>]) &gt; <span class="number">1</span> || Math.abs(translations[<span class="number">1</span>]) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Translation values must be between 1.0 and -1.0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();<span class="comment">//为每个子View都处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            View child = getChildAt(i);</span><br><span class="line">            <span class="keyword">float</span>[] translationsPx = calculateFinalTranslationPx(child, translations);<span class="comment">//计算移动距离</span></span><br><span class="line">            child.setTranslationX(translationsPx[<span class="number">0</span>]);<span class="comment">//移动X轴</span></span><br><span class="line">            child.setTranslationY(translationsPx[<span class="number">1</span>]);<span class="comment">//移动Y轴</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 设置TranslationUpdater</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> translationUpdater</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTranslationUpdater</span><span class="params">(TranslationUpdater translationUpdater)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.translationUpdater != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.translationUpdater.unSubscribe();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.translationUpdater = translationUpdater;</span><br><span class="line">        <span class="keyword">this</span>.translationUpdater.subscribe(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 计算移动距离</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> child</span><br><span class="line">     * <span class="doctag">@param</span> translations</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Size</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] calculateFinalTranslationPx(View child, <span class="annotation">@Size</span>(<span class="number">2</span>) <span class="keyword">float</span>[] translations) &#123;</span><br><span class="line">        LayoutParams lp = (LayoutParams) child.getLayoutParams();</span><br><span class="line">        <span class="keyword">int</span> xSign = translations[<span class="number">0</span>] &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ySign = translations[<span class="number">1</span>] &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> translationX =</span><br><span class="line">                xSign * lp.offsetPx * interpolator.getInterpolation(Math.abs(translations[<span class="number">0</span>])) * scaleX;</span><br><span class="line">        <span class="keyword">float</span> translationY =</span><br><span class="line">                ySign * lp.offsetPx * interpolator.getInterpolation(Math.abs(translations[<span class="number">1</span>])) * scaleY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;translationX, translationY&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//endregion</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//region LayoutParams</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkLayoutParams</span><span class="params">(ViewGroup.LayoutParams p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p <span class="keyword">instanceof</span> LayoutParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateDefaultLayoutParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LayoutParams(getContext(), attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ViewGroup.<span class="function">LayoutParams <span class="title">generateLayoutParams</span><span class="params">(ViewGroup.LayoutParams p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LayoutParams(p.width, p.height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TranslationUpdater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ParallaxLayerLayout parallaxLayerLayout)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">unSubscribe</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//endregion</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutParams</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span>.<span class="title">LayoutParams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> offsetPx;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> customIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> incrementMultiplier = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LayoutParams</span><span class="params">(Context c, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(c, attrs);</span><br><span class="line">            gravity = Gravity.CENTER;</span><br><span class="line">            TypedArray a = c.obtainStyledAttributes(attrs, R.styleable.ParallaxLayerLayout_LayoutParams);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                customIndex =</span><br><span class="line">                        a.getInt(R.styleable.ParallaxLayerLayout_LayoutParams_layout_parallaxZIndex, -<span class="number">1</span>);</span><br><span class="line">                incrementMultiplier = a.getFloat(</span><br><span class="line">                        R.styleable.ParallaxLayerLayout_LayoutParams_layout_parallaxIncrementMultiplier, <span class="number">1.0f</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                a.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LayoutParams</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(width, height);</span><br><span class="line">            gravity = Gravity.CENTER;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己实现了 <code>LayoutParams</code> ，在其中设置了一些成员变量，这样省去了创建 entity 这种类了。通过 <code>customIndex</code> 的值分别去计算移动的距离，值越大移动距离越多。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 传感器 </tag>
            
            <tag> 源码 </tag>
            
            <tag> 自定义控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Logger源码解析]]></title>
      <url>/2016/08/21/logger-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/orhanobut/logger" target="_blank" rel="external">logger</a>      分析版本：<a href="https://github.com/orhanobut/logger/tree/fcbb21b30230cdb1c17247d10c395d4e7bfb21ad" target="_blank" rel="external">fcbb21</a></p>
</blockquote>
<p>Logger — Simple, pretty and powerful logger for android.</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="http://yydcdut.github.io/img/logger_description.png" alt="logger"></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>线程信息（Thread information）</li>
<li>类信息（Class information）</li>
<li>方法信息（Method information）</li>
<li>Json 格式化（Pretty-print for json content）</li>
<li>遇 ‘\n’ 分行（Pretty-print for new line “\n”）</li>
<li>简洁易看的输出（Clean output）</li>
<li>跳转代码（Jump to source）</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.orhanobut:logger:1.15'</span></span><br></pre></td></tr></table></figure>
<h3 id="提供方法"><a href="#提供方法" class="headerlink" title="提供方法"></a>提供方法</h3><ul>
<li>基础：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Logger.d(<span class="string">"hello"</span>);</span><br><span class="line">Logger.e(<span class="string">"hello"</span>);</span><br><span class="line">Logger.w(<span class="string">"hello"</span>);</span><br><span class="line">Logger.v(<span class="string">"hello"</span>);</span><br><span class="line">Logger.wtf(<span class="string">"hello"</span>);</span><br><span class="line">Logger.json(JSON_CONTENT);</span><br><span class="line">Logger.xml(XML_CONTENT);</span><br><span class="line">Logger.log(DEBUG, <span class="string">"tag"</span>, <span class="string">"message"</span>, throwable);</span><br></pre></td></tr></table></figure>
<ul>
<li>支持 String format ：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logger.d(<span class="string">"hello %s"</span>, <span class="string">"world"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>支持 Array、Map、Set 和 List 格式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Logger.d(list);</span><br><span class="line">Logger.d(map);</span><br><span class="line">Logger.d(set);</span><br><span class="line">Logger.d(<span class="keyword">new</span> String[]);</span><br></pre></td></tr></table></figure>
<ul>
<li>设置所有的 log 输出的 tag ：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logger.init(YOUR_TAG);</span><br></pre></td></tr></table></figure>
<ul>
<li>当前 log 的 tag：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logger.t(<span class="string">"mytag"</span>).d(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Logger 的设置：</li>
</ul>
<p>该方法只需要调用一次，可以放在 Application 中，所有的参数都是可选的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Logger</span><br><span class="line">  .init(YOUR_TAG)                 <span class="comment">// default PRETTYLOGGER or use just init()</span></span><br><span class="line">  .methodCount(<span class="number">3</span>)                 <span class="comment">// default 2</span></span><br><span class="line">  .hideThreadInfo()               <span class="comment">// default shown</span></span><br><span class="line">  .logLevel(LogLevel.NONE)        <span class="comment">// default LogLevel.FULL</span></span><br><span class="line">  .methodOffset(<span class="number">2</span>)                <span class="comment">// default 0</span></span><br><span class="line">  .logAdapter(<span class="keyword">new</span> AndroidLogAdapter()); <span class="comment">//default AndroidLogAdapter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打 release 包的时候使用 <code>LogLevel.NONE</code> 。</p>
<ul>
<li>使用自定义的 log ：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.logAdapter(<span class="keyword">new</span> CustomLogAdapter())</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>从 <code>Logger.d(&quot;hello&quot;);</code> 入手开始看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerPrinter</span> <span class="keyword">implements</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Printer printer = <span class="keyword">new</span> LoggerPrinter();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    printer.d(object);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟到 <code>Printer</code> 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerPrinter</span> <span class="keyword">implements</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Android's max limit for a log entry is ~4076 bytes,</span><br><span class="line">     * so 4000 bytes is used as chunk size since default charset</span><br><span class="line">     * is UTF-8</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHUNK_SIZE = <span class="number">4000</span>;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The minimum stack trace index, starts at this class after two native calls.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_STACK_OFFSET = <span class="number">3</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * tag is used for the Log, the name is a little different</span><br><span class="line">     * in order to differentiate the logs easily with the filter</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Settings settings = <span class="keyword">new</span> Settings();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; localTag = <span class="keyword">new</span> ThreadLocal&lt;&gt;();<span class="comment">//该变量每个线程维护的有一份，防止多线程并发的时候打出tag出问题</span></span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        String message;</span><br><span class="line">        <span class="keyword">if</span> (object.getClass().isArray()) &#123;<span class="comment">//判断是否是数组</span></span><br><span class="line">            message = Arrays.deepToString((Object[]) object);<span class="comment">//如果是的话,调用Arrays的方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            message = object.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        log(DEBUG, <span class="keyword">null</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * This method is synchronized in order to avoid messy of logs' order.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> priority, Throwable throwable, String msg, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (settings.getLogLevel() == LogLevel.NONE) &#123;<span class="comment">//为NONE的就不继续了</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String tag = getTag();<span class="comment">//得到tag</span></span><br><span class="line">        String message = createMessage(msg, args);<span class="comment">//组装message</span></span><br><span class="line">        log(priority, tag, message, throwable);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@return</span> the appropriate tag based on local or global</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String tag = localTag.get();</span><br><span class="line">        <span class="keyword">if</span> (tag != <span class="keyword">null</span>) &#123;</span><br><span class="line">            localTag.remove();</span><br><span class="line">            <span class="keyword">return</span> tag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tag;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createMessage</span><span class="params">(String message, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args == <span class="keyword">null</span> || args.length == <span class="number">0</span> ? message : String.format(message, args);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">int</span> priority, String tag, String message, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (settings.getLogLevel() == LogLevel.NONE) &#123;<span class="comment">//当为NONE的时候不输出</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (throwable != <span class="keyword">null</span> &amp;&amp; message != <span class="keyword">null</span>) &#123;<span class="comment">//如果有throwable,组装到message中</span></span><br><span class="line">            message += <span class="string">" : "</span> + Helper.getStackTraceString(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (throwable != <span class="keyword">null</span> &amp;&amp; message == <span class="keyword">null</span>) &#123;<span class="comment">//如果有throwable,组装到message中</span></span><br><span class="line">            message = Helper.getStackTraceString(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123;</span><br><span class="line">            message = <span class="string">"No message/exception is set"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> methodCount = getMethodCount();</span><br><span class="line">        <span class="keyword">if</span> (Helper.isEmpty(message)) &#123;</span><br><span class="line">            message = <span class="string">"Empty/NULL log message"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logTopBorder(priority, tag);<span class="comment">//输出顶部的框框</span></span><br><span class="line">        logHeaderContent(priority, tag, methodCount);<span class="comment">//输出线程信息、方法信息等</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//get bytes of message with system's default charset (which is UTF-8 for Android)</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = message.getBytes();<span class="comment">//计算message长度</span></span><br><span class="line">        <span class="keyword">int</span> length = bytes.length;</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= CHUNK_SIZE) &#123;<span class="comment">//log中一行显示4000,当小于4000的时候就去一行显示</span></span><br><span class="line">            <span class="keyword">if</span> (methodCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                logDivider(priority, tag);</span><br><span class="line">            &#125;</span><br><span class="line">            logContent(priority, tag, message);</span><br><span class="line">            logBottomBorder(priority, tag);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methodCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            logDivider(priority, tag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i += CHUNK_SIZE) &#123;<span class="comment">//分行显示</span></span><br><span class="line">            <span class="keyword">int</span> count = Math.min(length - i, CHUNK_SIZE);</span><br><span class="line">            <span class="comment">//create a new String with system's default charset (which is UTF-8 for Android)</span></span><br><span class="line">            logContent(priority, tag, <span class="keyword">new</span> String(bytes, i, count));</span><br><span class="line">        &#125;</span><br><span class="line">        logBottomBorder(priority, tag);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="annotation">@SuppressWarnings</span>(<span class="string">"StringBufferReplaceableByString"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logHeaderContent</span><span class="params">(<span class="keyword">int</span> logType, String tag, <span class="keyword">int</span> methodCount)</span> </span>&#123;</span><br><span class="line">        StackTraceElement[] trace = Thread.currentThread().getStackTrace();<span class="comment">//返回该线程的堆栈转储堆栈跟踪元素的数组</span></span><br><span class="line">        <span class="keyword">if</span> (settings.isShowThreadInfo()) &#123;<span class="comment">//是否显示线程信息</span></span><br><span class="line">            logChunk(logType, tag, HORIZONTAL_DOUBLE_LINE + <span class="string">" Thread: "</span> + Thread.currentThread().getName());<span class="comment">//显示线程名字</span></span><br><span class="line">            logDivider(logType, tag);<span class="comment">//显示分割线</span></span><br><span class="line">        &#125;</span><br><span class="line">        String level = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> stackOffset = getStackOffset(trace) + settings.getMethodOffset();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//corresponding method count with the current stack may exceeds the stack trace. Trims the count</span></span><br><span class="line">        <span class="keyword">if</span> (methodCount + stackOffset &gt; trace.length) &#123;</span><br><span class="line">            methodCount = trace.length - stackOffset - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = methodCount; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> stackIndex = i + stackOffset;</span><br><span class="line">            <span class="keyword">if</span> (stackIndex &gt;= trace.length) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//组装,『║ 类名.方法名 (哪个文件:行数)』</span></span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            builder.append(<span class="string">"║ "</span>)</span><br><span class="line">                    .append(level)</span><br><span class="line">                    .append(getSimpleClassName(trace[stackIndex].getClassName()))</span><br><span class="line">                    .append(<span class="string">"."</span>)</span><br><span class="line">                    .append(trace[stackIndex].getMethodName())</span><br><span class="line">                    .append(<span class="string">" "</span>)</span><br><span class="line">                    .append(<span class="string">" ("</span>)</span><br><span class="line">                    .append(trace[stackIndex].getFileName())</span><br><span class="line">                    .append(<span class="string">":"</span>)</span><br><span class="line">                    .append(trace[stackIndex].getLineNumber())</span><br><span class="line">                    .append(<span class="string">")"</span>);</span><br><span class="line">            level += <span class="string">"   "</span>;</span><br><span class="line">            logChunk(logType, tag, builder.toString());<span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过chunk界别来通过LogAdapter输出</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> logType</span><br><span class="line">     * <span class="doctag">@param</span> tag</span><br><span class="line">     * <span class="doctag">@param</span> chunk</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logChunk</span><span class="params">(<span class="keyword">int</span> logType, String tag, String chunk)</span> </span>&#123;</span><br><span class="line">        String finalTag = formatTag(tag);</span><br><span class="line">        <span class="keyword">switch</span> (logType) &#123;</span><br><span class="line">            <span class="keyword">case</span> ERROR:</span><br><span class="line">                settings.getLogAdapter().e(finalTag, chunk);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INFO:</span><br><span class="line">                settings.getLogAdapter().i(finalTag, chunk);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VERBOSE:</span><br><span class="line">                settings.getLogAdapter().v(finalTag, chunk);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WARN:</span><br><span class="line">                settings.getLogAdapter().w(finalTag, chunk);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ASSERT:</span><br><span class="line">                settings.getLogAdapter().wtf(finalTag, chunk);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DEBUG:</span><br><span class="line">                <span class="comment">// Fall through, log debug by default</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                settings.getLogAdapter().d(finalTag, chunk);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 显示分割线</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> logType</span><br><span class="line">     * <span class="doctag">@param</span> tag</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logDivider</span><span class="params">(<span class="keyword">int</span> logType, String tag)</span> </span>&#123;</span><br><span class="line">        logChunk(logType, tag, MIDDLE_BORDER);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//----------------------- logHeaderContent  begin -----------------------</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Determines the starting index of the stack trace, after method calls made by this class.</span><br><span class="line">     * 找调用堆栈中最外层调用的index</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> trace the stack trace</span><br><span class="line">     * <span class="doctag">@return</span> the stack offset</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getStackOffset</span><span class="params">(StackTraceElement[] trace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = MIN_STACK_OFFSET; i &lt; trace.length; i++) &#123;<span class="comment">//MIN_STACK_OFFSET为3,一般3返回的是最外层调用方法的地方</span></span><br><span class="line">            StackTraceElement e = trace[i];</span><br><span class="line">            String name = e.getClassName();</span><br><span class="line">            <span class="keyword">if</span> (!name.equals(LoggerPrinter.class.getName()) &amp;&amp; !name.equals(Logger.class.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> --i;<span class="comment">//当name不为『LoggerPrinter』或者『Logger』的时候,接下去的就是调用该方法堆栈的信息了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSimpleClassName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lastIndex = name.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">return</span> name.substring(lastIndex + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatTag</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Helper.isEmpty(tag) &amp;&amp; !Helper.equals(<span class="keyword">this</span>.tag, tag)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.tag + <span class="string">"-"</span> + tag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tag;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 如果对该条log设置了tag,那么进行tag处理</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> tag</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatTag</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Helper.isEmpty(tag) &amp;&amp; !Helper.equals(<span class="keyword">this</span>.tag, tag)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.tag + <span class="string">"-"</span> + tag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.tag;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//----------------------- logHeaderContent  end -----------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 分行去显示内容</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> logType</span><br><span class="line">     * <span class="doctag">@param</span> tag</span><br><span class="line">     * <span class="doctag">@param</span> chunk</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logContent</span><span class="params">(<span class="keyword">int</span> logType, String tag, String chunk)</span> </span>&#123;</span><br><span class="line">        String[] lines = chunk.split(System.getProperty(<span class="string">"line.separator"</span>));</span><br><span class="line">        <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">            logChunk(logType, tag, HORIZONTAL_DOUBLE_LINE + <span class="string">" "</span> + line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logBottomBorder</span><span class="params">(<span class="keyword">int</span> logType, String tag)</span> </span>&#123;</span><br><span class="line">        logChunk(logType, tag, BOTTOM_BORDER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>当满足 <code>(文件名字:行数)</code> 的时候，便可点击并跳转到该位置。</strong>以及其他的 <code>v()</code> 、 <code>i()</code> 等等都相似。</p>
<p>那么现在来看看 json 和 xml ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerPrinter</span> <span class="keyword">implements</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Formats the json content and print it</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> json the json content</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">json</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Helper.isEmpty(json)) &#123;</span><br><span class="line">            d(<span class="string">"Empty/Null json content"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            json = json.trim();</span><br><span class="line">            <span class="keyword">if</span> (json.startsWith(<span class="string">"&#123;"</span>)) &#123;<span class="comment">//JsonObject</span></span><br><span class="line">                JSONObject jsonObject = <span class="keyword">new</span> JSONObject(json);</span><br><span class="line">                String message = jsonObject.toString(JSON_INDENT);<span class="comment">//转成String</span></span><br><span class="line">                d(message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (json.startsWith(<span class="string">"["</span>)) &#123;<span class="comment">//JsonArray</span></span><br><span class="line">                JSONArray jsonArray = <span class="keyword">new</span> JSONArray(json);</span><br><span class="line">                String message = jsonArray.toString(JSON_INDENT);<span class="comment">//转成String</span></span><br><span class="line">                d(message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            e(<span class="string">"Invalid Json"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">            e(<span class="string">"Invalid Json"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Formats the json content and print it</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> xml the xml content</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xml</span><span class="params">(String xml)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Helper.isEmpty(xml)) &#123;</span><br><span class="line">            d(<span class="string">"Empty/Null xml content"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Source xmlInput = <span class="keyword">new</span> StreamSource(<span class="keyword">new</span> StringReader(xml));</span><br><span class="line">            StreamResult xmlOutput = <span class="keyword">new</span> StreamResult(<span class="keyword">new</span> StringWriter());</span><br><span class="line">            Transformer transformer = TransformerFactory.newInstance().newTransformer();</span><br><span class="line">            transformer.setOutputProperty(OutputKeys.INDENT, <span class="string">"yes"</span>);</span><br><span class="line">            transformer.setOutputProperty(<span class="string">"&#123;http://xml.apache.org/xslt&#125;indent-amount"</span>, <span class="string">"2"</span>);</span><br><span class="line">            transformer.transform(xmlInput, xmlOutput);</span><br><span class="line">            d(xmlOutput.getWriter().toString().replaceFirst(<span class="string">"&gt;"</span>, <span class="string">"&gt;\n"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TransformerException e) &#123;</span><br><span class="line">            e(<span class="string">"Invalid xml"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在处理 json 中，使用的是 <code>JSONObject</code> 和 <code>JSONArray</code> 两个类，利用该方法的 <code>toString()</code> 方法，在调用 <code>d()</code> 方法输出。在处理 xml 中，使用的是 <code>StreamSource</code> ，同样用 <code>d()</code> 输出。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在平时的开发的时候我们也会用到 Log，或许会将 Log 方法简单封装一下，比如 release 的时候不打出 Log 等。但是Logger 不仅仅只是封装，还处理了很多 Log 存在的缺陷，像 logger 这样处理 Log 日志真的是业界良心，后续也有很多开源库参照该库。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxMarkdown介绍]]></title>
      <url>/2016/07/27/rxmarkdown/</url>
      <content type="html"><![CDATA[<p>RxMarkdown 是一个运用 RxJava API 在 <code>android.widget.TextView</code> 或 <code>android.widget.EditText</code> 中编辑和（实时）预览基本 markdown 语法的 Android 库。 </p>
<a id="more"></a>
<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p>传送门：<a href="https://github.com/yydcdut/RxMarkdown" target="_blank" rel="external">RxMarkdown</a></p>
<p><img src="http://yydcdut.github.io/img/rxmarkdown.gif" alt="gif"></p>
<h2 id="为什么做"><a href="#为什么做" class="headerlink" title="为什么做"></a>为什么做</h2><p>看到很多 Android 上的 markdown 的库或者 App ，基本上都是基于 <code>WebView</code> 的，通过 JavaScript 解析内容，加上 CSS 渲染显示在 WebView 上。我就想到如果在 Android 的TextView 上和 EditText 上渲染 markdown 的内容的话会不会很屌，就打算这么做了，做之前我就想到了做出来应该是一个很鸡肋的样子，因为很多 markdown 的语法都应该不会支持吧，但是在做的过程中真的是克服了很多问题，但是表格真是不知道该去怎么实现。</p>
<h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>在 Android 上实现富文本显示的话，起初想到的是将文本转成HTML，然后在 TextView 或者 EditText 中展示出来就好了，但是发现 TextView 或者 EditText 能支持的 HTML 的标签并不多，那么打算自己写一个 <code>Html.TagHandler</code> 处理好了，最后发现其过程麻烦了，先将 markdown 的内容转成 HTML 的，然后再转成 Android 上的富文本。那么，现在的处理是直接将 markdown 的内容转成 Android 上的富文本。</p>
<p>Android 的富文本是啥？就是 <code>Spannable</code> ，Github 上关于 Android 的 <code>Spannable</code> 的开源库有很多，都写的很棒，但是对于 Android 提供的那些 <code>Span</code> 没法满足要求，然后就只能自己搞一些 <code>Span</code> 来做，比如 markdown 的 todo 的那个语法等。</p>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ul>
<li><p>图片渲染</p>
<p>在图片渲染这部分，虽然提供了 <code>ImageSpan</code> ，但是这个类似乎好像不支持网络访问，因为数据（ Drawable ）是通过方法返回值返回到底层去的，所以就没法执行异步操作。在这个地方，刚好看到了 Bilibilib 开源的 <code>drawee-text-view</code> ，就是基于 Fresco 的 Spannable TextView，读了源码之后，豁然开朗，知道了怎么搞，这个问题耶就解决了，但是在 EditText 上似乎还有写问题，当图片从网络上获取完之后，渲染之后，不会马上显示出来，只有当 EditText 上的内容有改变的时候才会显示出来。</p>
</li>
<li><p>有序和无序列表</p>
<p>在处理这部分的逻辑的时候，脑子都要炸了，因为不仅要处理语法这部分，还要考虑上下文，也就是当为有序的时候，前面那一行如果是 <code>3.</code> ，那么该行无论前面是几，当渲染出来的时候都应该是 <code>4.</code>；不仅如此，还要考虑嵌套问题，嵌套一层的时候，应该是 <code>1.</code> 这样的；嵌套结束之后，前面的数字应该继续是非嵌套的时候的数字 + 1。</p>
</li>
<li><p>实时预览</p>
<p>在实时预览的时候，当某个地方发生改变的时候，需要将那部分的数据重新解析一下，这个解析数据要考虑速度和正确性。</p>
</li>
<li><p>嵌套</p>
<p>还是嵌套，在 『引用』和『无序列表』的时候，位置的判断稍微比较难处理；还要『居中』和『 Header 』的嵌套等等。</p>
</li>
</ul>
<h2 id="还用到了什么"><a href="#还用到了什么" class="headerlink" title="还用到了什么"></a>还用到了什么</h2><p>在该库中，人生第一次用了的『责任链模式』，虽然写出来的责任链跟书上的有很大的区别，但是为了适应项目嘛，还要『工厂方法模式』、『建造者模式』</p>
<h2 id="接下来做什么"><a href="#接下来做什么" class="headerlink" title="接下来做什么"></a>接下来做什么</h2><ul>
<li>一直在考虑有没有必要将 markdown 的文本转换成 HTML ？</li>
<li>表格该怎么处理?</li>
<li>与 WebView 的形式的对比…</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 扯蛋 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 扯蛋 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ViewDragHelper源码解析]]></title>
      <url>/2016/06/19/viewdraghelper-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 分析版本：support-v4-23.3.0</p>
</blockquote>
<p>ViewDragHelper 封装了许多手势拖动操作，在某些条件下使用 ViewDragHelper 开发可提高效率。</p>
<a id="more"></a>
<h2 id="ViewDragHelper"><a href="#ViewDragHelper" class="headerlink" title="ViewDragHelper"></a>ViewDragHelper</h2><p>大家应该都知道 DrawerLayout 吧，该控件有一个手势操作就是将 Menu 从屏幕边缘位置滑动出来，而这部分的手势操作是交给 ViewDragHelper 去处理的。ViewDragHelper 并不是第一个用于分析手势处理的类，Gesturedetector 也是，但是在和拖动相关的手势分析方面 ViewDragHelper 更胜一筹。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>ViewDragHelper 可以检测到是否触及到边缘</li>
<li>ViewDragHelper 并不是直接作用于要被拖动的 View，而是使其控制的视图容器中的子 View 可以被拖动</li>
<li>ViewDragHelper.Callback 是连接 ViewDragHelper 与 View 之间的桥梁</li>
<li>ViewDragHelper 的本质其实是分析 onInterceptTouchEvent 和 onTouchEvent 的 MotionEvent 参数，然后根据分析的结果去改变一个容器中被拖动子 View 的位置</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VDHLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ViewDragHelper mDragger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VDHLayout</span><span class="params">(Context context, AttributeSet attrs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="comment">//第二个参数就是滑动灵敏度的意思</span></span><br><span class="line">        mDragger = ViewDragHelper.create(<span class="keyword">this</span>, <span class="number">1.0f</span>, <span class="keyword">new</span> ViewDragHelper.Callback()&#123;</span><br><span class="line">            <span class="comment">//这个地方实际上函数返回值为true就代表可以滑动 为false 则不能滑动</span></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这个地方实际上left就代表 你将要移动到的位置的坐标。返回值就是最终确定的移动的位置。</span></span><br><span class="line">            <span class="comment">//我们要让view滑动的范围在我们的layout之内</span></span><br><span class="line">            <span class="comment">//实际上就是判断如果这个坐标在layout之内 那我们就返回这个坐标值。</span></span><br><span class="line">            <span class="comment">//如果这个坐标在layout的边界处 那我们就只能返回边界的坐标给他。不能让他超出这个范围</span></span><br><span class="line">            <span class="comment">//除此之外就是如果你的layout设置了padding的话，也可以让子view的活动范围在padding之内的.</span></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> top;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDragger.shouldInterceptTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span>&#123;</span><br><span class="line">        mDragger.processTouchEvent(event);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>onInterceptTouchEvent</code> 中通过使用 <code>mDragger.shouldInterceptTouchEvent(event)</code> 来决定我们是否应该拦截当前的事件。<code>onTouchEvent</code> 中通过 <code>mDragger.processTouchEvent(event)</code> 处理事件。</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="ViewDragHelper-1"><a href="#ViewDragHelper-1" class="headerlink" title="ViewDragHelper"></a>ViewDragHelper</h3><p>从创建开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewGroup mParentView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Callback mCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mEdgeSize;<span class="comment">//边缘距离，当在边缘的这个距离内算触发边缘</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTouchSlop;<span class="comment">//最小移动距离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mMaxVelocity;<span class="comment">//最大移动速度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mMinVelocity;<span class="comment">//最小移动速度</span></span><br><span class="line">    <span class="keyword">private</span> ScrollerCompat mScroller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Factory method to create a new ViewDragHelper.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> forParent Parent view to monitor</span><br><span class="line">     * <span class="doctag">@param</span> cb Callback to provide information and receive events</span><br><span class="line">     * <span class="doctag">@return</span> a new ViewDragHelper instance</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewDragHelper <span class="title">create</span><span class="params">(ViewGroup forParent, Callback cb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewDragHelper(forParent.getContext(), forParent, cb);</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Factory method to create a new ViewDragHelper.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> forParent Parent view to monitor</span><br><span class="line">     * <span class="doctag">@param</span> sensitivity Multiplier for how sensitive the helper should be about detecting</span><br><span class="line">     *                    the start of a drag. Larger values are more sensitive. 1.0f is normal.</span><br><span class="line">     * <span class="doctag">@param</span> cb Callback to provide information and receive events</span><br><span class="line">     * <span class="doctag">@return</span> a new ViewDragHelper instance</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewDragHelper <span class="title">create</span><span class="params">(ViewGroup forParent, <span class="keyword">float</span> sensitivity, Callback cb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ViewDragHelper helper = create(forParent, cb);</span><br><span class="line">        helper.mTouchSlop = (<span class="keyword">int</span>) (helper.mTouchSlop * (<span class="number">1</span> / sensitivity));</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Apps should use ViewDragHelper.create() to get a new instance.</span><br><span class="line">     * This will allow VDH to use internal compatibility implementations for different</span><br><span class="line">     * platform versions.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> context Context to initialize config-dependent params from</span><br><span class="line">     * <span class="doctag">@param</span> forParent Parent view to monitor</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ViewDragHelper</span><span class="params">(Context context, ViewGroup forParent, Callback cb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (forParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Parent view may not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Callback may not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mParentView = forParent;</span><br><span class="line">        mCallback = cb;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ViewConfiguration vc = ViewConfiguration.get(context);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> density = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        mEdgeSize = (<span class="keyword">int</span>) (EDGE_SIZE * density + <span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">        mTouchSlop = vc.getScaledTouchSlop();</span><br><span class="line">        mMaxVelocity = vc.getScaledMaximumFlingVelocity();</span><br><span class="line">        mMinVelocity = vc.getScaledMinimumFlingVelocity();</span><br><span class="line">        mScroller = ScrollerCompat.create(context, sInterpolator);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Interpolator defining the animation curve for mScroller</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Interpolator sInterpolator = <span class="keyword">new</span> Interpolator() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> t)</span> </span>&#123;</span><br><span class="line">            t -= <span class="number">1.0f</span>;</span><br><span class="line">            <span class="keyword">return</span> t * t * t * t * t + <span class="number">1.0f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个构造函数是私有的，也是仅有的构造函数，所以外部只能通过 <code>create()</code> 工厂方法来创建 ViewDragHelper 实例了。 这里要求了我们传递的自定义 ViewGroup 和回调对象不能为空，否则会直接抛出异常中断程序。在这里也初始化了一些触摸滑动需要的参考值和辅助类。</p>
<ul>
<li>mParentView 和 mCallback 分别保存传递过来的对应参数</li>
<li>ViewConfiguration 类里定义了 View 相关的一系列时间、大小、距离等常量</li>
<li>mEdgeSize 表示边缘触摸的范围。例如 mEdgeSize 为 20dp 并且用户注册监听了左侧边缘触摸时，触摸点的 x 坐标小于 mParentView.getLeft() + mEdgeSize 时（即触摸点在容器左边界往右 20dp 内）就算做是左侧的边缘触摸</li>
<li>mTouchSlop 是一个很小的距离值，只有在前后两次触摸点的距离超过 mTouchSlop 的值时，我们才把这两次触摸算作是『滑动』，我们只在此时进行滑动处理，否则任何微小的距离的变化我们都要处理的话会显得太频繁，如果处理过程又比较复杂耗时就会使界面产生卡顿</li>
<li>mMaxVelocity 、mMinVelocity 是 fling 时的最大、最小速率，单位是像素每秒</li>
<li>mScroller 是 View 滚动的辅助类</li>
<li>还有个 sensitivity ，是用来调节 mTouchSlop 的值。sensitivity 越大，mTouchSlop 越小，对滑动的检测就越敏感。 例如 sensitivity 为 1 时，前后触摸点距离超过 20dp 才进行滑动处理，现在 sensitivity 为 2 的话，前后触摸点距离超过 10dp 就进行处理了</li>
</ul>
<h3 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragHelper</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">     * A Callback is used as a communication channel with the ViewDragHelper back to the</span><br><span class="line">     * parent view using it. &lt;code&gt;on*&lt;/code&gt;methods are invoked on siginficant events and several</span><br><span class="line">     * accessor methods are expected to provide the ViewDragHelper with more information</span><br><span class="line">     * about the state of the parent view upon request. The callback also makes decisions</span><br><span class="line">     * governing the range and draggability of child views.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when the drag state changes. See the &lt;code&gt;STATE_*&lt;/code&gt; constants</span><br><span class="line">         * for more information.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> state The new drag state</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@see</span> #STATE_IDLE</span><br><span class="line">         * <span class="doctag">@see</span> #STATE_DRAGGING</span><br><span class="line">         * <span class="doctag">@see</span> #STATE_SETTLING</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when the captured view's position changes as the result of a drag or settle.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> changedView View whose position changed</span><br><span class="line">         * <span class="doctag">@param</span> left New X coordinate of the left edge of the view</span><br><span class="line">         * <span class="doctag">@param</span> top New Y coordinate of the top edge of the view</span><br><span class="line">         * <span class="doctag">@param</span> dx Change in X position from the last call</span><br><span class="line">         * <span class="doctag">@param</span> dy Change in Y position from the last call</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when a child view is captured for dragging or settling. The ID of the pointer</span><br><span class="line">         * currently dragging the captured view is supplied. If activePointerId is</span><br><span class="line">         * identified as &#123;<span class="doctag">@link</span> #INVALID_POINTER&#125; the capture is programmatic instead of</span><br><span class="line">         * pointer-initiated.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> capturedChild Child view that was captured</span><br><span class="line">         * <span class="doctag">@param</span> activePointerId Pointer id tracking the child capture</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCaptured</span><span class="params">(View capturedChild, <span class="keyword">int</span> activePointerId)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when the child view is no longer being actively dragged.</span><br><span class="line">         * The fling velocity is also supplied, if relevant. The velocity values may</span><br><span class="line">         * be clamped to system minimums or maximums.</span><br><span class="line">         *</span><br><span class="line">         * &lt;p&gt;Calling code may decide to fling or otherwise release the view to let it</span><br><span class="line">         * settle into place. It should do so using &#123;<span class="doctag">@link</span> #settleCapturedViewAt(int, int)&#125;</span><br><span class="line">         * or &#123;<span class="doctag">@link</span> #flingCapturedView(int, int, int, int)&#125;. If the Callback invokes</span><br><span class="line">         * one of these methods, the ViewDragHelper will enter &#123;<span class="doctag">@link</span> #STATE_SETTLING&#125;</span><br><span class="line">         * and the view capture will not fully end until it comes to a complete stop.</span><br><span class="line">         * If neither of these methods is invoked before &lt;code&gt;onViewReleased&lt;/code&gt; returns,</span><br><span class="line">         * the view will stop in place and the ViewDragHelper will return to</span><br><span class="line">         * &#123;<span class="doctag">@link</span> #STATE_IDLE&#125;.&lt;/p&gt;</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> releasedChild The captured child view now being released</span><br><span class="line">         * <span class="doctag">@param</span> xvel X velocity of the pointer as it left the screen in pixels per second.</span><br><span class="line">         * <span class="doctag">@param</span> yvel Y velocity of the pointer as it left the screen in pixels per second.</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when one of the subscribed edges in the parent view has been touched</span><br><span class="line">         * by the user while no child view is currently captured.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> edgeFlags A combination of edge flags describing the edge(s) currently touched</span><br><span class="line">         * <span class="doctag">@param</span> pointerId ID of the pointer touching the described edge(s)</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_LEFT</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_TOP</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_RIGHT</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_BOTTOM</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeTouched</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when the given edge may become locked. This can happen if an edge drag</span><br><span class="line">         * was preliminarily rejected before beginning, but after &#123;<span class="doctag">@link</span> #onEdgeTouched(int, int)&#125;</span><br><span class="line">         * was called. This method should return true to lock this edge or false to leave it</span><br><span class="line">         * unlocked. The default behavior is to leave edges unlocked.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> edgeFlags A combination of edge flags describing the edge(s) locked</span><br><span class="line">         * <span class="doctag">@return</span> true to lock the edge, false to leave it unlocked</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEdgeLock</span><span class="params">(<span class="keyword">int</span> edgeFlags)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when the user has started a deliberate drag away from one</span><br><span class="line">         * of the subscribed edges in the parent view while no child view is currently captured.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> edgeFlags A combination of edge flags describing the edge(s) dragged</span><br><span class="line">         * <span class="doctag">@param</span> pointerId ID of the pointer touching the described edge(s)</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_LEFT</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_TOP</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_RIGHT</span><br><span class="line">         * <span class="doctag">@see</span> #EDGE_BOTTOM</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeDragStarted</span><span class="params">(<span class="keyword">int</span> edgeFlags, <span class="keyword">int</span> pointerId)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called to determine the Z-order of child views.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> index the ordered position to query for</span><br><span class="line">         * <span class="doctag">@return</span> index of the view that should be ordered at position &lt;code&gt;index&lt;/code&gt;</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderedChildIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Return the magnitude of a draggable child view's horizontal range of motion in pixels.</span><br><span class="line">         * This method should return 0 for views that cannot move horizontally.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> child Child view to check</span><br><span class="line">         * <span class="doctag">@return</span> range of horizontal motion in pixels</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Return the magnitude of a draggable child view's vertical range of motion in pixels.</span><br><span class="line">         * This method should return 0 for views that cannot move vertically.</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> child Child view to check</span><br><span class="line">         * <span class="doctag">@return</span> range of vertical motion in pixels</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Called when the user's input indicates that they want to capture the given child view</span><br><span class="line">         * with the pointer indicated by pointerId. The callback should return true if the user</span><br><span class="line">         * is permitted to drag the given view with the indicated pointer.</span><br><span class="line">         *</span><br><span class="line">         * &lt;p&gt;ViewDragHelper may call this method multiple times for the same view even if</span><br><span class="line">         * the view is already captured; this indicates that a new pointer is trying to take</span><br><span class="line">         * control of the view.&lt;/p&gt;</span><br><span class="line">         *</span><br><span class="line">         * &lt;p&gt;If this method returns true, a call to &#123;<span class="doctag">@link</span> #onViewCaptured(android.view.View, int)&#125;</span><br><span class="line">         * will follow if the capture is successful.&lt;/p&gt;</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> child Child the user is attempting to capture</span><br><span class="line">         * <span class="doctag">@param</span> pointerId ID of the pointer attempting the capture</span><br><span class="line">         * <span class="doctag">@return</span> true if capture should be allowed, false otherwise</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Restrict the motion of the dragged child view along the horizontal axis.</span><br><span class="line">         * The default implementation does not allow horizontal motion; the extending</span><br><span class="line">         * class must override this method and provide the desired clamping.</span><br><span class="line">         *</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> child Child view being dragged</span><br><span class="line">         * <span class="doctag">@param</span> left Attempted motion along the X axis</span><br><span class="line">         * <span class="doctag">@param</span> dx Proposed change in position for left</span><br><span class="line">         * <span class="doctag">@return</span> The new clamped position for left</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Restrict the motion of the dragged child view along the vertical axis.</span><br><span class="line">         * The default implementation does not allow vertical motion; the extending</span><br><span class="line">         * class must override this method and provide the desired clamping.</span><br><span class="line">         *</span><br><span class="line">         *</span><br><span class="line">         * <span class="doctag">@param</span> child Child view being dragged</span><br><span class="line">         * <span class="doctag">@param</span> top Attempted motion along the Y axis</span><br><span class="line">         * <span class="doctag">@param</span> dy Proposed change in position for top</span><br><span class="line">         * <span class="doctag">@return</span> The new clamped position for top</span><br><span class="line">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>onViewCaptured</strong>  （当 captureView 被捕获时回调）</li>
<li><strong>tryCaptureView</strong>   （是否需要 capture 这个 View）</li>
<li><strong>clampViewPositionHorizontal</strong> （横向移动的时候回调）</li>
<li><strong>clampViewPositionVertical</strong>  （纵向移动的时候回调）</li>
<li><strong>onViewDragStateChanged</strong>  （当ViewDragHelper状态发生变化时回调（IDLE,DRAGGING,SETTING[自动滚动时]））</li>
<li><strong>onViewPositionChanged</strong>  （当 captureView 的位置发生改变时回调）</li>
<li><strong>onEdgeTouched</strong>  （当触摸到边界时回调）</li>
<li><strong>onEdgeLock</strong>  （true 的时候会锁住当前的边界，false 则 unLock ）</li>
<li><strong>onEdgeDragStarted</strong> （边界拖动开始的时候回调）</li>
<li><strong>getOrderedChildIndex</strong>  （改变同一个坐标（ x , y ）去寻找 captureView 位置的方法）</li>
<li><strong>getViewHorizontalDragRange</strong> （最大横滑动的滑动距离）</li>
<li><strong>getViewVerticalDragRange</strong>  （最大纵向滑动的距离）</li>
<li><strong>onViewReleased</strong>  （当 captureView 被释放的时候回调）</li>
</ul>
<h3 id="shouldInterceptTouchEvent"><a href="#shouldInterceptTouchEvent" class="headerlink" title="shouldInterceptTouchEvent"></a>shouldInterceptTouchEvent</h3><p>在 <code>onInterceptTouchEvent</code> 中的处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragHelper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A null/invalid pointer ID.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INVALID_POINTER = -<span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span><br><span class="line">     * Edge flag indicating that the left edge should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_LEFT = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge flag indicating that the right edge should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_RIGHT = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge flag indicating that the top edge should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_TOP = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge flag indicating that the bottom edge should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_BOTTOM = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge flag set indicating all edges should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_ALL = EDGE_LEFT | EDGE_TOP | EDGE_RIGHT | EDGE_BOTTOM;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A view is not currently being dragged or animating as a result of a fling/snap.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_IDLE = <span class="number">0</span>;<span class="comment">//静止空闲状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A view is currently being dragged. The position is currently changing as a result</span><br><span class="line">     * of user input or simulated user input.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_DRAGGING = <span class="number">1</span>;<span class="comment">//正在被拖动</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * A view is currently settling into place as a result of a fling or</span><br><span class="line">     * predefined non-interactive motion.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_SETTLING = <span class="number">2</span>;<span class="comment">//正在安置状态中（用户并没有交互操作），就是自动滚动的过程中</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mActivePointerId = INVALID_POINTER;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Current drag state; idle, dragging or settling</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDragState;<span class="comment">//当前drag状态</span></span><br><span class="line">    <span class="keyword">private</span> View mCapturedView;<span class="comment">//正在被drag的view</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Last known position/pointer tracking</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mActivePointerId = INVALID_POINTER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mInitialMotionX;<span class="comment">//一开始的X坐标，数组代表多手指的情况，index就是手指id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mInitialMotionY;<span class="comment">//一开始的Y坐标，数组代表多手指的情况，index就是手指id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mLastMotionX;<span class="comment">//随时更新的的X坐标，数组代表多手指的情况，index就是手指id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] mLastMotionY;<span class="comment">//随时更新的的Y坐标，数组代表多手指的情况，index就是手指id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mInitialEdgesTouched;<span class="comment">//刚触摸的时候触摸的边缘位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mEdgeDragsInProgress;<span class="comment">//记录边缘拖动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mEdgeDragsLocked;<span class="comment">//记录锁定的边缘</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPointersDown;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTrackingEdges;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Check if this event as provided to the parent view's onInterceptTouchEvent should</span><br><span class="line">     * cause the parent to intercept the touch event stream.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> ev MotionEvent provided to onInterceptTouchEvent</span><br><span class="line">     * <span class="doctag">@return</span> true if the parent view should return true from onInterceptTouchEvent</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);<span class="comment">//当前action</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(ev);<span class="comment">//当前actionIndex</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">// Reset things for a new event stream, just in case we didn't get</span></span><br><span class="line">            <span class="comment">// the whole previous stream.</span></span><br><span class="line">            cancel();<span class="comment">//归位</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化mVelocityTracker并添加事件</span></span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">        &#125;</span><br><span class="line">        mVelocityTracker.addMovement(ev);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, <span class="number">0</span>);<span class="comment">//手指id</span></span><br><span class="line">                saveInitialMotion(x, y, pointerId);<span class="comment">//保存手指id对应的信息</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);<span class="comment">//找到该坐标上的最上面的那个view</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Catch a settling view if possible.</span></span><br><span class="line">                <span class="keyword">if</span> (toCapture == mCapturedView &amp;&amp; mDragState == STATE_SETTLING) &#123;<span class="comment">//释放后正在进行动画的时候马上又去drag</span></span><br><span class="line">                    tryCaptureViewForDrag(toCapture, pointerId);<span class="comment">//去drag</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];<span class="comment">//得到当前边缘触摸</span></span><br><span class="line">                <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;<span class="comment">//mTrackingEdges为是否开启某边缘的触摸drag</span></span><br><span class="line">                    mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);<span class="comment">//回调</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_DOWN: &#123;<span class="comment">//多手指</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, actionIndex);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, actionIndex);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, actionIndex);</span><br><span class="line"></span><br><span class="line">                saveInitialMotion(x, y, pointerId);<span class="comment">//保存手指id对应的信息</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// A ViewDragHelper can only manipulate one view at a time.</span></span><br><span class="line">                <span class="keyword">if</span> (mDragState == STATE_IDLE) &#123;<span class="comment">//如果当前状态是STATE_IDLE</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];<span class="comment">//得到当前边缘触摸</span></span><br><span class="line">                    <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;<span class="comment">//边缘是否能够滑动</span></span><br><span class="line">                        mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDragState == STATE_SETTLING) &#123;<span class="comment">//手指放开，返回的状态</span></span><br><span class="line">                    <span class="comment">// Catch a settling view if possible.</span></span><br><span class="line">                    <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</span><br><span class="line">                    <span class="keyword">if</span> (toCapture == mCapturedView) &#123;</span><br><span class="line">                        tryCaptureViewForDrag(toCapture, pointerId);<span class="comment">//去drag</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">                <span class="keyword">if</span> (mInitialMotionX == <span class="keyword">null</span> || mInitialMotionY == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// First to cross a touch slop over a draggable view wins. Also report edge drags.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = MotionEventCompat.getPointerCount(ev);<span class="comment">//得到当前手指个数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, i);<span class="comment">//得到id</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// If pointer is invalid then skip the ACTION_MOVE.</span></span><br><span class="line">                    <span class="keyword">if</span> (!isValidPointerForActionMove(pointerId)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, i);<span class="comment">//得到X</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, i);<span class="comment">//得到Y</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> dx = x - mInitialMotionX[pointerId];<span class="comment">//算出移动的X方向距离</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> dy = y - mInitialMotionY[pointerId];<span class="comment">//算出移动的Y方向距离</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> pastSlop = toCapture != <span class="keyword">null</span> &amp;&amp; checkTouchSlop(toCapture, dx, dy);<span class="comment">//是否可以滑动</span></span><br><span class="line">                    <span class="keyword">if</span> (pastSlop) &#123;</span><br><span class="line">                        <span class="comment">// check the callback's</span></span><br><span class="line">                        <span class="comment">// getView[Horizontal|Vertical]DragRange methods to know</span></span><br><span class="line">                        <span class="comment">// if you can move at all along an axis, then see if it</span></span><br><span class="line">                        <span class="comment">// would clamp to the same value. If you can't move at</span></span><br><span class="line">                        <span class="comment">// all in every dimension with a nonzero range, bail.</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> oldLeft = toCapture.getLeft();</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> targetLeft = oldLeft + (<span class="keyword">int</span>) dx;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> newLeft = mCallback.clampViewPositionHorizontal(toCapture,</span><br><span class="line">                                targetLeft, (<span class="keyword">int</span>) dx);<span class="comment">//通过回调得到新的left的值</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> oldTop = toCapture.getTop();</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> targetTop = oldTop + (<span class="keyword">int</span>) dy;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> newTop = mCallback.clampViewPositionVertical(toCapture, targetTop,<span class="comment">//通过回调得到新的top的值</span></span><br><span class="line">                                (<span class="keyword">int</span>) dy);</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> horizontalDragRange = mCallback.getViewHorizontalDragRange(</span><br><span class="line">                                toCapture);<span class="comment">//通过回调得到横向拖动的范围</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> verticalDragRange = mCallback.getViewVerticalDragRange(toCapture);<span class="comment">//通过回调得到纵向拖动的范围</span></span><br><span class="line">                        <span class="keyword">if</span> ((horizontalDragRange == <span class="number">0</span> || horizontalDragRange &gt; <span class="number">0</span></span><br><span class="line">                                &amp;&amp; newLeft == oldLeft) &amp;&amp; (verticalDragRange == <span class="number">0</span></span><br><span class="line">                                || verticalDragRange &gt; <span class="number">0</span> &amp;&amp; newTop == oldTop)) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    reportNewEdgeDrags(dx, dy, pointerId);<span class="comment">//经过计算之后回调结果出去</span></span><br><span class="line">                    <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</span><br><span class="line">                        <span class="comment">// Callback might have started an edge drag</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (pastSlop &amp;&amp; tryCaptureViewForDrag(toCapture, pointerId)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                saveLastMotion(ev);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP: &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, actionIndex);</span><br><span class="line">                clearMotionHistory(pointerId);<span class="comment">//清除数据</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL: &#123;</span><br><span class="line">                cancel();<span class="comment">//清除数据</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mDragState == STATE_DRAGGING;<span class="comment">//如果是dragging状态，就拦截手势事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The result of a call to this method is equivalent to</span><br><span class="line">     * &#123;<span class="doctag">@link</span> #processTouchEvent(android.view.MotionEvent)&#125; receiving an ACTION_CANCEL event.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mActivePointerId = INVALID_POINTER;</span><br><span class="line">        clearMotionHistory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker.recycle();</span><br><span class="line">            mVelocityTracker = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearMotionHistory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInitialMotionX == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.fill(mInitialMotionX, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(mInitialMotionY, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(mLastMotionX, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(mLastMotionY, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(mInitialEdgesTouched, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(mEdgeDragsInProgress, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(mEdgeDragsLocked, <span class="number">0</span>);</span><br><span class="line">        mPointersDown = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveInitialMotion</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">        ensureMotionHistorySizeForId(pointerId);</span><br><span class="line">        mInitialMotionX[pointerId] = mLastMotionX[pointerId] = x;<span class="comment">//赋最开始的值</span></span><br><span class="line">        mInitialMotionY[pointerId] = mLastMotionY[pointerId] = y;<span class="comment">//赋最开始的值</span></span><br><span class="line">        mInitialEdgesTouched[pointerId] = getEdgesTouched((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);<span class="comment">//赋值边缘值</span></span><br><span class="line">        mPointersDown |= <span class="number">1</span> &lt;&lt; pointerId;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureMotionHistorySizeForId</span><span class="params">(<span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInitialMotionX == <span class="keyword">null</span> || mInitialMotionX.length &lt;= pointerId) &#123;</span><br><span class="line">            <span class="keyword">float</span>[] imx = <span class="keyword">new</span> <span class="keyword">float</span>[pointerId + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">float</span>[] imy = <span class="keyword">new</span> <span class="keyword">float</span>[pointerId + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">float</span>[] lmx = <span class="keyword">new</span> <span class="keyword">float</span>[pointerId + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">float</span>[] lmy = <span class="keyword">new</span> <span class="keyword">float</span>[pointerId + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span>[] iit = <span class="keyword">new</span> <span class="keyword">int</span>[pointerId + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span>[] edip = <span class="keyword">new</span> <span class="keyword">int</span>[pointerId + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span>[] edl = <span class="keyword">new</span> <span class="keyword">int</span>[pointerId + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mInitialMotionX != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.arraycopy(mInitialMotionX, <span class="number">0</span>, imx, <span class="number">0</span>, mInitialMotionX.length);</span><br><span class="line">                System.arraycopy(mInitialMotionY, <span class="number">0</span>, imy, <span class="number">0</span>, mInitialMotionY.length);</span><br><span class="line">                System.arraycopy(mLastMotionX, <span class="number">0</span>, lmx, <span class="number">0</span>, mLastMotionX.length);</span><br><span class="line">                System.arraycopy(mLastMotionY, <span class="number">0</span>, lmy, <span class="number">0</span>, mLastMotionY.length);</span><br><span class="line">                System.arraycopy(mInitialEdgesTouched, <span class="number">0</span>, iit, <span class="number">0</span>, mInitialEdgesTouched.length);</span><br><span class="line">                System.arraycopy(mEdgeDragsInProgress, <span class="number">0</span>, edip, <span class="number">0</span>, mEdgeDragsInProgress.length);</span><br><span class="line">                System.arraycopy(mEdgeDragsLocked, <span class="number">0</span>, edl, <span class="number">0</span>, mEdgeDragsLocked.length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mInitialMotionX = imx;</span><br><span class="line">            mInitialMotionY = imy;</span><br><span class="line">            mLastMotionX = lmx;</span><br><span class="line">            mLastMotionY = lmy;</span><br><span class="line">            mInitialEdgesTouched = iit;</span><br><span class="line">            mEdgeDragsInProgress = edip;</span><br><span class="line">            mEdgeDragsLocked = edl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断是否在边缘，且返回是哪里的边缘</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getEdgesTouched</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; mParentView.getLeft() + mEdgeSize) result |= EDGE_LEFT;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; mParentView.getTop() + mEdgeSize) result |= EDGE_TOP;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mParentView.getRight() - mEdgeSize) result |= EDGE_RIGHT;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; mParentView.getBottom() - mEdgeSize) result |= EDGE_BOTTOM;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Find the topmost child under the given point within the parent view's coordinate system.</span><br><span class="line">     * The child order is determined using &#123;<span class="doctag">@link</span> Callback#getOrderedChildIndex(int)&#125;.</span><br><span class="line">     * 找到该坐标上的最上面的那个view</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> x X position to test in the parent's coordinate system</span><br><span class="line">     * <span class="doctag">@param</span> y Y position to test in the parent's coordinate system</span><br><span class="line">     * <span class="doctag">@return</span> The topmost child view under (x, y) or null if none found.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">findTopChildUnder</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = mParentView.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = mParentView.getChildAt(mCallback.getOrderedChildIndex(i));</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= child.getLeft() &amp;&amp; x &lt; child.getRight() &amp;&amp;</span><br><span class="line">                    y &gt;= child.getTop() &amp;&amp; y &lt; child.getBottom()) &#123;</span><br><span class="line">                <span class="keyword">return</span> child;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Attempt to capture the view with the given pointer ID. The callback will be involved.</span><br><span class="line">     * This will put us into the "dragging" state. If we've already captured this view with</span><br><span class="line">     * this pointer this method will immediately return true without consulting the callback.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> toCapture View to capture</span><br><span class="line">     * <span class="doctag">@param</span> pointerId Pointer to capture with</span><br><span class="line">     * <span class="doctag">@return</span> true if capture was successful</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryCaptureViewForDrag</span><span class="params">(View toCapture, <span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (toCapture == mCapturedView &amp;&amp; mActivePointerId == pointerId) &#123;<span class="comment">//当前有正在被drag的View且是同一个且还是同一个手指</span></span><br><span class="line">            <span class="comment">// Already done!</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (toCapture != <span class="keyword">null</span> &amp;&amp; mCallback.tryCaptureView(toCapture, pointerId)) &#123;<span class="comment">//回调返回TRUE，表示要drag这个toCapture这个View</span></span><br><span class="line">            mActivePointerId = pointerId;</span><br><span class="line">            captureChildView(toCapture, pointerId);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Capture a specific child view for dragging within the parent. The callback will be notified</span><br><span class="line">     * but &#123;<span class="doctag">@link</span> Callback#tryCaptureView(android.view.View, int)&#125; will not be asked permission to</span><br><span class="line">     * capture this view.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> childView Child view to capture</span><br><span class="line">     * <span class="doctag">@param</span> activePointerId ID of the pointer that is dragging the captured child view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureChildView</span><span class="params">(View childView, <span class="keyword">int</span> activePointerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (childView.getParent() != mParentView) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"captureChildView: parameter must be a descendant "</span> +</span><br><span class="line">                    <span class="string">"of the ViewDragHelper's tracked parent view ("</span> + mParentView + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mCapturedView = childView;<span class="comment">//记录mCaptureView</span></span><br><span class="line">        mActivePointerId = activePointerId;<span class="comment">//记录手指id</span></span><br><span class="line">        mCallback.onViewCaptured(childView, activePointerId);<span class="comment">//回调</span></span><br><span class="line">        setDragState(STATE_DRAGGING);<span class="comment">//设置drag状态</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDragState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        mParentView.removeCallbacks(mSetIdleRunnable);</span><br><span class="line">        <span class="keyword">if</span> (mDragState != state) &#123;</span><br><span class="line">            mDragState = state;<span class="comment">//设置新的状态</span></span><br><span class="line">            mCallback.onViewDragStateChanged(state);<span class="comment">//回调</span></span><br><span class="line">            <span class="keyword">if</span> (mDragState == STATE_IDLE) &#123;</span><br><span class="line">                mCapturedView = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable mSetIdleRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            setDragState(STATE_IDLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValidPointerForActionMove</span><span class="params">(<span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPointerDown(pointerId)) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Ignoring pointerId="</span> + pointerId + <span class="string">" because ACTION_DOWN was not received "</span></span><br><span class="line">                    + <span class="string">"for this pointer before ACTION_MOVE. It likely happened because "</span></span><br><span class="line">                    + <span class="string">" ViewDragHelper did not receive all the events in the event stream."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPointerDown</span><span class="params">(<span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (mPointersDown &amp; <span class="number">1</span> &lt;&lt; pointerId) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Check if we've crossed a reasonable touch slop for the given child view.</span><br><span class="line">     * If the child cannot be dragged along the horizontal or vertical axis, motion</span><br><span class="line">     * along that axis will not count toward the slop check.</span><br><span class="line">     * 检查手指移动的距离有没有超过触发处理移动事件的最短距离</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@param</span> child Child to check</span><br><span class="line">     * <span class="doctag">@param</span> dx Motion since initial position along X axis</span><br><span class="line">     * <span class="doctag">@param</span> dy Motion since initial position along Y axis</span><br><span class="line">     * <span class="doctag">@return</span> true if the touch slop has been crossed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkTouchSlop</span><span class="params">(View child, <span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> checkHorizontal = mCallback.getViewHorizontalDragRange(child) &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> checkVertical = mCallback.getViewVerticalDragRange(child) &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (checkHorizontal &amp;&amp; checkVertical) &#123;</span><br><span class="line">            <span class="keyword">return</span> dx * dx + dy * dy &gt; mTouchSlop * mTouchSlop;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkHorizontal) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(dx) &gt; mTouchSlop;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkVertical) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(dy) &gt; mTouchSlop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 对四个边缘都做了一次检查，检查是否在某些边缘产生拖动了，如果有拖动，就将有拖动的边缘记录在mEdgeDragsInProgress中，再调用Callback的onEdgeDragStarted(int edgeFlags, int pointerId)通知某个边缘开始产生拖动了。虽然reportNewEdgeDrags()会被调用很多次</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportNewEdgeDrags</span><span class="params">(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy, <span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dragsStarted = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (checkNewEdgeDrag(dx, dy, pointerId, EDGE_LEFT)) &#123;</span><br><span class="line">            dragsStarted |= EDGE_LEFT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkNewEdgeDrag(dy, dx, pointerId, EDGE_TOP)) &#123;</span><br><span class="line">            dragsStarted |= EDGE_TOP;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkNewEdgeDrag(dx, dy, pointerId, EDGE_RIGHT)) &#123;</span><br><span class="line">            dragsStarted |= EDGE_RIGHT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (checkNewEdgeDrag(dy, dx, pointerId, EDGE_BOTTOM)) &#123;</span><br><span class="line">            dragsStarted |= EDGE_BOTTOM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dragsStarted != <span class="number">0</span>) &#123;</span><br><span class="line">            mEdgeDragsInProgress[pointerId] |= dragsStarted;</span><br><span class="line">            mCallback.onEdgeDragStarted(dragsStarted, pointerId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 返回true表示在指定的边缘开始产生拖动了</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkNewEdgeDrag</span><span class="params">(<span class="keyword">float</span> delta, <span class="keyword">float</span> odelta, <span class="keyword">int</span> pointerId, <span class="keyword">int</span> edge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> absDelta = Math.abs(delta);<span class="comment">//主要监测的方向上的变化</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> absODelta = Math.abs(odelta);<span class="comment">//另外一个方向上的变化</span></span><br><span class="line">      </span><br><span class="line">      	<span class="comment">//1.如果ACTION_DOWN发生时没有触摸到边缘，或者触摸到的边缘不是指定的edge，就直接返回false</span></span><br><span class="line">      	<span class="comment">//2.mTrackingEdges是由setEdgeTrackingEnabled(int edgeFlags)设置的</span></span><br><span class="line">      	<span class="comment">//3.锁定的边缘</span></span><br><span class="line">		<span class="comment">//4.mEdgeDragsInProgress是保存已发生过拖动事件的边缘的</span></span><br><span class="line">        <span class="comment">//5.检查本次移动的距离是不是太小了，太小就不处理了</span></span><br><span class="line">        <span class="keyword">if</span> ((mInitialEdgesTouched[pointerId] &amp; edge) != edge  || (mTrackingEdges &amp; edge) == <span class="number">0</span> ||</span><br><span class="line">                (mEdgeDragsLocked[pointerId] &amp; edge) == edge ||</span><br><span class="line">                (mEdgeDragsInProgress[pointerId] &amp; edge) == edge ||</span><br><span class="line">                (absDelta &lt;= mTouchSlop &amp;&amp; absODelta &lt;= mTouchSlop)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (absDelta &lt; absODelta * <span class="number">0.5f</span> &amp;&amp; mCallback.onEdgeLock(edge)) &#123;<span class="comment">//次要方向上移动的距离是否远超过主要方向上移动的距离</span></span><br><span class="line">            mEdgeDragsLocked[pointerId] |= edge;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (mEdgeDragsInProgress[pointerId] &amp; edge) == <span class="number">0</span> &amp;&amp; absDelta &gt; mTouchSlop;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveLastMotion</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = MotionEventCompat.getPointerCount(ev);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, i);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, i);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, i);</span><br><span class="line">            mLastMotionX[pointerId] = x;</span><br><span class="line">            mLastMotionY[pointerId] = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>findTopChildUnder()</code> 方法是获得 View，如果在同一个位置有两个子 View 重叠，想要让下层的子 View 被选中， 那么就要实现 Callback 里的 <code>getOrderedChildIndex(int index)</code> 方法来改变查找子View的顺序；例如 topView（ 上层View ）的 index 是 4， bottomView（下层View）的 index 是 3，按照正常的遍历查找方式（ getOrderedChildIndex() 默认直接返回 index ），会选择到 topView ， 要想让 bottomView 被选中就得这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderedChildIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> indexTop = mParentView.indexOfChild(topView);</span><br><span class="line">    <span class="keyword">int</span> indexBottom = mParentView.indexOfChild(bottomView);</span><br><span class="line">    <span class="keyword">if</span> (index == indexTop) &#123;</span><br><span class="line">        <span class="keyword">return</span> indexBottom;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>shouldInterceptTouchEvent()</code> 方法中，一开始进入的是 <code>ACTION_DOWN</code> ，mCapturedView 默认为 null ，所以一开始会进到 <code>tryCaptureViewForDrag()</code> 里面，当条件 <code>tryCaptureView()</code> 满足的时候会回调 <code>onViewCaptured()</code> 出去，同时设置状态为 <code>STATE_DRAGGING</code> ，之后再回调 <code>onEdgeTouched()</code> 。<code>ACTION_DOWN</code> 部分处理完了，跳过 switch 语句块，剩下的代码就只有 <code>return mDragState == STATE_DRAGGING;</code> ，此时如果状态为 dragging 的话，就反会的 true ，那么表示手势事件被拦截了；在 <code>ACTION_DOWN</code> 部分没有对 mDragState 进行赋值，其默认值为 <code>STATE_IDLE</code> ，所以此处返回 false ，此时会将手势事件传递给子 View 。如果子 View 没有消耗手势事件，那么会进到 <code>ViewDragHelper#processTouchEvent()</code> 中；如果子 View 消耗了手势事件，那么父 View 的 <code>onTouchEvent()</code> 收不到 <code>ACTION_DOWN</code>  事件，<strong>不过只要子 View 没有调用过 <code>requestDisallowInterceptTouchEvent(true)</code>，父 View 的 <code>onInterceptTouchEvent()</code> 的 <code>ACTION_MOVE</code> 部分还是会执行的， 如果在此时返回了 true 拦截了<code>ACTION_MOVE</code> 事件，<code>processTouchEvent()</code> 里的 <code>ACTION_MOVE</code> 部分也就会正常执行，拖动也就没问题了。</strong></p>
<p>如果有多个手指触摸到屏幕上了，对每个触摸点都检查一下，看当前触摸的地方是否需要捕获某个 View。这里先用 <code>findTopChildUnder(int x, int y)</code> 寻找触摸点处的子 View，再用 <code>checkTouchSlop(View child, float dx, float dy)</code> 检查当前触摸点到 <code>ACTION_DOWN</code> 触摸点的距离是否达到了 mTouchSlop，达到了才会去捕获 View。</p>
<h3 id="processTouchEvent"><a href="#processTouchEvent" class="headerlink" title="processTouchEvent"></a>processTouchEvent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Process a touch event received by the parent view. This method will dispatch callback events</span><br><span class="line">     * as needed before returning. The parent view's onTouchEvent implementation should call this.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> ev The touch event received by the parent view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(ev);<span class="comment">//当前action</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionIndex = MotionEventCompat.getActionIndex(ev);<span class="comment">//当前actionIndex</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">// Reset things for a new event stream, just in case we didn't get</span></span><br><span class="line">            <span class="comment">// the whole previous stream.</span></span><br><span class="line">            cancel();<span class="comment">//归位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化mVelocityTracker并添加事件</span></span><br><span class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">        &#125;</span><br><span class="line">        mVelocityTracker.addMovement(ev);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY();</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, <span class="number">0</span>);<span class="comment">//手指id</span></span><br><span class="line">                <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</span><br><span class="line"></span><br><span class="line">                saveInitialMotion(x, y, pointerId);<span class="comment">//保存手指id对应的信息</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Since the parent is already directly processing this touch event,</span></span><br><span class="line">                <span class="comment">// there is no reason to delay for a slop before dragging.</span></span><br><span class="line">                <span class="comment">// Start immediately if possible.</span></span><br><span class="line">                tryCaptureViewForDrag(toCapture, pointerId);<span class="comment">//去drag</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];<span class="comment">//得到当前边缘触摸</span></span><br><span class="line">                <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;<span class="comment">//mTrackingEdges为是否开启某边缘的触摸drag</span></span><br><span class="line">                    mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);<span class="comment">//回调</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_DOWN: &#123;<span class="comment">//多手指</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, actionIndex);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, actionIndex);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, actionIndex);</span><br><span class="line"></span><br><span class="line">                saveInitialMotion(x, y, pointerId);;<span class="comment">//保存手指id对应的信息</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// A ViewDragHelper can only manipulate one view at a time.</span></span><br><span class="line">                <span class="keyword">if</span> (mDragState == STATE_IDLE) &#123;</span><br><span class="line">                    <span class="comment">// If we're idle we can do anything! Treat it like a normal down event.</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);<span class="comment">//找到View</span></span><br><span class="line">                    tryCaptureViewForDrag(toCapture, pointerId);<span class="comment">//回调</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> edgesTouched = mInitialEdgesTouched[pointerId];<span class="comment">//得到边缘</span></span><br><span class="line">                    <span class="keyword">if</span> ((edgesTouched &amp; mTrackingEdges) != <span class="number">0</span>) &#123;<span class="comment">//是否能够触发边缘drag</span></span><br><span class="line">                        mCallback.onEdgeTouched(edgesTouched &amp; mTrackingEdges, pointerId);<span class="comment">//回调</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCapturedViewUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y)) &#123;</span><br><span class="line">                    <span class="comment">// We're still tracking a captured view. If the same view is under this</span></span><br><span class="line">                    <span class="comment">// point, we'll swap to controlling it with this pointer instead.</span></span><br><span class="line">                    <span class="comment">// (This will still work if we're "catching" a settling view.)</span></span><br><span class="line"></span><br><span class="line">                    tryCaptureViewForDrag(mCapturedView, pointerId);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;<span class="comment">//正在拖动</span></span><br><span class="line">                    <span class="comment">// If pointer is invalid then skip the ACTION_MOVE.</span></span><br><span class="line">                    <span class="keyword">if</span> (!isValidPointerForActionMove(mActivePointerId)) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, index);<span class="comment">//得到X</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, index);<span class="comment">//得到Y</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> idx = (<span class="keyword">int</span>) (x - mLastMotionX[mActivePointerId]);<span class="comment">//算出移动的X方向距离</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> idy = (<span class="keyword">int</span>) (y - mLastMotionY[mActivePointerId]);<span class="comment">//算出移动的Y方向距离</span></span><br><span class="line"></span><br><span class="line">                    dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);<span class="comment">//移动</span></span><br><span class="line"></span><br><span class="line">                    saveLastMotion(ev);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Check to see if any pointer is now over a draggable view.</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = MotionEventCompat.getPointerCount(ev);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, i);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// If pointer is invalid then skip the ACTION_MOVE.</span></span><br><span class="line">                        <span class="keyword">if</span> (!isValidPointerForActionMove(pointerId)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, i);</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, i);</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> dx = x - mInitialMotionX[pointerId];</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> dy = y - mInitialMotionY[pointerId];</span><br><span class="line"></span><br><span class="line">                        reportNewEdgeDrags(dx, dy, pointerId);<span class="comment">//经过计算之后回调结果出去</span></span><br><span class="line">                        <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</span><br><span class="line">                            <span class="comment">// Callback might have started an edge drag.</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> View toCapture = findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y);</span><br><span class="line">                        <span class="keyword">if</span> (checkTouchSlop(toCapture, dx, dy) &amp;&amp;</span><br><span class="line">                                tryCaptureViewForDrag(toCapture, pointerId)) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    saveLastMotion(ev);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEventCompat.ACTION_POINTER_UP: &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> pointerId = MotionEventCompat.getPointerId(ev, actionIndex);</span><br><span class="line">                <span class="keyword">if</span> (mDragState == STATE_DRAGGING &amp;&amp; pointerId == mActivePointerId) &#123;</span><br><span class="line">                    <span class="comment">// Try to find another pointer that's still holding on to the captured view.</span></span><br><span class="line">                    <span class="keyword">int</span> newActivePointer = INVALID_POINTER;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> pointerCount = MotionEventCompat.getPointerCount(ev);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointerCount; i++) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> id = MotionEventCompat.getPointerId(ev, i);</span><br><span class="line">                        <span class="keyword">if</span> (id == mActivePointerId) &#123;</span><br><span class="line">                            <span class="comment">// This one's going away, skip.</span></span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(ev, i);</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(ev, i);</span><br><span class="line">                        <span class="keyword">if</span> (findTopChildUnder((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y) == mCapturedView &amp;&amp;</span><br><span class="line">                                tryCaptureViewForDrag(mCapturedView, id)) &#123;</span><br><span class="line">                            newActivePointer = mActivePointerId;<span class="comment">//更新手指id</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (newActivePointer == INVALID_POINTER) &#123;</span><br><span class="line">                        <span class="comment">// We didn't find another pointer still touching the view, release it.</span></span><br><span class="line">                        releaseViewForPointerUp();<span class="comment">//释放</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                clearMotionHistory(pointerId);<span class="comment">//清除数据</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</span><br><span class="line">                    releaseViewForPointerUp();<span class="comment">//释放</span></span><br><span class="line">                &#125;</span><br><span class="line">                cancel();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL: &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</span><br><span class="line">                    dispatchViewReleased(<span class="number">0</span>, <span class="number">0</span>);<span class="comment">//释放</span></span><br><span class="line">                &#125;</span><br><span class="line">                cancel();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dragTo</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;、、参数dx和dy是前后两次ACTION_MOVE移动的距离</span><br><span class="line">        <span class="keyword">int</span> clampedX = left;</span><br><span class="line">        <span class="keyword">int</span> clampedY = top;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldLeft = mCapturedView.getLeft();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> oldTop = mCapturedView.getTop();</span><br><span class="line">        <span class="keyword">if</span> (dx != <span class="number">0</span>) &#123;</span><br><span class="line">            clampedX = mCallback.clampViewPositionHorizontal(mCapturedView, left, dx);<span class="comment">//回调</span></span><br><span class="line">            ViewCompat.offsetLeftAndRight(mCapturedView, clampedX - oldLeft);<span class="comment">//移动</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dy != <span class="number">0</span>) &#123;</span><br><span class="line">            clampedY = mCallback.clampViewPositionVertical(mCapturedView, top, dy);<span class="comment">//回调</span></span><br><span class="line">            ViewCompat.offsetTopAndBottom(mCapturedView, clampedY - oldTop);<span class="comment">//移动</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dx != <span class="number">0</span> || dy != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> clampedDx = clampedX - oldLeft;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> clampedDy = clampedY - oldTop;</span><br><span class="line">            mCallback.onViewPositionChanged(mCapturedView, clampedX, clampedY,</span><br><span class="line">                    clampedDx, clampedDy);<span class="comment">//回调</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">releaseViewForPointerUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>, mMaxVelocity);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> xvel = clampMag(</span><br><span class="line">                VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),</span><br><span class="line">                mMinVelocity, mMaxVelocity);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> yvel = clampMag(</span><br><span class="line">                VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),</span><br><span class="line">                mMinVelocity, mMaxVelocity);</span><br><span class="line">        dispatchViewReleased(xvel, yvel);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Clamp the magnitude of value for absMin and absMax.</span><br><span class="line">     * If the value is below the minimum, it will be clamped to zero.</span><br><span class="line">     * If the value is above the maximum, it will be clamped to the maximum.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> value Value to clamp</span><br><span class="line">     * <span class="doctag">@param</span> absMin Absolute value of the minimum significant value to return</span><br><span class="line">     * <span class="doctag">@param</span> absMax Absolute value of the maximum value to return</span><br><span class="line">     * <span class="doctag">@return</span> The clamped value with the same sign as &lt;code&gt;value&lt;/code&gt;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">clampMag</span><span class="params">(<span class="keyword">float</span> value, <span class="keyword">float</span> absMin, <span class="keyword">float</span> absMax)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> absValue = Math.abs(value);</span><br><span class="line">        <span class="keyword">if</span> (absValue &lt; absMin) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (absValue &gt; absMax) <span class="keyword">return</span> value &gt; <span class="number">0</span> ? absMax : -absMax;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Like all callback events this must happen on the UI thread, but release</span><br><span class="line">     * involves some extra semantics. During a release (mReleaseInProgress)</span><br><span class="line">     * is the only time it is valid to call &#123;<span class="doctag">@link</span> #settleCapturedViewAt(int, int)&#125;</span><br><span class="line">     * or &#123;<span class="doctag">@link</span> #flingCapturedView(int, int, int, int)&#125;.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchViewReleased</span><span class="params">(<span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</span><br><span class="line">        mReleaseInProgress = <span class="keyword">true</span>;</span><br><span class="line">        mCallback.onViewReleased(mCapturedView, xvel, yvel);</span><br><span class="line">        mReleaseInProgress = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mDragState == STATE_DRAGGING) &#123;</span><br><span class="line">            <span class="comment">// onViewReleased didn't call a method that would have changed this. Go idle.</span></span><br><span class="line">            setDragState(STATE_IDLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ACTION_DOWN</code> 与 <code>shouldInterceptTouchEvent</code> 中的差不多。当进入到 <code>ACTION_MOVE</code> 的时候，先判断 mDragState 是否为 <code>STATE_DRAGGING</code> ，而唯一调用 <code>setDragState(STATE_DRAGGING)</code> 的地方就是 <code>tryCaptureViewForDrag()</code> 了， 刚才在 <code>ACTION_DOWN</code> 里调用过 <code>tryCaptureViewForDrag()</code> 。当为 <code>STATE_DRAGGING</code> 的时候，开始不停的调用 <code>dragTo()</code> 对 mCaptureView 进行真正拖动了。而 <code>dragTo()</code> 通过调用 <code>offsetLeftAndRight()</code> 和 <code>offsetTopAndBottom()</code> 来完成对 mCapturedView 移动。在 <code>dispatchViewReleased()</code> 的注释里面有介绍了两个方法，<code>settleCapturedViewAt(int, int)</code> 和 <code>flingCapturedView(int, int, int, int)</code> ：</p>
<h3 id="settleCapturedViewAt-amp-amp-flingCapturedView"><a href="#settleCapturedViewAt-amp-amp-flingCapturedView" class="headerlink" title="settleCapturedViewAt &amp;&amp; flingCapturedView"></a>settleCapturedViewAt &amp;&amp; flingCapturedView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragHelper</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Settle the captured view at the given (left, top) position.</span><br><span class="line">     * The appropriate velocity from prior motion will be taken into account.</span><br><span class="line">     * If this method returns true, the caller should invoke &#123;<span class="doctag">@link</span> #continueSettling(boolean)&#125;</span><br><span class="line">     * on each subsequent frame to continue the motion until it returns false. If this method</span><br><span class="line">     * returns false there is no further work to do to complete the movement.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> finalLeft Settled left edge position for the captured view</span><br><span class="line">     * <span class="doctag">@param</span> finalTop Settled top edge position for the captured view</span><br><span class="line">     * <span class="doctag">@return</span> true if animation should continue through &#123;<span class="doctag">@link</span> #continueSettling(boolean)&#125; calls</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">settleCapturedViewAt</span><span class="params">(<span class="keyword">int</span> finalLeft, <span class="keyword">int</span> finalTop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mReleaseInProgress) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot settleCapturedViewAt outside of a call to "</span> +</span><br><span class="line">                    <span class="string">"Callback#onViewReleased"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> forceSettleCapturedViewAt(finalLeft, finalTop,</span><br><span class="line">                (<span class="keyword">int</span>) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),</span><br><span class="line">                (<span class="keyword">int</span>) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Settle the captured view at the given (left, top) position.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> finalLeft Target left position for the captured view</span><br><span class="line">     * <span class="doctag">@param</span> finalTop Target top position for the captured view</span><br><span class="line">     * <span class="doctag">@param</span> xvel Horizontal velocity</span><br><span class="line">     * <span class="doctag">@param</span> yvel Vertical velocity</span><br><span class="line">     * <span class="doctag">@return</span> true if animation should continue through &#123;<span class="doctag">@link</span> #continueSettling(boolean)&#125; calls</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">forceSettleCapturedViewAt</span><span class="params">(<span class="keyword">int</span> finalLeft, <span class="keyword">int</span> finalTop, <span class="keyword">int</span> xvel, <span class="keyword">int</span> yvel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> startLeft = mCapturedView.getLeft();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> startTop = mCapturedView.getTop();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> dx = finalLeft - startLeft;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> dy = finalTop - startTop;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Nothing to do. Send callbacks, be done.</span></span><br><span class="line">            mScroller.abortAnimation();</span><br><span class="line">            setDragState(STATE_IDLE);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> duration = computeSettleDuration(mCapturedView, dx, dy, xvel, yvel);</span><br><span class="line">        mScroller.startScroll(startLeft, startTop, dx, dy, duration);<span class="comment">//靠Scroll类完成</span></span><br><span class="line"></span><br><span class="line">        setDragState(STATE_SETTLING);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">computeSettleDuration</span><span class="params">(View child, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span> xvel, <span class="keyword">int</span> yvel)</span> </span>&#123;</span><br><span class="line">        xvel = clampMag(xvel, (<span class="keyword">int</span>) mMinVelocity, (<span class="keyword">int</span>) mMaxVelocity);</span><br><span class="line">        yvel = clampMag(yvel, (<span class="keyword">int</span>) mMinVelocity, (<span class="keyword">int</span>) mMaxVelocity);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> absDx = Math.abs(dx);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> absDy = Math.abs(dy);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> absXVel = Math.abs(xvel);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> absYVel = Math.abs(yvel);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> addedVel = absXVel + absYVel;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> addedDistance = absDx + absDy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> xweight = xvel != <span class="number">0</span> ? (<span class="keyword">float</span>) absXVel / addedVel :</span><br><span class="line">                (<span class="keyword">float</span>) absDx / addedDistance;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> yweight = yvel != <span class="number">0</span> ? (<span class="keyword">float</span>) absYVel / addedVel :</span><br><span class="line">                (<span class="keyword">float</span>) absDy / addedDistance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> xduration = computeAxisDuration(dx, xvel, mCallback.getViewHorizontalDragRange(child));</span><br><span class="line">        <span class="keyword">int</span> yduration = computeAxisDuration(dy, yvel, mCallback.getViewVerticalDragRange(child));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (xduration * xweight + yduration * yweight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">computeAxisDuration</span><span class="params">(<span class="keyword">int</span> delta, <span class="keyword">int</span> velocity, <span class="keyword">int</span> motionRange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果给定的速率velocity不为0，就通过距离除以速率来算出时间</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = mParentView.getWidth();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> distanceRatio = Math.min(<span class="number">1f</span>, (<span class="keyword">float</span>) Math.abs(delta) / width);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> distance = halfWidth + halfWidth *</span><br><span class="line">                distanceInfluenceForSnapDuration(distanceRatio);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> duration;</span><br><span class="line">        velocity = Math.abs(velocity);</span><br><span class="line">        <span class="keyword">if</span> (velocity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            duration = <span class="number">4</span> * Math.round(<span class="number">1000</span> * Math.abs(distance / velocity));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">float</span> range = (<span class="keyword">float</span>) Math.abs(delta) / motionRange;</span><br><span class="line">            duration = (<span class="keyword">int</span>) ((range + <span class="number">1</span>) * BASE_SETTLE_DURATION);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(duration, MAX_SETTLE_DURATION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Clamp the magnitude of value for absMin and absMax.</span><br><span class="line">     * If the value is below the minimum, it will be clamped to zero.</span><br><span class="line">     * If the value is above the maximum, it will be clamped to the maximum.</span><br><span class="line">     * 确保参数中给定的速率在正常范围之内</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> value Value to clamp</span><br><span class="line">     * <span class="doctag">@param</span> absMin Absolute value of the minimum significant value to return</span><br><span class="line">     * <span class="doctag">@param</span> absMax Absolute value of the maximum value to return</span><br><span class="line">     * <span class="doctag">@return</span> The clamped value with the same sign as &lt;code&gt;value&lt;/code&gt;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">clampMag</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">int</span> absMin, <span class="keyword">int</span> absMax)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> absValue = Math.abs(value);</span><br><span class="line">        <span class="keyword">if</span> (absValue &lt; absMin) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (absValue &gt; absMax) <span class="keyword">return</span> value &gt; <span class="number">0</span> ? absMax : -absMax;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Settle the captured view based on standard free-moving fling behavior.</span><br><span class="line">     * The caller should invoke &#123;<span class="doctag">@link</span> #continueSettling(boolean)&#125; on each subsequent frame</span><br><span class="line">     * to continue the motion until it returns false.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> minLeft Minimum X position for the view's left edge</span><br><span class="line">     * <span class="doctag">@param</span> minTop Minimum Y position for the view's top edge</span><br><span class="line">     * <span class="doctag">@param</span> maxLeft Maximum X position for the view's left edge</span><br><span class="line">     * <span class="doctag">@param</span> maxTop Maximum Y position for the view's top edge</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flingCapturedView</span><span class="params">(<span class="keyword">int</span> minLeft, <span class="keyword">int</span> minTop, <span class="keyword">int</span> maxLeft, <span class="keyword">int</span> maxTop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mReleaseInProgress) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot flingCapturedView outside of a call to "</span> +</span><br><span class="line">                    <span class="string">"Callback#onViewReleased"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mScroller.fling(mCapturedView.getLeft(), mCapturedView.getTop(),</span><br><span class="line">                (<span class="keyword">int</span>) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),</span><br><span class="line">                (<span class="keyword">int</span>) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),</span><br><span class="line">                minLeft, maxLeft, minTop, maxTop);</span><br><span class="line"></span><br><span class="line">        setDragState(STATE_SETTLING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个方法里一开始都会判断 mReleaseInProgress 为 false ，如果为 false 就会抛一个 IllegalStateException 异常， 而 mReleaseInProgress 唯一为true的时候就是在 <code>dispatchViewReleased()</code> 里调用 <code>onViewReleased()</code> 的时候。<code>settleCapturedViewAt(int finalLeft, int finalTop)</code> 以松手前的滑动速度为初速动，让捕获到的 View 自动滚动到指定位置。只能在 Callback 的 <code>onViewReleased()</code> 中调用。<code>flingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop)</code>  以松手前的滑动速度为初速动，让捕获到的 View 在指定范围内 fling ，也只能在 Callback 的 <code>onViewReleased()</code> 中调用。</p>
<h3 id="smoothSlideViewTo"><a href="#smoothSlideViewTo" class="headerlink" title="smoothSlideViewTo"></a>smoothSlideViewTo</h3><p>ViewDragHelper 还有一个移动 View 的方法是 smoothSlideViewTo(View child, int finalLeft, int finalTop)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragHelper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Animate the view &lt;code&gt;child&lt;/code&gt; to the given (left, top) position.</span><br><span class="line">     * If this method returns true, the caller should invoke &#123;<span class="doctag">@link</span> #continueSettling(boolean)&#125;</span><br><span class="line">     * on each subsequent frame to continue the motion until it returns false. If this method</span><br><span class="line">     * returns false there is no further work to do to complete the movement.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;This operation does not count as a capture event, though &#123;<span class="doctag">@link</span> #getCapturedView()&#125;</span><br><span class="line">     * will still report the sliding view while the slide is in progress.&lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> child Child view to capture and animate</span><br><span class="line">     * <span class="doctag">@param</span> finalLeft Final left position of child</span><br><span class="line">     * <span class="doctag">@param</span> finalTop Final top position of child</span><br><span class="line">     * <span class="doctag">@return</span> true if animation should continue through &#123;<span class="doctag">@link</span> #continueSettling(boolean)&#125; calls</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">smoothSlideViewTo</span><span class="params">(View child, <span class="keyword">int</span> finalLeft, <span class="keyword">int</span> finalTop)</span> </span>&#123;</span><br><span class="line">        mCapturedView = child;</span><br><span class="line">        mActivePointerId = INVALID_POINTER;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> continueSliding = forceSettleCapturedViewAt(finalLeft, finalTop, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!continueSliding &amp;&amp; mDragState == STATE_IDLE &amp;&amp; mCapturedView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// If we're in an IDLE state to begin with and aren't moving anywhere, we</span></span><br><span class="line">            <span class="comment">// end up having a non-null capturedView with an IDLE dragState</span></span><br><span class="line">            mCapturedView = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> continueSliding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到它不受 mReleaseInProgress 的限制，所以可以在任何地方调用，效果和 <code>settleCapturedViewAt()</code> 类似，因为它们最终都调用了 <code>forceSettleCapturedViewAt()</code> 来启动自动滚动，区别在于 <code>settleCapturedViewAt()</code> 会以最后松手前的滑动速率为初速度将 View 滚动到最终位置，而 <code>smoothSlideViewTo()</code> 滚动的初速度是0。 <code>smoothSlideViewTo(View child, int finalLeft, int finalTop)</code> 指定某个 View 自动滚动到指定的位置，初速度为 0 ，可在任何地方调用。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> support-v4 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ArrayMap源码解析]]></title>
      <url>/2016/06/05/arraymap-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 分析版本：support-v4-22.2.1</p>
</blockquote>
<p>ArrayMap 继承于 SimpleArrayMap ，实现了 Map 接口中的所有方法。</p>
<a id="more"></a>
<h2 id="ArrayMap"><a href="#ArrayMap" class="headerlink" title="ArrayMap"></a>ArrayMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">SimpleArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    MapCollections&lt;K, V&gt; mCollections;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 给定大小的ArrayMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过一个ArrayMap或者SimpleArrayMap来实现一个ArrayMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayMap</span><span class="params">(SimpleArrayMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 得到Map集合</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> MapCollections&lt;K, V&gt; getCollection() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCollections == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCollections = <span class="keyword">new</span> MapCollections&lt;K, V&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">colGetSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> mSize;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//mArray存的是值，该变量在SimpleArrayMap中</span></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> Object <span class="title">colGetEntry</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> offset)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> mArray[(index&lt;&lt;<span class="number">1</span>) + offset];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过key得到位置索引</span></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">colIndexOfKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> indexOfKey(key);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过value得到位置索引</span></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">colIndexOfValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> indexOfValue(value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> Map&lt;K, V&gt; colGetMap() &#123;</span><br><span class="line">                    <span class="keyword">return</span> ArrayMap.<span class="keyword">this</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">colPut</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">                    put(key, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> V <span class="title">colSetValue</span><span class="params">(<span class="keyword">int</span> index, V value)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> setValueAt(index, value);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">colRemoveAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">                    removeAt(index);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">colClear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCollections;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过调用MapCollections的containsAllHelper来判断该ArrayMap是否包含collection</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MapCollections.containsAllHelper(<span class="keyword">this</span>, collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 将Map的类中的内容添加到ArrayMap中</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> </span>&#123;</span><br><span class="line">        ensureCapacity(mSize + map.size());</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            put(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过调用MapCollections的removeAllHelper来除掉collection中有的值</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MapCollections.removeAllHelper(<span class="keyword">this</span>, collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 取ArrayMap和collection的交集</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MapCollections.retainAllHelper(<span class="keyword">this</span>, collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 返回一个set用来遍历，注意：这是一个小效率非常低的方法，会产生很多平时变量</span><br><span class="line">     *</span><br><span class="line">     * Note: the semantics of this</span><br><span class="line">     * Set are subtly different than that of a HashMap: most important,</span><br><span class="line">     * the Map.Entry object returned by its iterator is a single</span><br><span class="line">     * object that exists for the entire iterator, so you can not hold on to it</span><br><span class="line">     * after calling Iterator.next.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Entry&lt;K, V&gt;&gt; entrySet() &#123;</span><br><span class="line">        <span class="keyword">return</span> getCollection().getEntrySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 返回一个set用来遍历key，注意：这是一个小效率非常低的方法，会产生很多平时变量</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCollection().getKeySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 返回一个Collections用来遍历value，注意：这是一个小效率非常低的方法，会产生很多平时变量</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCollection().getValues();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayMap 中的具体实现方法是在 SimpleArrayMap 中实现的，而 ArrayMap 中实现 Map 接口的方法中，许多不建议使用，因为相比起 HashMap 等，效率要低的多。</p>
<h3 id="SimpleArrayMap"><a href="#SimpleArrayMap" class="headerlink" title="SimpleArrayMap"></a>SimpleArrayMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The minimum amount by which the capacity of a ArrayMap will increase.</span><br><span class="line">     * This is tuned to be relatively space-efficient.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SIZE = <span class="number">4</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Maximum number of entries to have in array caches.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CACHE_SIZE = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span>[] mHashes;</span><br><span class="line">    Object[] mArray;</span><br><span class="line">    <span class="keyword">int</span> mSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Caches of small array objects to avoid spamming garbage.  The cache</span><br><span class="line">     * Object[] variable is a pointer to a linked list of array objects.</span><br><span class="line">     * The first entry in the array is a pointer to the next array in the</span><br><span class="line">     * list; the second entry is a pointer to the int[] hash code array for it.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">static</span> Object[] mBaseCache;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mBaseCacheSize;</span><br><span class="line">    <span class="keyword">static</span> Object[] mTwiceBaseCache;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mTwiceBaseCacheSize;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个空的ArrayMap，默认容量是0</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleArrayMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mHashes = ContainerHelpers.EMPTY_INTS;<span class="comment">//static final int[] EMPTY_INTS = new int[0];</span></span><br><span class="line">        mArray = ContainerHelpers.EMPTY_OBJECTS;<span class="comment">// static final Object[] EMPTY_OBJECTS = new Object[0];</span></span><br><span class="line">        mSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个给定容量的ArrayMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleArrayMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</span><br><span class="line">            mHashes = ContainerHelpers.EMPTY_INTS;</span><br><span class="line">            mArray = ContainerHelpers.EMPTY_OBJECTS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            allocArrays(capacity);</span><br><span class="line">        &#125;</span><br><span class="line">        mSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过一个ArrayMap来创建一个新的ArrayMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleArrayMap</span><span class="params">(SimpleArrayMap map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            putAll(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 扩容，分配新的数组</span><br><span class="line">     */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allocArrays</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是8</span></span><br><span class="line">        <span class="keyword">if</span> (size == (BASE_SIZE*<span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ArrayMap.class) &#123;</span><br><span class="line">				<span class="comment">//如果mTwiceBaseCache不为null</span></span><br><span class="line">                <span class="keyword">if</span> (mTwiceBaseCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                	<span class="comment">//将mTwiceBaseCache赋值给mArray</span></span><br><span class="line">                    <span class="keyword">final</span> Object[] array = mTwiceBaseCache;</span><br><span class="line">                    mArray = array;</span><br><span class="line">                    <span class="comment">//将之前保存在0和1的拿出来</span></span><br><span class="line">                    mTwiceBaseCache = (Object[])array[<span class="number">0</span>];</span><br><span class="line">                    mHashes = (<span class="keyword">int</span>[])array[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//清空</span></span><br><span class="line">                    array[<span class="number">0</span>] = array[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">                    mTwiceBaseCacheSize--;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size == BASE_SIZE) &#123;<span class="comment">//如果是4</span></span><br><span class="line">            <span class="keyword">synchronized</span> (ArrayMap.class) &#123;</span><br><span class="line">				<span class="comment">//如果mBaseCache不为null</span></span><br><span class="line">                <span class="keyword">if</span> (mBaseCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                	<span class="comment">//将mBaseCache赋值给mArray</span></span><br><span class="line">                    <span class="keyword">final</span> Object[] array = mBaseCache;</span><br><span class="line">                    mArray = array;</span><br><span class="line">                    <span class="comment">//将之前保存在0和1的拿出来</span></span><br><span class="line">                    mBaseCache = (Object[])array[<span class="number">0</span>];</span><br><span class="line">                    mHashes = (<span class="keyword">int</span>[])array[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//清空</span></span><br><span class="line">                    array[<span class="number">0</span>] = array[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">                    mBaseCacheSize--;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//创建mHashes数组和mArray数组</span></span><br><span class="line">        mHashes = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        mArray = <span class="keyword">new</span> Object[size&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(SimpleArrayMap&lt;? extends K, ? extends V&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = array.mSize;</span><br><span class="line">        <span class="comment">//确认目前数组放的下</span></span><br><span class="line">        ensureCapacity(mSize + N);</span><br><span class="line">        <span class="comment">//当前数组没有值</span></span><br><span class="line">        <span class="keyword">if</span> (mSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;<span class="comment">//将内容复制到mHash和mArray中</span></span><br><span class="line">                System.arraycopy(array.mHashes, <span class="number">0</span>, mHashes, <span class="number">0</span>, N);</span><br><span class="line">                System.arraycopy(array.mArray, <span class="number">0</span>, mArray, <span class="number">0</span>, N&lt;&lt;<span class="number">1</span>);</span><br><span class="line">                mSize = N;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果原来就有值，那么直接通过for循环将信息写入</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">                put(array.keyAt(i), array.valueAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 判断目前数组是否够大</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mHashes.length &lt; minimumCapacity) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] ohashes = mHashes;</span><br><span class="line">            <span class="keyword">final</span> Object[] oarray = mArray;</span><br><span class="line">            <span class="comment">//分配数组（创建新的数组）</span></span><br><span class="line">            allocArrays(minimumCapacity);</span><br><span class="line">            <span class="comment">//把旧的数组信息整到新的数组上</span></span><br><span class="line">            <span class="keyword">if</span> (mSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.arraycopy(ohashes, <span class="number">0</span>, mHashes, <span class="number">0</span>, mSize);</span><br><span class="line">                System.arraycopy(oarray, <span class="number">0</span>, mArray, <span class="number">0</span>, mSize&lt;&lt;<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放</span></span><br><span class="line">            freeArrays(ohashes, oarray, mSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">freeArrays</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span>[] hashes, <span class="keyword">final</span> Object[] array, <span class="keyword">final</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是8</span></span><br><span class="line">        <span class="keyword">if</span> (hashes.length == (BASE_SIZE*<span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ArrayMap.class) &#123;</span><br><span class="line">                <span class="comment">//此时mTwiceBaseCacheSize值为0，必然小于CACHE_SIZE</span></span><br><span class="line">                <span class="keyword">if</span> (mTwiceBaseCacheSize &lt; CACHE_SIZE) &#123;</span><br><span class="line">                	<span class="comment">//将现有的mTwiceBaseCache赋值给数组的第一个</span></span><br><span class="line">                    array[<span class="number">0</span>] = mTwiceBaseCache;</span><br><span class="line">                    array[<span class="number">1</span>] = hashes;</span><br><span class="line">					<span class="comment">//清除剩下的</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i=(size&lt;&lt;<span class="number">1</span>)-<span class="number">1</span>; i&gt;=<span class="number">2</span>; i--) &#123;</span><br><span class="line">                        array[i] = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//将数组赋值给mTwiceBaseCache，就是将mTwiceBaseCache替换掉了，原来的mTwiceBaseCache在该数组的第0位置上</span></span><br><span class="line">                    mTwiceBaseCache = array;</span><br><span class="line">                    mTwiceBaseCacheSize++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hashes.length == BASE_SIZE) &#123;<span class="comment">//如果是4</span></span><br><span class="line">            <span class="keyword">synchronized</span> (ArrayMap.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mBaseCacheSize &lt; CACHE_SIZE) &#123;</span><br><span class="line">                	<span class="comment">//将mBaseCache赋值给数组的第一个</span></span><br><span class="line">                    array[<span class="number">0</span>] = mBaseCache;</span><br><span class="line">                    array[<span class="number">1</span>] = hashes;</span><br><span class="line">                    <span class="comment">//清除剩下的</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i=(size&lt;&lt;<span class="number">1</span>)-<span class="number">1</span>; i&gt;=<span class="number">2</span>; i--) &#123;</span><br><span class="line">                        array[i] = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//将数组赋值给mBaseCache</span></span><br><span class="line">                    mBaseCache = array;</span><br><span class="line">                    mBaseCacheSize++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="put-K-key-V-value"><a href="#put-K-key-V-value" class="headerlink" title="put(K key, V value)"></a>put(K key, V value)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前值的hash</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="comment">//当前值的索引</span></span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;<span class="comment">//如果key为null，那么hash为0</span></span><br><span class="line">            hash = <span class="number">0</span>;</span><br><span class="line">            index = indexOfNull();<span class="comment">//找得到返回正数，找不到返回负数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果key不为null，那么hash就是keyhashCode值</span></span><br><span class="line">            hash = key.hashCode();</span><br><span class="line">            index = indexOf(key, hash);<span class="comment">//找得到返回正数，找不到返回负数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果index的值是大于等于0的</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        	<span class="comment">//index*2+1，即value的位置</span></span><br><span class="line">            index = (index&lt;&lt;<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//得到旧的value</span></span><br><span class="line">            <span class="keyword">final</span> V old = (V)mArray[index];</span><br><span class="line">            <span class="comment">//将新的value赋值进去</span></span><br><span class="line">            mArray[index] = value;</span><br><span class="line">            <span class="comment">//返回旧的value</span></span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//如果index为负，那么这里变为正数</span></span><br><span class="line">        index = ~index;</span><br><span class="line">        <span class="keyword">if</span> (mSize &gt;= mHashes.length) &#123;<span class="comment">//现有的值的数量与hash数组大小对比</span></span><br><span class="line">        	<span class="comment">//mSize如果大于等于8，那么n=mSize+mSize/2;如果mSize小于8且大于等4，n=8；如果mSize小于4，n=4</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> n = mSize &gt;= (BASE_SIZE*<span class="number">2</span>) ? (mSize+(mSize&gt;&gt;<span class="number">1</span>))</span><br><span class="line">                    : (mSize &gt;= BASE_SIZE ? (BASE_SIZE*<span class="number">2</span>) : BASE_SIZE);</span><br><span class="line">			<span class="comment">//准备临时变量存放旧数据</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] ohashes = mHashes;</span><br><span class="line">            <span class="keyword">final</span> Object[] oarray = mArray;</span><br><span class="line">            <span class="comment">//扩容</span></span><br><span class="line">            allocArrays(n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mHashes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.arraycopy(ohashes, <span class="number">0</span>, mHashes, <span class="number">0</span>, ohashes.length);</span><br><span class="line">                System.arraycopy(oarray, <span class="number">0</span>, mArray, <span class="number">0</span>, oarray.length);</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//释放</span></span><br><span class="line">            freeArrays(ohashes, oarray, mSize);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//将index后面的内容往后面移</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; mSize) &#123;</span><br><span class="line">            System.arraycopy(mHashes, index, mHashes, index + <span class="number">1</span>, mSize - index);</span><br><span class="line">            System.arraycopy(mArray, index &lt;&lt; <span class="number">1</span>, mArray, (index + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, (mSize - index) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//赋值</span></span><br><span class="line">        mHashes[index] = hash;</span><br><span class="line">        mArray[index&lt;&lt;<span class="number">1</span>] = key;</span><br><span class="line">        mArray[(index&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>] = value;</span><br><span class="line">        mSize++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object key, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Important fast case: if nothing is in here, nothing to look for.</span></span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ~<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//二分查找hash值对应的key</span></span><br><span class="line">        <span class="keyword">int</span> index = ContainerHelpers.binarySearch(mHashes, N, hash);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the hash code wasn't found, then we have no entry for this key.</span></span><br><span class="line">        <span class="comment">//没有找到直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the key at the returned index matches, that's what we want.</span></span><br><span class="line">        <span class="comment">//如果找到，判断key是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (key.equals(mArray[index&lt;&lt;<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果key的equals方法不匹配，找对应的key，先往后找</span></span><br><span class="line">        <span class="comment">// Search for a matching key after the index.</span></span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">for</span> (end = index + <span class="number">1</span>; end &lt; N &amp;&amp; mHashes[end] == hash; end++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(mArray[end &lt;&lt; <span class="number">1</span>])) <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再往前找</span></span><br><span class="line">        <span class="comment">// Search for a matching key before the index.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; mHashes[i] == hash; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(mArray[i &lt;&lt; <span class="number">1</span>])) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Key not found -- return negative value indicating where a</span></span><br><span class="line">        <span class="comment">// new entry for this key should go.  We use the end of the</span></span><br><span class="line">        <span class="comment">// hash chain to reduce the number of array entries that will</span></span><br><span class="line">        <span class="comment">// need to be copied when inserting.</span></span><br><span class="line">        <span class="keyword">return</span> ~end;<span class="comment">//找不到，返回一个负数出去</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOfNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Important fast case: if nothing is in here, nothing to look for.</span></span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ~<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//二分查找hash值对应的key</span></span><br><span class="line">        <span class="keyword">int</span> index = ContainerHelpers.binarySearch(mHashes, N, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the hash code wasn't found, then we have no entry for this key.</span></span><br><span class="line">        <span class="comment">//没有找到直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the key at the returned index matches, that's what we want.</span></span><br><span class="line">        <span class="comment">//如果找到，判断key是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mArray[index&lt;&lt;<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找对应的key</span></span><br><span class="line">        <span class="comment">// Search for a matching key after the index.</span></span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">for</span> (end = index + <span class="number">1</span>; end &lt; N &amp;&amp; mHashes[end] == <span class="number">0</span>; end++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == mArray[end &lt;&lt; <span class="number">1</span>]) <span class="keyword">return</span> end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search for a matching key before the index.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; mHashes[i] == <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == mArray[i &lt;&lt; <span class="number">1</span>]) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Key not found -- return negative value indicating where a</span></span><br><span class="line">        <span class="comment">// new entry for this key should go.  We use the end of the</span></span><br><span class="line">        <span class="comment">// hash chain to reduce the number of array entries that will</span></span><br><span class="line">        <span class="comment">// need to be copied when inserting.</span></span><br><span class="line">        <span class="keyword">return</span> ~end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="removeAt-int-index"><a href="#removeAt-int-index" class="headerlink" title="removeAt(int index)"></a>removeAt(int index)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">removeAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object old = mArray[(index &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (mSize &lt;= <span class="number">1</span>) &#123;<span class="comment">//清空</span></span><br><span class="line">            freeArrays(mHashes, mArray, mSize);</span><br><span class="line">            mHashes = ContainerHelpers.EMPTY_INTS;</span><br><span class="line">            mArray = ContainerHelpers.EMPTY_OBJECTS;</span><br><span class="line">            mSize = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当大小大于8，但是真正使用不到1/3的时候，重新分配</span></span><br><span class="line">            <span class="keyword">if</span> (mHashes.length &gt; (BASE_SIZE*<span class="number">2</span>) &amp;&amp; mSize &lt; mHashes.length/<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// Shrunk enough to reduce size of arrays.  We don't allow it to</span></span><br><span class="line">                <span class="comment">// shrink smaller than (BASE_SIZE*2) to avoid flapping between</span></span><br><span class="line">                <span class="comment">// that and BASE_SIZE.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> n = mSize &gt; (BASE_SIZE*<span class="number">2</span>) ? (mSize + (mSize&gt;&gt;<span class="number">1</span>)) : (BASE_SIZE*<span class="number">2</span>);</span><br><span class="line">                <span class="comment">//临时变量存放旧hash数组和array数组</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span>[] ohashes = mHashes;</span><br><span class="line">                <span class="keyword">final</span> Object[] oarray = mArray;</span><br><span class="line">                <span class="comment">//分配新的数组</span></span><br><span class="line">                allocArrays(n);</span><br><span class="line"></span><br><span class="line">                mSize--;</span><br><span class="line">                <span class="comment">//将原先的数组的index之前的值传进去</span></span><br><span class="line">                <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.arraycopy(ohashes, <span class="number">0</span>, mHashes, <span class="number">0</span>, index);</span><br><span class="line">                    System.arraycopy(oarray, <span class="number">0</span>, mArray, <span class="number">0</span>, index &lt;&lt; <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//要删除的index值小于现在的大小</span></span><br><span class="line">                <span class="keyword">if</span> (index &lt; mSize) &#123;</span><br><span class="line">                    <span class="comment">//将index后面的赋值到新的数组中</span></span><br><span class="line">                    System.arraycopy(ohashes, index + <span class="number">1</span>, mHashes, index, mSize - index);</span><br><span class="line">                    System.arraycopy(oarray, (index + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, mArray, index &lt;&lt; <span class="number">1</span>,</span><br><span class="line">                            (mSize - index) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//不需要重新分配数组</span></span><br><span class="line">                mSize--;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; mSize) &#123;</span><br><span class="line">                    <span class="comment">//将index后面的往前移</span></span><br><span class="line">                    System.arraycopy(mHashes, index + <span class="number">1</span>, mHashes, index, mSize - index);</span><br><span class="line">                    System.arraycopy(mArray, (index + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>, mArray, index &lt;&lt; <span class="number">1</span>,</span><br><span class="line">                            (mSize - index) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//对应的位置设为null</span></span><br><span class="line">                mArray[mSize &lt;&lt; <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">                mArray[(mSize &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (V)old;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>remove 方法在特定情况下会进行内存重新分配，保证 ArrayMap 的内存合理区间，减少对内存的占用</p>
<h3 id="其他-API"><a href="#其他-API" class="headerlink" title="其他 API"></a>其他 API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleArrayMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSize != <span class="number">0</span>) &#123;</span><br><span class="line">            freeArrays(mHashes, mArray, mSize);</span><br><span class="line">            mHashes = ContainerHelpers.EMPTY_INTS;</span><br><span class="line">            mArray = ContainerHelpers.EMPTY_OBJECTS;</span><br><span class="line">            mSize = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//是否包含这个key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOfKey(key) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//key的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOfKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? indexOfNull() : indexOf(key, key.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//value的索引 </span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOfValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> N = mSize*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> Object[] array = mArray;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;N; i+=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;N; i+=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.equals(array[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//是否包含这个value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOfValue(value) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//通过key得到value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = indexOfKey(key);</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> ? (V)mArray[(index&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>] : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//得到index索引位置上的key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">keyAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (K)mArray[index &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到index索引上的value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">valueAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (V)mArray[(index &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//设置index索引上的value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">setValueAt</span><span class="params">(<span class="keyword">int</span> index, V value)</span> </span>&#123;</span><br><span class="line">        index = (index &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        V old = (V)mArray[index];</span><br><span class="line">        mArray[index] = value;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过key来删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = indexOfKey(key);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> removeAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图说"><a href="#图说" class="headerlink" title="图说"></a>图说</h2><h3 id="ArrayMap-结构"><a href="#ArrayMap-结构" class="headerlink" title="ArrayMap 结构"></a>ArrayMap 结构</h3><p><img src="http://yydcdut.github.io/img/arraymap_1.jpg" alt="结构"></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p><img src="http://yydcdut.github.io/img/arraymap_2.jpg" alt="查找"></p>
<p>当要获取某个 value 的时候，ArrayMap 会计算输入 key 转换过后的 hash 值，然后对 hash 数组使用二分查找法寻找到对应的 index，然后我们可以通过这个 index 在另外一个数组中直接访问到需要的键值对。如果在第二个数组键值对中的 key 和前面输入的查询 key 不一致，那么就认为是发生了碰撞冲突。为了解决这个问题，会以该 key 为中心点，分别上下展开，逐个去对比查找，直到找到匹配的值。</p>
<h3 id="删除插入"><a href="#删除插入" class="headerlink" title="删除插入"></a>删除插入</h3><p><img src="http://yydcdut.github.io/img/arraymap_3.jpg" alt="删除插入"></p>
<p>ArrayMap 的插入与删除的效率是不够高的，但是如果数组的列表只是在一百这个数量级上，则完全不用担心这些插入与删除的效率问题。</p>
<h3 id="与-HashMap-内存占用对比"><a href="#与-HashMap-内存占用对比" class="headerlink" title="与 HashMap 内存占用对比"></a>与 HashMap 内存占用对比</h3><p><img src="http://yydcdut.github.io/img/arraymap_4.jpg" alt="与 HashMap 内存占用对比"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>ArrayMap 根本不是哈希表，其实就是一个二叉查找树。有两个数组：key 的 hash 值数组，与对象数组的 key 索引对应，该数组用于二分查找；对象数组，存储真正的键值对，偶数索引是 key ，奇数索引是 value</li>
<li>为了快速扩展数组空间，使用了 static 的 array cache</li>
<li>mBaseCache，如果 ArrayMap 的数据量从 4，增加到 8，用该数组保存之前使用的 mHashes 和 mArray ，这样如果数据量再变回 4 的时候，可以再次使用之前的数组，不需要再次申请空间，这样节省了一定的时间；</li>
<li>ArrayMap 可以使用 index 遍历，会快一些</li>
<li>ArrayMap 提供了数组收缩的功能，在 clear 或 remove 后，会重新收缩数组</li>
</ul>
<p>最适合的使用场景</p>
<ul>
<li>对象个数的数量级最好是千以内</li>
<li>数据组织形式包含 Map 结构</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.csdn.net/article/2015-08-12/2825447-android-performance-patterns-season-3" target="_blank" rel="external">Android性能优化典范（三）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> support-v4 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android-drag-square源码解析]]></title>
      <url>/2016/05/29/android-grag-square-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/xmuSistone/android-drag-square" target="_blank" rel="external">android-drag-square</a>      分析版本：<a href="https://github.com/xmuSistone/android-drag-square/tree/88b6738cf4201b1f3645cbbba55cf8664bb78672" target="_blank" rel="external">886b738</a></p>
</blockquote>
<p>android-drag-square 是一个仿探探的『个人编辑资料页』的头像拖动排序的开源库。</p>
<a id="more"></a>
<h2 id="android-drag-square"><a href="#android-drag-square" class="headerlink" title="android-drag-square"></a>android-drag-square</h2><p><img src="http://yydcdut.github.io/img/android-drag-square.gif" alt="android-drag-square"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>将代码加入到工程，然后在 layout 布局中加入控件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">com.stone.dragsquare.DraggableSquareView</span></span><br><span class="line">	<span class="attribute">android:id</span>=<span class="value">"@+id/drag_square"</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加图片</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DraggableSquareView dragSquare = (DraggableSquareView) findViewById(R.id.drag_square);</span><br><span class="line">dragSquare.fillItemImage(imageStatus, imagePath, isModify);</span><br></pre></td></tr></table></figure>
<p>第一个参数是指图片的位置，第二个参数是图片的地址，第三个图片是判断图片是新添加还是只是修改。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="DraggableSquareView"><a href="#DraggableSquareView" class="headerlink" title="DraggableSquareView"></a>DraggableSquareView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableSquareView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ACTION_DOWN按下后超过这个时间，就直接touch拦截，不会调用底层view的onClick事件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERCEPT_TIME_SLOP = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//分别是指左上角的大图、右上角、右边中间、右下角，下边中间、左下角</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] allStatus = &#123;DraggableItemView.STATUS_LEFT_TOP, DraggableItemView.STATUS_RIGHT_TOP,</span><br><span class="line">            DraggableItemView.STATUS_RIGHT_MIDDLE, DraggableItemView.STATUS_RIGHT_BOTTOM,</span><br><span class="line">            DraggableItemView.STATUS_MIDDLE_BOTTOM, DraggableItemView.STATUS_LEFT_BOTTOM&#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTouchSlop = <span class="number">5</span>; <span class="comment">// 判定为滑动的阈值，单位是像素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> spaceInterval = <span class="number">4</span>; <span class="comment">// 小方块之间的间隔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewDragHelper mDragHelper;</span><br><span class="line">    <span class="keyword">private</span> GestureDetectorCompat moveDetector;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> List&lt;Point&gt; originViewPositionList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 保存最初状态时每个itemView的坐标位置</span></span><br><span class="line">    <span class="keyword">private</span> DraggableItemView draggingView; <span class="comment">// 正在拖拽的view</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraggableSquareView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraggableSquareView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraggableSquareView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        <span class="comment">//ViewDragHelper</span></span><br><span class="line">        mDragHelper = ViewDragHelper</span><br><span class="line">                .create(<span class="keyword">this</span>, <span class="number">10f</span>, <span class="keyword">new</span> DragHelperCallback());</span><br><span class="line">        <span class="comment">//手势判断</span></span><br><span class="line">        moveDetector = <span class="keyword">new</span> GestureDetectorCompat(context,</span><br><span class="line">                <span class="keyword">new</span> MoveDetector());</span><br><span class="line">        moveDetector.setIsLongpressEnabled(<span class="keyword">false</span>); <span class="comment">// 不能处理长按事件，否则违背最初设计的初衷</span></span><br><span class="line">        spaceInterval = (<span class="keyword">int</span>) getResources().getDimension(R.dimen.drag_square_interval); <span class="comment">// 小方块之间的间隔</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑动的距离阈值由系统提供</span></span><br><span class="line">        ViewConfiguration configuration = ViewConfiguration.get(getContext());</span><br><span class="line">        mTouchSlop = configuration.getScaledTouchSlop();</span><br><span class="line"></span><br><span class="line">        anchorHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (draggingView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 开始移动重心的动画</span></span><br><span class="line">                    draggingView.startAnchorAnimation();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onFinishInflate();</span><br><span class="line">        <span class="comment">//初始化View</span></span><br><span class="line">        <span class="keyword">int</span> len = allStatus.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            DraggableItemView itemView = <span class="keyword">new</span> DraggableItemView(getContext());</span><br><span class="line">          <span class="comment">//告诉当前DraggableItemView是哪个位置</span></span><br><span class="line">            itemView.setStatus(allStatus[i]);</span><br><span class="line">          <span class="comment">//将自己设置给DraggableItemView</span></span><br><span class="line">            itemView.setParentView(<span class="keyword">this</span>);</span><br><span class="line">          <span class="comment">//添加位置信息，但是是空的</span></span><br><span class="line">            originViewPositionList.add(<span class="keyword">new</span> Point());</span><br><span class="line">          <span class="comment">//将DraggableItemView添加为子View</span></span><br><span class="line">            addView(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//测量</span></span><br><span class="line">        measureChildren(widthMeasureSpec, widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> maxWidth = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> width = resolveSizeAndState(maxWidth, widthMeasureSpec, <span class="number">0</span>);</span><br><span class="line">        setMeasuredDimension(width, width);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//spaceInterval是间隔</span></span><br><span class="line">        <span class="keyword">int</span> everyLength = (getMeasuredWidth() - <span class="number">4</span> * spaceInterval) / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> itemLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> itemTop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> itemRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> itemBottom = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 每个view的边长是everyLength * 2 + spaceInterval</span></span><br><span class="line">        sideLength = everyLength * <span class="number">2</span> + spaceInterval;</span><br><span class="line">        <span class="keyword">int</span> halfSideLength = sideLength / <span class="number">2</span>; <span class="comment">// 边长的一半</span></span><br><span class="line">        <span class="keyword">int</span> rightCenter = r - spaceInterval - everyLength / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> bottomCenter = b - spaceInterval - everyLength / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> scaleRate = (<span class="keyword">float</span>) everyLength / sideLength;</span><br><span class="line">        <span class="keyword">int</span> num = getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            DraggableItemView itemView = (DraggableItemView) getChildAt(i);</span><br><span class="line">            itemView.setScaleRate(scaleRate);</span><br><span class="line">            <span class="keyword">switch</span> (itemView.getStatus()) &#123;</span><br><span class="line">                <span class="keyword">case</span> DraggableItemView.STATUS_LEFT_TOP:</span><br><span class="line">                    <span class="keyword">int</span> centerPos = spaceInterval + everyLength + spaceInterval / <span class="number">2</span>;</span><br><span class="line">                    itemLeft = centerPos - halfSideLength;</span><br><span class="line">                    itemRight = centerPos + halfSideLength;</span><br><span class="line">                    itemTop = centerPos - halfSideLength;</span><br><span class="line">                    itemBottom = centerPos + halfSideLength;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DraggableItemView.STATUS_RIGHT_TOP:</span><br><span class="line">                    itemLeft = rightCenter - halfSideLength;</span><br><span class="line">                    itemRight = rightCenter + halfSideLength;</span><br><span class="line">                    <span class="keyword">int</span> hCenter1 = spaceInterval + everyLength / <span class="number">2</span>;</span><br><span class="line">                    itemTop = hCenter1 - halfSideLength;</span><br><span class="line">                    itemBottom = hCenter1 + halfSideLength;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DraggableItemView.STATUS_RIGHT_MIDDLE:</span><br><span class="line">                    itemLeft = rightCenter - halfSideLength;</span><br><span class="line">                    itemRight = rightCenter + halfSideLength;</span><br><span class="line">                    <span class="keyword">int</span> hCenter2 = t + getMeasuredHeight() / <span class="number">2</span>;</span><br><span class="line">                    itemTop = hCenter2 - halfSideLength;</span><br><span class="line">                    itemBottom = hCenter2 + halfSideLength;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DraggableItemView.STATUS_RIGHT_BOTTOM:</span><br><span class="line">                    itemLeft = rightCenter - halfSideLength;</span><br><span class="line">                    itemRight = rightCenter + halfSideLength;</span><br><span class="line">                    itemTop = bottomCenter - halfSideLength;</span><br><span class="line">                    itemBottom = bottomCenter + halfSideLength;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DraggableItemView.STATUS_MIDDLE_BOTTOM:</span><br><span class="line">                    <span class="keyword">int</span> vCenter1 = l + getMeasuredWidth() / <span class="number">2</span>;</span><br><span class="line">                    itemLeft = vCenter1 - halfSideLength;</span><br><span class="line">                    itemRight = vCenter1 + halfSideLength;</span><br><span class="line">                    itemTop = bottomCenter - halfSideLength;</span><br><span class="line">                    itemBottom = bottomCenter + halfSideLength;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DraggableItemView.STATUS_LEFT_BOTTOM:</span><br><span class="line">                    <span class="keyword">int</span> vCenter2 = l + spaceInterval + everyLength / <span class="number">2</span>;</span><br><span class="line">                    itemLeft = vCenter2 - halfSideLength;</span><br><span class="line">                    itemRight = vCenter2 + halfSideLength;</span><br><span class="line">                    itemTop = bottomCenter - halfSideLength;</span><br><span class="line">                    itemBottom = bottomCenter + halfSideLength;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//通过设置LayoutParams来设置高宽</span></span><br><span class="line">            ViewGroup.LayoutParams lp = itemView.getLayoutParams();</span><br><span class="line">            lp.width = sideLength;</span><br><span class="line">            lp.height = sideLength;</span><br><span class="line">            itemView.setLayoutParams(lp);</span><br><span class="line">            <span class="comment">//更新Point，该值为左上角的坐标值</span></span><br><span class="line">            Point itemPoint = originViewPositionList.get(itemView.getStatus());</span><br><span class="line">            itemPoint.x = itemLeft;</span><br><span class="line">            itemPoint.y = itemTop;</span><br><span class="line">            <span class="comment">//固定位置</span></span><br><span class="line">            itemView.layout(itemLeft, itemTop, itemRight, itemBottom);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DraggableSquareView</code> 继承于 ViewGroup ，那么肯定得重新构造方法和 <code>onLayout</code> 方法，那么照着 View 的生命周期来看代码，发现在构造函数的时候申明了一个 <code>ViewDragHelper</code> 变量，这个类是拖动 View 操作的类；同时还有手势操作的类 <code>GestureDetectorCompat</code> ，以及一个 <code>Handler</code> ，而这个 <code>Handler</code> 的左右是判断手势意图是移动还是单击。</p>
<p>接着在 <code>onFinishInflate</code> 的时候将 <code>DraggableItemView</code> 都添加进去。</p>
<p>接着在 <code>onMeasure</code> 中测量大小，其中 <code>resolveSizeAndState</code> 方法与 <code>getDefaultSize</code> 方法类似，其内部实现的逻辑是一样的，但是又有区别，<code>getDefaultSize</code> 仅仅返回最终量算的尺寸信息，但 <code>resolveSizeAndState</code> 除了返回最终尺寸信息还会有可能返回量算的 state 标志位信息。通过看 <code>resolveSizeAndState</code> 代码发现，当 specMode 为AT_MOST ，并且父控件指定的尺寸 specSize 小于 View 自己想要的尺寸时，我们就会用掩码 MEASURED_STATE_TOO_SMALL 向量算结果加入尺寸太小的标记，这样其父 ViewGroup 就可以通过该标记其给子 View 的尺寸太小了，然后可能分配更大一点的尺寸给子 View 调用 <code>resolveSizeAndState</code> 方法的情况主要有两种：Android 中的许多 layout 类都调用了 resolveSizeAndState 方法，比如 LinearLayout 在量算过程中会调用 <code>resolveSizeAndState</code> 方法而非 <code>getDefaultSize</code> 方法。 我们自己在实现自定义的 View 或 ViewGroup 时，我们可以重写 onMeasure 方法，并在该方法内调用 <code>resolveSizeAndState</code> 方法。</p>
<p>紧接着在 <code>onLayout</code> 中设置 View 的位置，大小以及更新位置坐标。</p>
<p>那么看看这个 <code>DraggableSquareView</code> 的手势操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableSquareView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> DraggableItemView draggingView; <span class="comment">// 正在拖拽的view</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sideLength; <span class="comment">// 每一个小方块的边长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downTime = <span class="number">0</span>; <span class="comment">// 按下的时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> downX, downY;  <span class="comment">// 按下时的坐标位置</span></span><br><span class="line">    <span class="keyword">private</span> Thread moveAnchorThread; <span class="comment">// 按下的时候，itemView的重心移动，此为对应线程</span></span><br><span class="line">    <span class="keyword">private</span> Handler anchorHandler; <span class="comment">// itemView需要移动重心，此为对应的Handler</span></span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 这是viewdraghelper拖拽效果的主要逻辑</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DragHelperCallback</span> <span class="keyword">extends</span> <span class="title">ViewDragHelper</span>.<span class="title">Callback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//如果changedView是当前正在drag的View</span></span><br><span class="line">            <span class="keyword">if</span> (changedView == draggingView) &#123;</span><br><span class="line">                DraggableItemView changedItemView = (DraggableItemView) changedView;</span><br><span class="line">                <span class="comment">//换位置</span></span><br><span class="line">                switchPositionIfNeeded(changedItemView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View child, <span class="keyword">int</span> pointerId)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 按下的时候，缩放到最小的级别</span></span><br><span class="line">            draggingView = (DraggableItemView) child;</span><br><span class="line">            <span class="keyword">return</span> draggingView.isDraggable();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//释放</span></span><br><span class="line">            DraggableItemView itemView = (DraggableItemView) releasedChild;</span><br><span class="line">            itemView.onDragRelease();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//横向的移动</span></span><br><span class="line">            DraggableItemView itemView = (DraggableItemView) child;</span><br><span class="line">            itemView.updateEndSpringX(dx);</span><br><span class="line">            System.out.println(<span class="string">"clampViewPositionHorizontal dx="</span> + dx);</span><br><span class="line">            <span class="keyword">return</span> left + dx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//纵向的移动</span></span><br><span class="line">            DraggableItemView itemView = (DraggableItemView) child;</span><br><span class="line">            itemView.updateEndSpringY(dy);</span><br><span class="line">            System.out.println(<span class="string">"clampViewPositionVertical dy="</span> + dy);</span><br><span class="line">            <span class="keyword">return</span> top + dy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MoveDetector</span> <span class="keyword">extends</span> <span class="title">GestureDetector</span>.<span class="title">SimpleOnGestureListener</span> </span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScroll</span><span class="params">(MotionEvent e1, MotionEvent e2, <span class="keyword">float</span> dx,</span><br><span class="line">                                <span class="keyword">float</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 拖动了，touch不往下传递</span></span><br><span class="line">            <span class="keyword">return</span> Math.abs(dy) + Math.abs(dx) &gt; mTouchSlop;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">//拦截父View事件</span></span><br><span class="line">            getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">            downX = (<span class="keyword">int</span>) ev.getX();</span><br><span class="line">            downY = (<span class="keyword">int</span>) ev.getY();</span><br><span class="line">            downTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 手指按下的时候，需要把某些view bringToFront，否则的话，tryCapture将不按预期工作</span></span><br><span class="line">            bringToFrontWhenTouchDown(downX, downY);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">            <span class="comment">//释放</span></span><br><span class="line">            <span class="keyword">if</span> (draggingView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                draggingView.onDragRelease();</span><br><span class="line">            &#125;</span><br><span class="line">            draggingView = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//阻断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != moveAnchorThread) &#123;</span><br><span class="line">                moveAnchorThread.interrupt();</span><br><span class="line">                moveAnchorThread = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 按下时根据触点的位置，将某个view bring到前台</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bringToFrontWhenTouchDown</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> downX, <span class="keyword">final</span> <span class="keyword">int</span> downY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> statusIndex = getStatusByDownPoint(downX, downY);</span><br><span class="line">        <span class="keyword">final</span> DraggableItemView itemView = getItemViewByStatus(statusIndex);</span><br><span class="line">        <span class="comment">//如果该View不是在最前面，放到最前面</span></span><br><span class="line">        <span class="keyword">if</span> (indexOfChild(itemView) != getChildCount() - <span class="number">1</span>) &#123;</span><br><span class="line">            bringChildToFront(itemView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断该View能不能drag</span></span><br><span class="line">        <span class="keyword">if</span> (!itemView.isDraggable()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存位置</span></span><br><span class="line">        itemView.saveAnchorInfo(downX, downY);</span><br><span class="line">        <span class="comment">//判断到底是移动还是单击的一个判断Thread</span></span><br><span class="line">        moveAnchorThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//判断时间来做处理</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(INTERCEPT_TIME_SLOP);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Message msg = anchorHandler.obtainMessage();</span><br><span class="line">                msg.sendToTarget();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        moveAnchorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过downX和downY来判断当前的status</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> downX</span><br><span class="line">     * <span class="doctag">@param</span> downY</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getStatusByDownPoint</span><span class="params">(<span class="keyword">int</span> downX, <span class="keyword">int</span> downY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> everyWidth = getMeasuredWidth() / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (downX &lt; everyWidth) &#123;</span><br><span class="line">            <span class="keyword">if</span> (downY &lt; everyWidth * <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> DraggableItemView.STATUS_LEFT_TOP;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> DraggableItemView.STATUS_LEFT_BOTTOM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (downX &lt; everyWidth * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (downY &lt; everyWidth * <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> DraggableItemView.STATUS_LEFT_TOP;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> DraggableItemView.STATUS_MIDDLE_BOTTOM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (downY &lt; everyWidth) &#123;</span><br><span class="line">                <span class="keyword">return</span> DraggableItemView.STATUS_RIGHT_TOP;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (downY &lt; everyWidth * <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> DraggableItemView.STATUS_RIGHT_MIDDLE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> DraggableItemView.STATUS_RIGHT_BOTTOM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        <span class="keyword">if</span> (downTime &gt; <span class="number">0</span> &amp;&amp; System.currentTimeMillis() - downTime &gt; INTERCEPT_TIME_SLOP) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//ViewDragHelper</span></span><br><span class="line">        <span class="keyword">boolean</span> shouldIntercept = mDragHelper.shouldInterceptTouchEvent(ev);</span><br><span class="line">        <span class="keyword">int</span> action = ev.getActionMasked();</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            mDragHelper.processTouchEvent(ev);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否要有移动意图</span></span><br><span class="line">        <span class="keyword">boolean</span> moveFlag = moveDetector.onTouchEvent(ev);</span><br><span class="line">        <span class="keyword">if</span> (moveFlag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != moveAnchorThread) &#123;</span><br><span class="line">                moveAnchorThread.interrupt();</span><br><span class="line">                moveAnchorThread = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != draggingView) &#123;</span><br><span class="line">                draggingView.startAnchorAnimation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shouldIntercept &amp;&amp; moveFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 该行代码可能会抛异常，正式发布时请将这行代码加上try catch</span></span><br><span class="line">            mDragHelper.processTouchEvent(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有几点值得学习和探讨：</p>
<ol>
<li><code>moveAnchorThread</code> 的作用，是在子线程中进行时间的延时，而我在做的时候直接用的 Handler 的 sendEmptyMessageDelay() 方法，如果想取消的话就 handler.removeMessage()</li>
<li><code>ViewGroup#bringChildToFront(View)</code> 该方法将 View 放到最前面那层，赞！之前我在做的时候是 重新 new 了个 ImageView 放在 ViewGroup 的最前的</li>
<li>通过手势与 View 的在位置的坐标（相对长宽）对比来判断在哪个位置了，而我在做的时候用的是 <code>ListView#pointToPosition(int, int)</code> 那套代码</li>
<li>正是因为 <code>bringChildToFront</code> 这部分，我在写 drag 的时候通过 <code>View#layout(int, int, int, int)</code> 来实现的移动</li>
</ol>
<p>调换位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableSquareView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DragHelperCallback</span> <span class="keyword">extends</span> <span class="title">ViewDragHelper</span>.<span class="title">Callback</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//如果changedView是当前正在drag的View</span></span><br><span class="line">            <span class="keyword">if</span> (changedView == draggingView) &#123;</span><br><span class="line">                DraggableItemView changedItemView = (DraggableItemView) changedView;</span><br><span class="line">                <span class="comment">//换位置</span></span><br><span class="line">                switchPositionIfNeeded(changedItemView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * view拖动的时候，看看是否需要互换位置</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">switchPositionIfNeeded</span><span class="params">(DraggableItemView draggingView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> centerX = draggingView.getLeft() + sideLength / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> centerY = draggingView.getTop() + sideLength / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> everyWidth = getMeasuredWidth() / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> fromStatus = -<span class="number">1</span>, toStatus = draggingView.getStatus();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (draggingView.getStatus()) &#123;</span><br><span class="line">            <span class="keyword">case</span> DraggableItemView.STATUS_LEFT_TOP:<span class="comment">// 拖动的是左上角的大图， 依次将小图向上顶</span></span><br><span class="line">                <span class="keyword">int</span> fromChangeIndex = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (centerX &gt; everyWidth * <span class="number">2</span>) &#123; <span class="comment">// 大图往右越过了位置，一定会跟右侧的三个View交换位置才行</span></span><br><span class="line">                    <span class="keyword">if</span> (centerY &lt; everyWidth) &#123;<span class="comment">// 跟右上角的View交换位置</span></span><br><span class="line">                        fromChangeIndex = DraggableItemView.STATUS_RIGHT_TOP;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &lt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">// 跟右边中间的View交换位置</span></span><br><span class="line">                        fromChangeIndex = DraggableItemView.STATUS_RIGHT_MIDDLE;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 跟右边下面的View交换位置</span></span><br><span class="line">                        fromChangeIndex = DraggableItemView.STATUS_RIGHT_BOTTOM;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &gt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">//大图往下越过了位置，跟下面的3个View交换位置</span></span><br><span class="line">                    <span class="keyword">if</span> (centerX &lt; everyWidth) &#123;<span class="comment">//左下角的View</span></span><br><span class="line">                        fromChangeIndex = DraggableItemView.STATUS_LEFT_BOTTOM;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerX &lt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">//下边中间的View</span></span><br><span class="line">                        fromChangeIndex = DraggableItemView.STATUS_MIDDLE_BOTTOM;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">//右边的位置</span></span><br><span class="line">                        fromChangeIndex = DraggableItemView.STATUS_RIGHT_BOTTOM;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                DraggableItemView toItemView = getItemViewByStatus(fromChangeIndex);</span><br><span class="line">                <span class="comment">//如果该位置不可drag，也就是没有图</span></span><br><span class="line">                <span class="keyword">if</span> (!toItemView.isDraggable()) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= fromChangeIndex; i++) &#123;</span><br><span class="line">                        switchPosition(i, i - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    draggingView.setStatus(fromChangeIndex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> DraggableItemView.STATUS_RIGHT_TOP:<span class="comment">//拖动的是右上角的View</span></span><br><span class="line">                <span class="keyword">if</span> (centerX &lt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">//与大图换</span></span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_LEFT_TOP;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &gt; everyWidth) &#123;<span class="comment">//与下边的那个图换</span></span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_RIGHT_MIDDLE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> DraggableItemView.STATUS_RIGHT_MIDDLE:<span class="comment">//拖动的是右边中间的图</span></span><br><span class="line">                <span class="keyword">if</span> (centerX &lt; everyWidth * <span class="number">2</span> &amp;&amp; centerY &lt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">//与大图换</span></span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_LEFT_TOP;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &lt; everyWidth) &#123;<span class="comment">//与上边的图换，也就是右上角那个</span></span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_RIGHT_TOP;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &gt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">//与下边的图换，也就是右下角那个</span></span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_RIGHT_BOTTOM;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DraggableItemView.STATUS_RIGHT_BOTTOM:<span class="comment">//拖动的是右下角的图</span></span><br><span class="line">                <span class="keyword">if</span> (centerX &lt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">//与左边的图换，就是下边中间那个</span></span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_MIDDLE_BOTTOM;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &lt; everyWidth * <span class="number">2</span>) &#123;<span class="comment">//与上边的图换，就是右边中间那个</span></span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_RIGHT_MIDDLE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DraggableItemView.STATUS_MIDDLE_BOTTOM:<span class="comment">//拖动的是下边中间那个</span></span><br><span class="line">                <span class="keyword">if</span> (centerX &lt; everyWidth) &#123;</span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_LEFT_BOTTOM;<span class="comment">//与左边那个换，也就是左下角那个</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerX &gt; everyWidth * <span class="number">2</span>) &#123;</span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_RIGHT_BOTTOM;<span class="comment">//与右边那个换，也就是右下角那个</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &lt; everyWidth * <span class="number">2</span>) &#123;</span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_LEFT_TOP;<span class="comment">//与大图换</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DraggableItemView.STATUS_LEFT_BOTTOM:<span class="comment">//拖动的是左下角那个</span></span><br><span class="line">                <span class="keyword">if</span> (centerX &gt; everyWidth) &#123;</span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_MIDDLE_BOTTOM;<span class="comment">//与右边的换，也就是下边中间那个</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (centerY &lt; everyWidth * <span class="number">2</span>) &#123;</span><br><span class="line">                    fromStatus = DraggableItemView.STATUS_LEFT_TOP;<span class="comment">//与大图换</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//换位置</span></span><br><span class="line">        <span class="keyword">synchronized</span> (synObj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fromStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (switchPosition(fromStatus, toStatus)) &#123;</span><br><span class="line">                    draggingView.setStatus(fromStatus);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fromStatus == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = toStatus - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    switchPosition(i, i + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                draggingView.setStatus(fromStatus);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 调换位置</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">switchPosition</span><span class="params">(<span class="keyword">int</span> fromStatus, <span class="keyword">int</span> toStatus)</span> </span>&#123;</span><br><span class="line">        DraggableItemView itemView = getItemViewByStatus(fromStatus);</span><br><span class="line">        <span class="keyword">if</span> (itemView.isDraggable()) &#123;</span><br><span class="line">            itemView.switchPosition(toStatus);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过status来找到DraggableItemView</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> status</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DraggableItemView <span class="title">getItemViewByStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            DraggableItemView itemView = (DraggableItemView) getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (itemView.getStatus() == status) &#123;</span><br><span class="line">                <span class="keyword">return</span> itemView;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调换位置这部分看代码其实很简单，每个 View 都有他自己应该换的位置。</p>
<p>那么再看看暴露出去那几个 API ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableSquareView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 给imageView添加图片</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillItemImage</span><span class="params">(<span class="keyword">int</span> imageStatus, String imagePath, <span class="keyword">boolean</span> isModify)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 如果是修改图片，直接填充就好</span></span><br><span class="line">        <span class="keyword">if</span> (isModify) &#123;</span><br><span class="line">            DraggableItemView itemView = getItemViewByStatus(imageStatus);</span><br><span class="line">            itemView.fillImageView(imagePath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 新增图片</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allStatus.length; i++) &#123;</span><br><span class="line">            DraggableItemView itemView = getItemViewByStatus(i);</span><br><span class="line">            <span class="keyword">if</span> (!itemView.isDraggable()) &#123;</span><br><span class="line">                itemView.fillImageView(imagePath);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除某一个ImageView</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDedeleteImage</span><span class="params">(DraggableItemView deleteView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> status = deleteView.getStatus();</span><br><span class="line">        <span class="keyword">int</span> lastDraggableViewStatus = -<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//一个循环来处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = status + <span class="number">1</span>; i &lt; allStatus.length; i++) &#123;</span><br><span class="line">            DraggableItemView itemView = getItemViewByStatus(i);</span><br><span class="line">            <span class="keyword">if</span> (itemView.isDraggable()) &#123;</span><br><span class="line">                lastDraggableViewStatus = i;</span><br><span class="line">                switchPosition(i, i - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lastDraggableViewStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            deleteView.switchPosition(lastDraggableViewStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过status来找到DraggableItemView</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> status</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DraggableItemView <span class="title">getItemViewByStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            DraggableItemView itemView = (DraggableItemView) getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (itemView.getStatus() == status) &#123;</span><br><span class="line">                <span class="keyword">return</span> itemView;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="DraggableItemView"><a href="#DraggableItemView" class="headerlink" title="DraggableItemView"></a>DraggableItemView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableItemView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_LEFT_TOP = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_RIGHT_TOP = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_RIGHT_MIDDLE = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_RIGHT_BOTTOM = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_MIDDLE_BOTTOM = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_LEFT_BOTTOM = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCALE_LEVEL_1 = <span class="number">1</span>; <span class="comment">// 最大状态，缩放比例是100%</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCALE_LEVEL_2 = <span class="number">2</span>; <span class="comment">// 中间状态，缩放比例scaleRate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCALE_LEVEL_3 = <span class="number">3</span>; <span class="comment">// 最小状态，缩放比例是smallerRate</span></span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> ImageView imageView;</span><br><span class="line">    <span class="keyword">private</span> View maskView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> scaleRate = <span class="number">0.5f</span>;</span><br><span class="line">	<span class="keyword">private</span> Spring springX, springY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasSetCurrentSpringValue = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">private</span> DraggableSquareView parentView;</span><br><span class="line">	<span class="comment">//这两个参数可以参考http://facebook.github.io/rebound/</span></span><br><span class="line">	<span class="keyword">private</span> SpringConfig springConfigCommon = SpringConfig.fromOrigamiTensionAndFriction(<span class="number">140</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">private</span> SpringConfig springConfigDragging = SpringConfig.fromOrigamiTensionAndFriction(<span class="number">400</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DraggableItemView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraggableItemView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraggableItemView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        <span class="comment">//添加布局</span></span><br><span class="line">        inflate(context, R.layout.drag_item, <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//找到drag的时候的ImageView</span></span><br><span class="line">        imageView = (ImageView) findViewById(R.id.drag_item_imageview);</span><br><span class="line">        <span class="comment">//找到显示的ImageView</span></span><br><span class="line">        maskView = findViewById(R.id.drag_item_mask_view);</span><br><span class="line">        <span class="comment">//找到那个『+』的View</span></span><br><span class="line">        addView = findViewById(R.id.add_view);</span><br><span class="line">        <span class="comment">//单击的时候的对话框</span></span><br><span class="line">        dialogListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (v.getId() == R.id.pick_image) &#123;</span><br><span class="line">                    <span class="comment">// 从相册选择图片</span></span><br><span class="line">                    pickImage();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 删除</span></span><br><span class="line">                    imagePath = <span class="keyword">null</span>;</span><br><span class="line">                    imageView.setImageBitmap(<span class="keyword">null</span>);</span><br><span class="line">                    addView.setVisibility(View.VISIBLE);</span><br><span class="line">                    parentView.onDedeleteImage(DraggableItemView.<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//调整View的大小</span></span><br><span class="line">        getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasSetCurrentSpringValue) &#123;</span><br><span class="line">                    adjustImageView();</span><br><span class="line">                    hasSetCurrentSpringValue = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//显示的View的点击事件</span></span><br><span class="line">        maskView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!isDraggable()) &#123;</span><br><span class="line">                    pickImage();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    CustDialog dialog = <span class="keyword">new</span> CustDialog(getContext());</span><br><span class="line">                    dialog.setClickListener(dialogListener);</span><br><span class="line">                    dialog.show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//初始化Facebook的库</span></span><br><span class="line">        initSpring();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 调整ImageView的宽度和高度</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustImageView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (status != STATUS_LEFT_TOP) &#123;</span><br><span class="line">            imageView.setScaleX(scaleRate);</span><br><span class="line">            imageView.setScaleY(scaleRate);</span><br><span class="line"></span><br><span class="line">            maskView.setScaleX(scaleRate);</span><br><span class="line">            maskView.setScaleY(scaleRate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setCurrentSpringPos(getLeft(), getTop());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 设置当前spring位置</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCurrentSpringPos</span><span class="params">(<span class="keyword">int</span> xPos, <span class="keyword">int</span> yPos)</span> </span>&#123;</span><br><span class="line">        springX.setCurrentValue(xPos);</span><br><span class="line">        springY.setCurrentValue(yPos);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 初始化Spring相关</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSpring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringSystem mSpringSystem = SpringSystem.create();</span><br><span class="line">        springX = mSpringSystem.createSpring();</span><br><span class="line">        springY = mSpringSystem.createSpring();</span><br><span class="line"></span><br><span class="line">        springX.addListener(<span class="keyword">new</span> SimpleSpringListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringUpdate</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> xPos = (<span class="keyword">int</span>) spring.getCurrentValue();</span><br><span class="line">                setScreenX(xPos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        springY.addListener(<span class="keyword">new</span> SimpleSpringListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpringUpdate</span><span class="params">(Spring spring)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> yPos = (<span class="keyword">int</span>) spring.getCurrentValue();</span><br><span class="line">                setScreenY(yPos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        springX.setSpringConfig(springConfigCommon);</span><br><span class="line">        springY.setSpringConfig(springConfigCommon);</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 横向的移动</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> screenX</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScreenX</span><span class="params">(<span class="keyword">int</span> screenX)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offsetLeftAndRight(screenX - getLeft());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 纵向的移动</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> screenY</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScreenY</span><span class="params">(<span class="keyword">int</span> screenY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offsetTopAndBottom(screenY - getTop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Facebook 的库可以看看这里 <a href="http://facebook.github.io/rebound/" target="_blank" rel="external">Rebound</a> ，一个很棒的库，把一开始 drag 和释放 drag 的动画都省略了，之前我做的时候都是用的 <code>AnimatorSet</code> 等属性动画来实现的。</p>
<p>看看暴露出去个 API ：</p>
<p>当满足时间超过 100 ms，就进行往手指方向移动且缩小的动画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableItemView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 保存坐标</span><br><span class="line">     * MotionEvent.ACTION_DOWN 的时候调用</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> downX</span><br><span class="line">     * <span class="doctag">@param</span> downY</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAnchorInfo</span><span class="params">(<span class="keyword">int</span> downX, <span class="keyword">int</span> downY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> halfSide = getMeasuredWidth() / <span class="number">2</span>;</span><br><span class="line">        anchorX = downX - halfSide;</span><br><span class="line">        anchorY = downY - halfSide;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 真正开始动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAnchorAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//没有值的话就不做操作</span></span><br><span class="line">        <span class="keyword">if</span> (anchorX == Integer.MIN_VALUE || anchorY == Integer.MIN_VALUE) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        springX.setOvershootClampingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        springY.setOvershootClampingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        springX.setSpringConfig(springConfigDragging);</span><br><span class="line">        springY.setSpringConfig(springConfigDragging);</span><br><span class="line">        <span class="comment">//移动到那个位置</span></span><br><span class="line">        animTo(anchorX, anchorY);</span><br><span class="line">        <span class="comment">//缩放</span></span><br><span class="line">        scaleSize(DraggableItemView.SCALE_LEVEL_3);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 与 springX.addListener 和 springY.addListener 相接应</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> xPos</span><br><span class="line">     * <span class="doctag">@param</span> yPos</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animTo</span><span class="params">(<span class="keyword">int</span> xPos, <span class="keyword">int</span> yPos)</span> </span>&#123;</span><br><span class="line">        springX.setEndValue(xPos);</span><br><span class="line">        springY.setEndValue(yPos);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 设置缩放大小</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scaleSize</span><span class="params">(<span class="keyword">int</span> scaleLevel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> rate = scaleRate;</span><br><span class="line">        <span class="keyword">if</span> (scaleLevel == SCALE_LEVEL_1) &#123;</span><br><span class="line">            rate = <span class="number">1.0f</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scaleLevel == SCALE_LEVEL_3) &#123;</span><br><span class="line">            rate = smallerRate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scaleAnimator != <span class="keyword">null</span> &amp;&amp; scaleAnimator.isRunning()) &#123;</span><br><span class="line">            scaleAnimator.cancel();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scaleAnimator = ObjectAnimator</span><br><span class="line">                .ofFloat(<span class="keyword">this</span>, <span class="string">"custScale"</span>, imageView.getScaleX(), rate)</span><br><span class="line">                .setDuration(<span class="number">200</span>);</span><br><span class="line">        scaleAnimator.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</span><br><span class="line">        scaleAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>切换位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableItemView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 从一个位置切换到另一个位置</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">switchPosition</span><span class="params">(<span class="keyword">int</span> toStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.status == toStatus) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"程序错乱"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (toStatus == STATUS_LEFT_TOP) &#123;</span><br><span class="line">            scaleSize(SCALE_LEVEL_1);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status == STATUS_LEFT_TOP) &#123;</span><br><span class="line">            scaleSize(SCALE_LEVEL_2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.status = toStatus;</span><br><span class="line">        Point point = parentView.getOriginViewPos(status);</span><br><span class="line">        animTo(point.x, point.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>填充图片：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableItemView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillImageView</span><span class="params">(String imagePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imagePath = imagePath;</span><br><span class="line">        addView.setVisibility(View.GONE);</span><br><span class="line">        ImageLoader.getInstance().displayImage(imagePath, imageView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当 drag 结束释放的时候：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableItemView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 释放</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDragRelease</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过status来判断要改变的size的大小</span></span><br><span class="line">        <span class="keyword">if</span> (status == DraggableItemView.STATUS_LEFT_TOP) &#123;</span><br><span class="line">            scaleSize(DraggableItemView.SCALE_LEVEL_1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            scaleSize(DraggableItemView.SCALE_LEVEL_2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        springX.setOvershootClampingEnabled(<span class="keyword">false</span>);</span><br><span class="line">        springY.setOvershootClampingEnabled(<span class="keyword">false</span>);</span><br><span class="line">        springX.setSpringConfig(springConfigCommon);</span><br><span class="line">        springY.setSpringConfig(springConfigCommon);</span><br><span class="line">        <span class="comment">//得到将要移动过去的位置</span></span><br><span class="line">        Point point = parentView.getOriginViewPos(status);</span><br><span class="line">        <span class="comment">//给facebook的库说动画起始的位置</span></span><br><span class="line">        setCurrentSpringPos(getLeft(), getTop());</span><br><span class="line">        <span class="comment">//给facebook的库说位置移动到point.x和point.y的位置上</span></span><br><span class="line">        animTo(point.x, point.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraggableItemView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//与 springX.addListener 和 springY.addListener 相接应</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEndSpringX</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">        springX.setEndValue(springX.getEndValue() + dx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//与 springX.addListener 和 springY.addListener 相接应</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEndSpringY</span><span class="params">(<span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        springY.setEndValue(springY.getEndValue() + dy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><code>ViewGroup#bringChildToFront(View)</code> 真是经典，觉得是该读一读 View 和 ViewGroup 的源码了</li>
<li>Facebook 的 Rebound 这个库真棒</li>
<li>判断位置这部分也挺有意思的，一起调换位置</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> drag </tag>
            
            <tag> 源码 </tag>
            
            <tag> 自定义控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SwipeMenuListview源码解析]]></title>
      <url>/2016/05/22/swipemenulistview-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank" rel="external">SwipeMenuListView</a>      分析版本：<a href="https://github.com/baoyongzhang/SwipeMenuListView/tree/d1cb86251e4aa9d21171930f08cd5b7a38d0e067" target="_blank" rel="external">d1cb862</a></p>
</blockquote>
<p>SwipeMenuListView 是一个像 Android QQ 那样在 ListView 中拉出菜单的开源库。</p>
<a id="more"></a>
<h2 id="SwipeMenuListView"><a href="#SwipeMenuListView" class="headerlink" title="SwipeMenuListView"></a>SwipeMenuListView</h2><p><img src="http://yydcdut.github.io/img/swipemenulistview.gif" alt="SwipeMenuListView"></p>
<p>SwipeMenuListView 是一个很棒的 ListView 控件，但是现在作者已经没有维护了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.baoyz.swipemenulistview:library:1.3.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>添加 SwipeMenuListView 到 layout 布局中</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">com.baoyz.swipemenulistview.SwipeMenuListView</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/listView"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>创建 <code>SwipeMenuCreator</code> 并添加 items </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">SwipeMenuCreator creator = <span class="keyword">new</span> SwipeMenuCreator() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(SwipeMenu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// create "open" item</span></span><br><span class="line">        SwipeMenuItem openItem = <span class="keyword">new</span> SwipeMenuItem(</span><br><span class="line">                getApplicationContext());</span><br><span class="line">        <span class="comment">// set item background</span></span><br><span class="line">        openItem.setBackground(<span class="keyword">new</span> ColorDrawable(Color.rgb(<span class="number">0xC9</span>, <span class="number">0xC9</span>,</span><br><span class="line">                <span class="number">0xCE</span>)));</span><br><span class="line">        <span class="comment">// set item width</span></span><br><span class="line">        openItem.setWidth(dp2px(<span class="number">90</span>));</span><br><span class="line">        <span class="comment">// set item title</span></span><br><span class="line">        openItem.setTitle(<span class="string">"Open"</span>);</span><br><span class="line">        <span class="comment">// set item title fontsize</span></span><br><span class="line">        openItem.setTitleSize(<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// set item title font color</span></span><br><span class="line">        openItem.setTitleColor(Color.WHITE);</span><br><span class="line">        <span class="comment">// add to menu</span></span><br><span class="line">        menu.addMenuItem(openItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create "delete" item</span></span><br><span class="line">        SwipeMenuItem deleteItem = <span class="keyword">new</span> SwipeMenuItem(</span><br><span class="line">                getApplicationContext());</span><br><span class="line">        <span class="comment">// set item background</span></span><br><span class="line">        deleteItem.setBackground(<span class="keyword">new</span> ColorDrawable(Color.rgb(<span class="number">0xF9</span>,</span><br><span class="line">                <span class="number">0x3F</span>, <span class="number">0x25</span>)));</span><br><span class="line">        <span class="comment">// set item width</span></span><br><span class="line">        deleteItem.setWidth(dp2px(<span class="number">90</span>));</span><br><span class="line">        <span class="comment">// set a icon</span></span><br><span class="line">        deleteItem.setIcon(R.drawable.ic_delete);</span><br><span class="line">        <span class="comment">// add to menu</span></span><br><span class="line">        menu.addMenuItem(deleteItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set creator</span></span><br><span class="line">listView.setMenuCreator(creator);</span><br></pre></td></tr></table></figure>
<h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>Menu 的 Click 监听器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">listView.setOnMenuItemClickListener(<span class="keyword">new</span> OnMenuItemClickListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(<span class="keyword">int</span> position, SwipeMenu menu, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="comment">// open</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// delete</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// false : close the menu; true : not close the menu</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="滑动方向"><a href="#滑动方向" class="headerlink" title="滑动方向"></a>滑动方向</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Right</span></span><br><span class="line">mListView.setSwipeDirection(SwipeMenuListView.DIRECTION_RIGHT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Left</span></span><br><span class="line">mListView.setSwipeDirection(SwipeMenuListView.DIRECTION_LEFT);</span><br></pre></td></tr></table></figure>
<h3 id="创建不同的-Menu"><a href="#创建不同的-Menu" class="headerlink" title="创建不同的 Menu"></a>创建不同的 Menu</h3><p>利用 Adapter 中的 ViewType</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// menu type count</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// current menu type</span></span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 view type 来创建不同的 menus</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SwipeMenuCreator creator = <span class="keyword">new</span> SwipeMenuCreator() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(SwipeMenu menu)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Create different menus depending on the view type</span></span><br><span class="line">            <span class="keyword">switch</span> (menu.getViewType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="comment">// create menu of type 0</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="comment">// create menu of type 1</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>OnSwipeListener</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">listView.setOnSwipeListener(<span class="keyword">new</span> OnSwipeListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwipeStart</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// swipe start</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwipeEnd</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// swipe end</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>平滑打开 menu</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listView.smoothOpenMenu(position);</span><br></pre></td></tr></table></figure>
<p>打开或者关闭 menu 的动画插值器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Close Interpolator</span></span><br><span class="line">listView.setCloseInterpolator(<span class="keyword">new</span> BounceInterpolator());</span><br><span class="line"><span class="comment">// Open Interpolator</span></span><br><span class="line">listView.setOpenInterpolator(...);</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="SwipeMenuListView-0x00"><a href="#SwipeMenuListView-0x00" class="headerlink" title="SwipeMenuListView 0x00"></a>SwipeMenuListView 0x00</h3><p>先从 <code>SwipeMenuListView</code> 开始看，从构造函数和常用 API 开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuListView</span> <span class="keyword">extends</span> <span class="title">ListView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOUCH_STATE_NONE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOUCH_STATE_X = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOUCH_STATE_Y = <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> MAX_Y = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> MAX_X = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTouchState;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuListView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuListView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuListView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MAX_X = dp2px(MAX_X);</span><br><span class="line">        MAX_Y = dp2px(MAX_Y);</span><br><span class="line">        mTouchState = TOUCH_STATE_NONE;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdapter</span><span class="params">(ListAdapter adapter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setAdapter(<span class="keyword">new</span> SwipeMenuAdapter(getContext(), adapter) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMenu</span><span class="params">(SwipeMenu menu)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (mMenuCreator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mMenuCreator.create(menu);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(SwipeMenuView view, SwipeMenu menu,</span><br><span class="line">                                    <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (mOnMenuItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    flag = mOnMenuItemClickListener.onMenuItemClick(</span><br><span class="line">                            view.getPosition(), menu, index);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mTouchView != <span class="keyword">null</span> &amp;&amp; !flag) &#123;</span><br><span class="line">                    mTouchView.smoothCloseMenu();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从构造器中看不出来什么，只是进行了初始化操作，以及有一个手势的状态机。当看到 <code>ListView#setAdapter(ListAdapter)</code> 的时候，发现实际设置进去的 Adapter 外面还包了一层 <code>SwipeMenuAdapter</code> ，那么来看看 <code>SwipeMenuAdapter</code> ：</p>
<h3 id="SwipeMenuAdapter"><a href="#SwipeMenuAdapter" class="headerlink" title="SwipeMenuAdapter"></a>SwipeMenuAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuAdapter</span> <span class="keyword">implements</span> <span class="title">WrapperListAdapter</span>,</span><br><span class="line">		<span class="title">SwipeMenuView</span>.<span class="title">OnSwipeItemClickListener</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> ListAdapter mAdapter;</span><br><span class="line">	<span class="keyword">private</span> Context mContext;</span><br><span class="line">	<span class="keyword">private</span> SwipeMenuListView.OnMenuItemClickListener onMenuItemClickListener;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuAdapter</span><span class="params">(Context context, ListAdapter adapter)</span> </span>&#123;</span><br><span class="line">		mAdapter = adapter;</span><br><span class="line">		mContext = context;</span><br><span class="line">	&#125;</span><br><span class="line">  	</span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.getCount();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.getItem(position);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.getItemId(position);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">		SwipeMenuLayout layout = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;<span class="comment">//刚初始化的时候</span></span><br><span class="line">			<span class="comment">//调用adapter的getView得到用户返回的View</span></span><br><span class="line">			View contentView = mAdapter.getView(position, convertView, parent);</span><br><span class="line">			<span class="comment">//new一个SwipeMenu</span></span><br><span class="line">			SwipeMenu menu = <span class="keyword">new</span> SwipeMenu(mContext);</span><br><span class="line">			<span class="comment">//设置当前的ViewType</span></span><br><span class="line">			menu.setViewType(mAdapter.getItemViewType(position));</span><br><span class="line">			<span class="comment">//向SwipeMenu中添加SwipeMenuItem</span></span><br><span class="line">			createMenu(menu);</span><br><span class="line"> 			<span class="comment">//menu的View</span></span><br><span class="line">			SwipeMenuView menuView = <span class="keyword">new</span> SwipeMenuView(menu,</span><br><span class="line">					(SwipeMenuListView) parent);</span><br><span class="line">			<span class="comment">//设置监听器</span></span><br><span class="line">			menuView.setOnSwipeItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">			<span class="comment">//SwipeMenuListView</span></span><br><span class="line">			SwipeMenuListView listView = (SwipeMenuListView) parent;</span><br><span class="line">			<span class="comment">//整个item，SwipeMenuLayout</span></span><br><span class="line">			layout = <span class="keyword">new</span> SwipeMenuLayout(contentView, menuView,</span><br><span class="line">					listView.getCloseInterpolator(),</span><br><span class="line">					listView.getOpenInterpolator());</span><br><span class="line">			<span class="comment">//设置position位置</span></span><br><span class="line">			layout.setPosition(position);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			layout = (SwipeMenuLayout) convertView;</span><br><span class="line">			<span class="comment">//关闭menu</span></span><br><span class="line">			layout.closeMenu();</span><br><span class="line">			<span class="comment">//设置position位置</span></span><br><span class="line">			layout.setPosition(position);</span><br><span class="line">			<span class="comment">//调用adapter的getView，将用户的View传递出去</span></span><br><span class="line">			View view = mAdapter.getView(position, layout.getContentView(),</span><br><span class="line">					parent);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> layout;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMenu</span><span class="params">(SwipeMenu menu)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// Test Code</span></span><br><span class="line">		SwipeMenuItem item = <span class="keyword">new</span> SwipeMenuItem(mContext);</span><br><span class="line">		item.setTitle(<span class="string">"Item 1"</span>);</span><br><span class="line">		item.setBackground(<span class="keyword">new</span> ColorDrawable(Color.GRAY));</span><br><span class="line">		item.setWidth(<span class="number">300</span>);</span><br><span class="line">		menu.addMenuItem(item);</span><br><span class="line"></span><br><span class="line">		item = <span class="keyword">new</span> SwipeMenuItem(mContext);</span><br><span class="line">		item.setTitle(<span class="string">"Item 2"</span>);</span><br><span class="line">		item.setBackground(<span class="keyword">new</span> ColorDrawable(Color.RED));</span><br><span class="line">		item.setWidth(<span class="number">300</span>);</span><br><span class="line">		menu.addMenuItem(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(SwipeMenuView view, SwipeMenu menu, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (onMenuItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">			onMenuItemClickListener.onMenuItemClick(view.getPosition(), menu,</span><br><span class="line">					index);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnMenuItemClickListener</span><span class="params">(</span><br><span class="line">			SwipeMenuListView.OnMenuItemClickListener onMenuItemClickListener)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.onMenuItemClickListener = onMenuItemClickListener;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerDataSetObserver</span><span class="params">(DataSetObserver observer)</span> </span>&#123;</span><br><span class="line">		mAdapter.registerDataSetObserver(observer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterDataSetObserver</span><span class="params">(DataSetObserver observer)</span> </span>&#123;</span><br><span class="line">		mAdapter.unregisterDataSetObserver(observer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areAllItemsEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.areAllItemsEnabled();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.isEnabled(position);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasStableIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.hasStableIds();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.getItemViewType(position);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.getViewTypeCount();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WrapperListAdapter中方法</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ListAdapter <span class="title">getWrappedAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mAdapter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SwipeMenuAdapter</code> 实现了 <code>WrapperListAdapter</code> ，而 <code>WrapperListAdapter</code> 的父类是 <code>ListAdapter</code> ，也就是说 <code>WrapperListAdapter</code> 是一个 <code>ListAdapter</code> 包装类。那么我们这里可以将这个类看简单点，可以通过看一个 <code>BaseAdapter</code> 来看这个类，也就是我们需要关心的是 <code>getView()</code> ，<code>getItemId()</code>  ，<code>getItem()</code> ，<code>getCounts()</code> ，而在 <code>SwipeMenuAdapter</code> 中可以看出在 <code>getView()</code> 中的操作比较多。</p>
<p>在 <code>getView()</code> 中首先判断参数 <code>convertView</code> 是不是为 null ，如果是，那么 new 出一个自己 <code>SwipeMenuLayou</code>t 出来，包括用户的 item view 和 menu view，然后返回；如果不为 null ，那么参数 <code>convertView</code> 应该是 <code>SwipeMenuLayout</code> ，通过调用 <code>adapter.getView()</code> 将 用户的 item view 传递给用户。</p>
<p>那么我们先来看看 Menu 的 View ： </p>
<h3 id="SwipeMenuView"><a href="#SwipeMenuView" class="headerlink" title="SwipeMenuView"></a>SwipeMenuView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> SwipeMenuListView mListView;<span class="comment">//代码中没有使用到</span></span><br><span class="line">	<span class="keyword">private</span> SwipeMenuLayout mLayout;</span><br><span class="line">	<span class="keyword">private</span> SwipeMenu mMenu;</span><br><span class="line">	<span class="keyword">private</span> OnSwipeItemClickListener onItemClickListener;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> position;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> position;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.position = position;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuView</span><span class="params">(SwipeMenu menu, SwipeMenuListView listView)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(menu.getContext());</span><br><span class="line">		mListView = listView;</span><br><span class="line">		mMenu = menu;</span><br><span class="line">		<span class="comment">//获得传入的Menu中的MenuItem</span></span><br><span class="line">		List&lt;SwipeMenuItem&gt; items = menu.getMenuItems();</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//通过item构造出View添加到SwipeMenuView中</span></span><br><span class="line">		<span class="keyword">for</span> (SwipeMenuItem item : items) &#123;</span><br><span class="line">			addItem(item, id++);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 将 MenuItem 转换成 UI控件</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(SwipeMenuItem item, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		LayoutParams params = <span class="keyword">new</span> LayoutParams(item.getWidth(),</span><br><span class="line">				LayoutParams.MATCH_PARENT);</span><br><span class="line">		LinearLayout parent = <span class="keyword">new</span> LinearLayout(getContext());</span><br><span class="line">		parent.setId(id);</span><br><span class="line">		parent.setGravity(Gravity.CENTER);</span><br><span class="line">		parent.setOrientation(LinearLayout.VERTICAL);</span><br><span class="line">		parent.setLayoutParams(params);</span><br><span class="line">		parent.setBackgroundDrawable(item.getBackground());</span><br><span class="line">		parent.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">		addView(parent);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (item.getIcon() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			parent.addView(createIcon(item));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!TextUtils.isEmpty(item.getTitle())) &#123;</span><br><span class="line">			parent.addView(createTitle(item));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 创建图片</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ImageView <span class="title">createIcon</span><span class="params">(SwipeMenuItem item)</span> </span>&#123;</span><br><span class="line">		ImageView iv = <span class="keyword">new</span> ImageView(getContext());</span><br><span class="line">		iv.setImageDrawable(item.getIcon());</span><br><span class="line">		<span class="keyword">return</span> iv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 创建文字</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> TextView <span class="title">createTitle</span><span class="params">(SwipeMenuItem item)</span> </span>&#123;</span><br><span class="line">		TextView tv = <span class="keyword">new</span> TextView(getContext());</span><br><span class="line">		tv.setText(item.getTitle());</span><br><span class="line">		tv.setGravity(Gravity.CENTER);</span><br><span class="line">		tv.setTextSize(item.getTitleSize());</span><br><span class="line">		tv.setTextColor(item.getTitleColor());</span><br><span class="line">		<span class="keyword">return</span> tv;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//点击事件</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//menu滑开的时候才算点击</span></span><br><span class="line">		<span class="keyword">if</span> (onItemClickListener != <span class="keyword">null</span> &amp;&amp; mLayout.isOpen()) &#123;</span><br><span class="line">			onItemClickListener.onItemClick(<span class="keyword">this</span>, mMenu, v.getId());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> OnSwipeItemClickListener <span class="title">getOnSwipeItemClickListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> onItemClickListener;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnSwipeItemClickListener</span><span class="params">(OnSwipeItemClickListener onItemClickListener)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.onItemClickListener = onItemClickListener;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 设置SwipeMenuLayout</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayout</span><span class="params">(SwipeMenuLayout mLayout)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mLayout = mLayout;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnSwipeItemClickListener</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(SwipeMenuView view, SwipeMenu menu, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SwipeMenuView</code> 继承 <code>LinearLayout</code> ，然后在子 View 是很多个 <code>LinearLayout</code> ，而这每个子 View 中的子子 View 就是 各个 Menu Item 所转换出来的 UI 控件。需要注意的是 <code>LayoutParams params = new LayoutParams(item.getWidth(), LayoutParams.MATCH_PARENT);</code> ，设置的宽度是通过 Menu Item 定了的。</p>
<h3 id="SwipeMenuLayout"><a href="#SwipeMenuLayout" class="headerlink" title="SwipeMenuLayout"></a>SwipeMenuLayout</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> View mContentView;</span><br><span class="line">	<span class="keyword">private</span> SwipeMenuView mMenuView;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> Interpolator mCloseInterpolator;</span><br><span class="line">	<span class="keyword">private</span> Interpolator mOpenInterpolator;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">//手势</span></span><br><span class="line">  	<span class="keyword">private</span> OnGestureListener mGestureListener;</span><br><span class="line">  	<span class="keyword">private</span> GestureDetectorCompat mGestureDetector;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">private</span> ScrollerCompat mOpenScroller;<span class="comment">//滑开的scroller</span></span><br><span class="line">	<span class="keyword">private</span> ScrollerCompat mCloseScroller;<span class="comment">//关闭的scroller</span></span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">boolean</span> isFling;<span class="comment">//手指满足是否滑动的标志位</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">int</span> MIN_FLING = dp2px(<span class="number">15</span>);<span class="comment">//手指最小移动距离，大于这个距离可能会算作滑动</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> MAX_VELOCITYX = -dp2px(<span class="number">500</span>);<span class="comment">//X轴方向手指滑动速度</span></span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuLayout</span><span class="params">(View contentView, SwipeMenuView menuView)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(contentView, menuView, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuLayout</span><span class="params">(View contentView, SwipeMenuView menuView,</span><br><span class="line">			Interpolator closeInterpolator, Interpolator openInterpolator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(contentView.getContext());</span><br><span class="line">		mCloseInterpolator = closeInterpolator;</span><br><span class="line">		mOpenInterpolator = openInterpolator;</span><br><span class="line">		mContentView = contentView;</span><br><span class="line">		mMenuView = menuView;	</span><br><span class="line">		<span class="comment">//将SwipeMenuLayout设置给SwipeMenuView</span></span><br><span class="line">		mMenuView.setLayout(<span class="keyword">this</span>);</span><br><span class="line">		init();</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="title">SwipeMenuLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(context, attrs);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SwipeMenuLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(context);</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//设置改控件的宽度match_parent，高度wrap_content</span></span><br><span class="line">		setLayoutParams(<span class="keyword">new</span> AbsListView.LayoutParams(LayoutParams.MATCH_PARENT,</span><br><span class="line">				LayoutParams.WRAP_CONTENT));</span><br><span class="line">		<span class="comment">//Simple Gesture</span></span><br><span class="line">		mGestureListener = <span class="keyword">new</span> SimpleOnGestureListener() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDown</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">				isFling = <span class="keyword">false</span>;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//滑动</span></span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onFling</span><span class="params">(MotionEvent e1, MotionEvent e2,</span><br><span class="line">					<span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</span><br><span class="line">				<span class="comment">//判断滑动的距离是否大于MIN_FLING 以及X轴方向的速度是否小于MAX_VELOCITYX(MAX_VELOCITYX是负值)</span></span><br><span class="line">				<span class="keyword">if</span> (Math.abs(e1.getX() - e2.getX()) &gt; MIN_FLING</span><br><span class="line">						&amp;&amp; velocityX &lt; MAX_VELOCITYX) &#123;</span><br><span class="line">					isFling = <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">super</span>.onFling(e1, e2, velocityX, velocityY);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		mGestureDetector = <span class="keyword">new</span> GestureDetectorCompat(getContext(),</span><br><span class="line">				mGestureListener);</span><br><span class="line">		<span class="comment">//new Scroller</span></span><br><span class="line">		<span class="keyword">if</span> (mCloseInterpolator != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mCloseScroller = ScrollerCompat.create(getContext(),</span><br><span class="line">					mCloseInterpolator);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mCloseScroller = ScrollerCompat.create(getContext());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mOpenInterpolator != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mOpenScroller = ScrollerCompat.create(getContext(),</span><br><span class="line">					mOpenInterpolator);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mOpenScroller = ScrollerCompat.create(getContext());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//设置layoutParams</span></span><br><span class="line">		LayoutParams contentParams = <span class="keyword">new</span> LayoutParams(</span><br><span class="line">				LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);</span><br><span class="line">		mContentView.setLayoutParams(contentParams);</span><br><span class="line">		<span class="comment">//设置ID</span></span><br><span class="line">		<span class="keyword">if</span> (mContentView.getId() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">			mContentView.setId(CONTENT_VIEW_ID);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//设置layoutParams和id</span></span><br><span class="line">		mMenuView.setId(MENU_VIEW_ID);</span><br><span class="line">		mMenuView.setLayoutParams(<span class="keyword">new</span> LayoutParams(LayoutParams.WRAP_CONTENT,</span><br><span class="line">				LayoutParams.WRAP_CONTENT));</span><br><span class="line">		<span class="comment">//添加到SwipeMenuLayout中</span></span><br><span class="line">		addView(mContentView);</span><br><span class="line">		addView(mMenuView);</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(<span class="keyword">int</span> dp)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,</span><br><span class="line">				getContext().getResources().getDisplayMetrics());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SwipeMenuLayout</code> 是一个 <code>FrameLayout</code> ，两个子 View ，分别是用户的 item View 和 menu View 。手指的时候滑动的操作是通过 <code>SimpleOnGestureListener</code> 来完成的。</p>
<p>继续看这个 <code>SwipeMenuLayout</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mSwipeDirection;</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwipeDirection</span><span class="params">(<span class="keyword">int</span> swipeDirection)</span> </span>&#123;</span><br><span class="line">		mSwipeDirection = swipeDirection;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">		<span class="comment">//measure SwipeMenuView 高传的是getMeasuredHeight()且MeasureSpec.EXACTLY</span></span><br><span class="line">		mMenuView.measure(MeasureSpec.makeMeasureSpec(<span class="number">0</span>,</span><br><span class="line">				MeasureSpec.UNSPECIFIED), MeasureSpec.makeMeasureSpec(</span><br><span class="line">				getMeasuredHeight(), MeasureSpec.EXACTLY));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		mContentView.layout(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(),</span><br><span class="line">				mContentView.getMeasuredHeight());</span><br><span class="line">		<span class="comment">//通过方向来判断将SwipeMenuView放在哪个位置，而且这些位置都是在屏幕外边的位置</span></span><br><span class="line">		<span class="keyword">if</span> (mSwipeDirection == SwipeMenuListView.DIRECTION_LEFT) &#123;</span><br><span class="line">			mMenuView.layout(getMeasuredWidth(), <span class="number">0</span>,</span><br><span class="line">					getMeasuredWidth() + mMenuView.getMeasuredWidth(),</span><br><span class="line">					mContentView.getMeasuredHeight());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mMenuView.layout(-mMenuView.getMeasuredWidth(), <span class="number">0</span>,</span><br><span class="line">					<span class="number">0</span>, mContentView.getMeasuredHeight());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>SwipeMenuLayout</code> 的 <code>onMeasure()</code> 给 <code>SwipeMenuView</code> 传递一个确切的高度，然后在 <code>onLayout()</code> 中将 <code>SwipeMenuView</code> 通过方向放在方向对应的屏幕外边的位置。</p>
<p>接下来看看 <code>SwipeMenuLayout</code> 是怎么滑动的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_CLOSE = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_OPEN = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">int</span> state = STATE_CLOSE;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mDownX;</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">int</span> mBaseX;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//这是一个对外暴露的API，而调用这个API的是SwipeMenuListView，那么MotionEvent是SwipeMenuListView的MotionEvent</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSwipe</span><span class="params">(MotionEvent event)</span> </span>&#123;	</span><br><span class="line">      	<span class="comment">//Gesture的判断</span></span><br><span class="line">		mGestureDetector.onTouchEvent(event);</span><br><span class="line">		<span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="comment">//记录down的X坐标</span></span><br><span class="line">			mDownX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">            <span class="comment">//滑动标志位置为false</span></span><br><span class="line">			isFling = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">//计算手指滑动距离</span></span><br><span class="line">			<span class="keyword">int</span> dis = (<span class="keyword">int</span>) (mDownX - event.getX());</span><br><span class="line">			<span class="keyword">if</span> (state == STATE_OPEN) &#123;</span><br><span class="line">              	<span class="comment">//DIRECTION_LEFT = 1 || DIRECTION_RIGHT = -1</span></span><br><span class="line">				dis += mMenuView.getWidth()*mSwipeDirection;;</span><br><span class="line">			&#125;</span><br><span class="line">			swipe(dis);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="comment">//滑动状态 &amp;&amp; 滑开距离 &gt; SwipeMenuView / 2 &amp;&amp; 滑动方向 == mSwipeDirection</span></span><br><span class="line">			<span class="keyword">if</span> ((isFling || Math.abs(mDownX - event.getX()) &gt; (mMenuView.getWidth() / <span class="number">2</span>)) &amp;&amp; Math.signum(mDownX - event.getX()) == mSwipeDirection) &#123;</span><br><span class="line">				<span class="comment">//滑开这个menu</span></span><br><span class="line">				smoothOpenMenu();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">//关闭这个menu</span></span><br><span class="line">				smoothCloseMenu();</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swipe</span><span class="params">(<span class="keyword">int</span> dis)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//通过dis的正负 与 mSwipeDirection 对比相同与否</span></span><br><span class="line">		<span class="keyword">if</span> (Math.signum(dis) != mSwipeDirection) &#123;</span><br><span class="line">          	<span class="comment">//不相同的话dis归0，表示不滑动</span></span><br><span class="line">			dis = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Math.abs(dis) &gt; mMenuView.getWidth()) &#123;<span class="comment">//此时说明相同</span></span><br><span class="line">          	<span class="comment">//如果dis大于了SwipeMenuView的宽度的话，将dis设置为SwipeMenuView的宽度</span></span><br><span class="line">			dis = mMenuView.getWidth()*mSwipeDirection;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//用户的View移动，腾出位置</span></span><br><span class="line">		mContentView.layout(-dis, mContentView.getTop(),</span><br><span class="line">				mContentView.getWidth() -dis, getMeasuredHeight());</span><br><span class="line">		<span class="comment">//通过方向移动SwipeMenuView</span></span><br><span class="line">		<span class="keyword">if</span> (mSwipeDirection == SwipeMenuListView.DIRECTION_LEFT) &#123;</span><br><span class="line"></span><br><span class="line">			mMenuView.layout(mContentView.getWidth() - dis, mMenuView.getTop(),</span><br><span class="line">					mContentView.getWidth() + mMenuView.getWidth() - dis,</span><br><span class="line">					mMenuView.getBottom());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mMenuView.layout(-mMenuView.getWidth() - dis, mMenuView.getTop(),</span><br><span class="line">					- dis, mMenuView.getBottom());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">//顺滑的滑开menu</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothOpenMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//将状态设置为STATE_OPEN</span></span><br><span class="line">		state = STATE_OPEN;</span><br><span class="line">      	<span class="comment">//通过方向来判断需要往那个方向滑</span></span><br><span class="line">		<span class="keyword">if</span> (mSwipeDirection == SwipeMenuListView.DIRECTION_LEFT) &#123;</span><br><span class="line">			mOpenScroller.startScroll(-mContentView.getLeft(), <span class="number">0</span>, mMenuView.getWidth(), <span class="number">0</span>, <span class="number">350</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mOpenScroller.startScroll(mContentView.getLeft(), <span class="number">0</span>, mMenuView.getWidth(), <span class="number">0</span>, <span class="number">350</span>);</span><br><span class="line">		&#125;</span><br><span class="line">      	<span class="comment">//刷新</span></span><br><span class="line">		postInvalidate();</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">//顺滑的关闭menu</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothCloseMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将状态设置为STATE_CLOSE</span></span><br><span class="line">		state = STATE_CLOSE;</span><br><span class="line">		<span class="keyword">if</span> (mSwipeDirection == SwipeMenuListView.DIRECTION_LEFT) &#123;</span><br><span class="line">          	<span class="comment">//设置baseX</span></span><br><span class="line">			mBaseX = -mContentView.getLeft();</span><br><span class="line">			mCloseScroller.startScroll(<span class="number">0</span>, <span class="number">0</span>, mMenuView.getWidth(), <span class="number">0</span>, <span class="number">350</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mBaseX = mMenuView.getRight();</span><br><span class="line">          <span class="comment">//设置baseX</span></span><br><span class="line">			mCloseScroller.startScroll(<span class="number">0</span>, <span class="number">0</span>, mMenuView.getWidth(), <span class="number">0</span>, <span class="number">350</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		postInvalidate();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//直接关闭menu</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//如果Scroller还没有滑完，就阻断滑动动画</span></span><br><span class="line">		<span class="keyword">if</span> (mCloseScroller.computeScrollOffset()) &#123;</span><br><span class="line">			mCloseScroller.abortAnimation();</span><br><span class="line">		&#125;</span><br><span class="line">      	<span class="comment">//如果状态为STATE_OPEN</span></span><br><span class="line">		<span class="keyword">if</span> (state == STATE_OPEN) &#123;</span><br><span class="line">          	<span class="comment">//将状态设置为STATE_CLOSE</span></span><br><span class="line">			state = STATE_CLOSE;</span><br><span class="line">          	<span class="comment">//调用swipe()--&gt;调用layout()</span></span><br><span class="line">			swipe(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//scroll开始滑动的时候就进到了这里</span></span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (state == STATE_OPEN) &#123;</span><br><span class="line">			<span class="keyword">if</span> (mOpenScroller.computeScrollOffset()) &#123;</span><br><span class="line">              <span class="comment">//调用swipe()--&gt;调用layout()</span></span><br><span class="line">				swipe(mOpenScroller.getCurrX()*mSwipeDirection);</span><br><span class="line">				postInvalidate();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (mCloseScroller.computeScrollOffset()) &#123;</span><br><span class="line">              	<span class="comment">//通过mBaseX的值来计算滑动</span></span><br><span class="line">				swipe((mBaseX - mCloseScroller.getCurrX())*mSwipeDirection);</span><br><span class="line">				postInvalidate();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SwipeMenuLayout</code> 通过 <code>Scroller</code> 达到顺滑的打开和关闭，同时 <code>Scroller</code> 每次计算出滑动的值的时候传递给 <code>swipe(int)</code> 方法，该方法通过 <code>View#layout(...)</code> 方法实现位置的变换。</p>
<p>好，那么看完了 <code>SwipeMenuLayout</code> ，回过头来再看看 <code>SwipeMenuListView</code> ：</p>
<h3 id="SwipeMenuListView-0x01"><a href="#SwipeMenuListView-0x01" class="headerlink" title="SwipeMenuListView 0x01"></a>SwipeMenuListView 0x01</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuListView</span> <span class="keyword">extends</span> <span class="title">ListView</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOUCH_STATE_NONE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOUCH_STATE_X = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOUCH_STATE_Y = <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DIRECTION_LEFT = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DIRECTION_RIGHT = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDirection = <span class="number">1</span>;<span class="comment">//swipe from right to left by default</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTouchState;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mTouchPosition;</span><br><span class="line">    <span class="keyword">private</span> SwipeMenuLayout mTouchView;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> mDownX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mDownY;</span><br><span class="line"></span><br><span class="line">	    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//处理一些有时候不希望用户有操作，或者关闭menu的时候的手势操作等</span></span><br><span class="line">        <span class="keyword">if</span> (ev.getAction() != MotionEvent.ACTION_DOWN &amp;&amp; mTouchView == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">      	<span class="comment">//得到action</span></span><br><span class="line">        <span class="keyword">int</span> action = ev.getAction();</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            	<span class="comment">//之前的点击位置</span></span><br><span class="line">                <span class="keyword">int</span> oldPos = mTouchPosition;</span><br><span class="line">                mDownX = ev.getX();<span class="comment">//记录X</span></span><br><span class="line">                mDownY = ev.getY();<span class="comment">//记录Y</span></span><br><span class="line">                mTouchState = TOUCH_STATE_NONE;</span><br><span class="line">				<span class="comment">//得到新的手指的位置</span></span><br><span class="line">                mTouchPosition = pointToPosition((<span class="keyword">int</span>) ev.getX(), (<span class="keyword">int</span>) ev.getY());</span><br><span class="line">				<span class="comment">//如果是同一位置 &amp;&amp;  mTouchView != null &amp;&amp; mTouchView 滑开</span></span><br><span class="line">                <span class="keyword">if</span> (mTouchPosition == oldPos &amp;&amp; mTouchView != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; mTouchView.isOpen()) &#123;</span><br><span class="line">                  	<span class="comment">//将mTouchState置为TOUCH_STATE_X</span></span><br><span class="line">                    mTouchState = TOUCH_STATE_X;</span><br><span class="line">                  	<span class="comment">//剩下的交给SwipeMenuLayout来处理</span></span><br><span class="line">                    mTouchView.onSwipe(ev);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">//得到当前手指的 item View</span></span><br><span class="line">                View view = getChildAt(mTouchPosition - getFirstVisiblePosition());</span><br><span class="line">				<span class="comment">//这里判断是指当前手指对应的view与mTouchView不是同一个，且mTouchView是滑开的状态，那么就去处理mTouchView，将menu关闭，然后结束这次手势操作</span></span><br><span class="line">                <span class="keyword">if</span> (mTouchView != <span class="keyword">null</span> &amp;&amp; mTouchView.isOpen()) &#123;</span><br><span class="line">                  	<span class="comment">//关闭menu</span></span><br><span class="line">                    mTouchView.smoothCloseMenu();</span><br><span class="line">                  	<span class="comment">//置为null</span></span><br><span class="line">                    mTouchView = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// return super.onTouchEvent(ev);</span></span><br><span class="line">                    <span class="comment">// try to cancel the touch event</span></span><br><span class="line">                    MotionEvent cancelEvent = MotionEvent.obtain(ev);</span><br><span class="line">                    cancelEvent.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">                    onTouchEvent(cancelEvent);</span><br><span class="line">                  	<span class="comment">//进行close回调</span></span><br><span class="line">                    <span class="keyword">if</span> (mOnMenuStateChangeListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mOnMenuStateChangeListener.onMenuClose(oldPos);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (view <span class="keyword">instanceof</span> SwipeMenuLayout) &#123;</span><br><span class="line">                  	<span class="comment">//将最新的view传递给mTouchView</span></span><br><span class="line">                    mTouchView = (SwipeMenuLayout) view;</span><br><span class="line">                  	<span class="comment">//设置方向</span></span><br><span class="line">                    mTouchView.setSwipeDirection(mDirection);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mTouchView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  	<span class="comment">//剩下的交给SwipeMenuLayout来处理</span></span><br><span class="line">                    mTouchView.onSwipe(ev);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            	<span class="comment">//计算x和y滑动了多少距离</span></span><br><span class="line">                <span class="keyword">float</span> dy = Math.abs((ev.getY() - mDownY));</span><br><span class="line">                <span class="keyword">float</span> dx = Math.abs((ev.getX() - mDownX));</span><br><span class="line">            	<span class="comment">//当mTouchState为TOUCH_STATE_X时候</span></span><br><span class="line">                <span class="keyword">if</span> (mTouchState == TOUCH_STATE_X) &#123;</span><br><span class="line">                  	<span class="comment">//交给SwipeMenuLayout处理移动的操作</span></span><br><span class="line">                    <span class="keyword">if</span> (mTouchView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mTouchView.onSwipe(ev);</span><br><span class="line">                    &#125;</span><br><span class="line">                  	<span class="comment">//将item的drawable设置为normal的</span></span><br><span class="line">                    getSelector().setState(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;);</span><br><span class="line">                  	<span class="comment">//让ListView对此次操作不做任何处理</span></span><br><span class="line">                    ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">                    <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mTouchState == TOUCH_STATE_NONE) &#123;<span class="comment">//当mTouchState为TOUCH_STATE_NONE时候</span></span><br><span class="line">                    <span class="keyword">if</span> (Math.abs(dy) &gt; MAX_Y) &#123;<span class="comment">//计算Y上的距离，Y上是否有动作</span></span><br><span class="line">                        mTouchState = TOUCH_STATE_Y;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dx &gt; MAX_X) &#123;<span class="comment">//计算X上的距离，X上是否有动作</span></span><br><span class="line">                        mTouchState = TOUCH_STATE_X;</span><br><span class="line">                      	<span class="comment">//回调</span></span><br><span class="line">                        <span class="keyword">if</span> (mOnSwipeListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            mOnSwipeListener.onSwipeStart(mTouchPosition);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            	<span class="comment">//X上有动作</span></span><br><span class="line">                <span class="keyword">if</span> (mTouchState == TOUCH_STATE_X) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mTouchView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                      	<span class="comment">//是否滑开</span></span><br><span class="line">                        <span class="keyword">boolean</span> isBeforeOpen = mTouchView.isOpen();</span><br><span class="line">                      	<span class="comment">//让SwipeMenuLayout处理</span></span><br><span class="line">                        mTouchView.onSwipe(ev);</span><br><span class="line">                      	<span class="comment">//是否滑开，因为手指抬起的时候SwipeMenuLayout回去判断是否满足调教而开启和关闭</span></span><br><span class="line">                        <span class="keyword">boolean</span> isAfterOpen = mTouchView.isOpen();</span><br><span class="line">                      	<span class="comment">//根据之前和之后的滑开状态来进行回调</span></span><br><span class="line">                        <span class="keyword">if</span> (isBeforeOpen != isAfterOpen &amp;&amp; mOnMenuStateChangeListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (isAfterOpen) &#123;</span><br><span class="line">                                mOnMenuStateChangeListener.onMenuOpen(mTouchPosition);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                mOnMenuStateChangeListener.onMenuClose(mTouchPosition);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (!isAfterOpen) &#123;</span><br><span class="line">                            mTouchPosition = -<span class="number">1</span>;</span><br><span class="line">                            mTouchView = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (mOnSwipeListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mOnSwipeListener.onSwipeEnd(mTouchPosition);</span><br><span class="line">                    &#125;</span><br><span class="line">                  	<span class="comment">//希望ListView不处理接下来的手势操作</span></span><br><span class="line">                    ev.setAction(MotionEvent.ACTION_CANCEL);</span><br><span class="line">                    <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>MotionEvent.ACTION_DOWN</code> 中有一段是 <code>if (mTouchView != null &amp;&amp; mTouchView.isOpen()) {...}</code> ，这里的判断是指当前手指对应的 view 与 mTouchView 不是同一个的话，且 mTouchView 是滑开的状态，那么就去处理 mTouchView ，将 menu 关闭，然后结束这次手势操作，这里可以发现结束手势操作之后，手指不离开屏幕的话也是无法滑动的，因为就是一开始的 <code>if (ev.getAction() != MotionEvent.ACTION_DOWN &amp;&amp; mTouchView == null)</code> ，满足条件就会调用 <code>return super.onTouchEvent(ev);</code> ，而 ev 的 action 一直是 CANCEL 。</p>
<p>在 <code>MotionEvent.ACTION_MOVE</code> 中 <code>mTouchView.onSwipe(ev)</code> 之后 <code>ev.setAction(MotionEvent.ACTION_CANCEL); super.onTouchEvent(ev);</code> 是因为 <code>SwipeMenuLayout</code> 移动位置的时候，手指可能在 Y 轴上的动作也比较大，此时让 ListView 忽略，直接穿的 action 为 CANCEL ，这样 ListView 就不会因为在 Y 轴上有动作而滑动。</p>
<p><code>SwipeListView</code> 核心部分就分析完了。</p>
<h3 id="SwipeMenu"><a href="#SwipeMenu" class="headerlink" title="SwipeMenu"></a>SwipeMenu</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Context mContext;</span><br><span class="line">	<span class="keyword">private</span> List&lt;SwipeMenuItem&gt; mItems;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mViewType;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SwipeMenu</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		mContext = context;</span><br><span class="line">		mItems = <span class="keyword">new</span> ArrayList&lt;SwipeMenuItem&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mContext;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMenuItem</span><span class="params">(SwipeMenuItem item)</span> </span>&#123;</span><br><span class="line">		mItems.add(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeMenuItem</span><span class="params">(SwipeMenuItem item)</span> </span>&#123;</span><br><span class="line">		mItems.remove(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;SwipeMenuItem&gt; <span class="title">getMenuItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mItems;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> SwipeMenuItem <span class="title">getMenuItem</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mItems.get(index);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mViewType;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setViewType</span><span class="params">(<span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mViewType = viewType;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前代码里面也出现过，这里把这部分数据结构拿出来。</p>
<h3 id="SwipeMenuItem"><a href="#SwipeMenuItem" class="headerlink" title="SwipeMenuItem"></a>SwipeMenuItem</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeMenuItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> Context mContext;</span><br><span class="line">	<span class="keyword">private</span> String title;</span><br><span class="line">	<span class="keyword">private</span> Drawable icon;</span><br><span class="line">	<span class="keyword">private</span> Drawable background;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> titleColor;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> titleSize;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SwipeMenuItem</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		mContext = context;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTitleColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> titleColor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTitleSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> titleSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitleSize</span><span class="params">(<span class="keyword">int</span> titleSize)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.titleSize = titleSize;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitleColor</span><span class="params">(<span class="keyword">int</span> titleColor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.titleColor = titleColor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> title;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.title = title;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">		setTitle(mContext.getString(resId));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Drawable <span class="title">getIcon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> icon;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Drawable icon)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.icon = icon;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.icon = mContext.getResources().getDrawable(resId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Drawable <span class="title">getBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> background;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(Drawable background)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.background = background;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.background = mContext.getResources().getDrawable(resId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> width;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前代码里面也出现过，这里把这部分数据结构拿出来。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>在 <code>SwipeListView</code> 手势那部分的 <code>ACTION_CANCEL</code> 很经典！</li>
<li>ListView 的手势操作太复杂，没有通过 <code>onInterceptTouchEvent</code> 来拦截事件，转而是将 Event 传递给 item View ，让 item View 去操作</li>
<li>View 的移动是通过 <code>View.layout(...)</code> 来实现的</li>
<li>平滑的移动是通过 <code>Scroller</code> 来实现的</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ListView </tag>
            
            <tag> 源码 </tag>
            
            <tag> 自定义控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bilibili-drawee-text-view源码解析]]></title>
      <url>/2016/05/15/drawee-text-view-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/Bilibili/drawee-text-view" target="_blank" rel="external">drawee-text-view</a>      分析版本：<a href="https://github.com/Bilibili/drawee-text-view/tree/37c372cb508573e3637c5b2dd0cc47e9492031d6" target="_blank" rel="external">37c372</a></p>
</blockquote>
<p>drawee-text-view 是一个基于 Fresco 的简易的 spannable TextView。</p>
<a id="more"></a>
<h2 id="drawee-text-view"><a href="#drawee-text-view" class="headerlink" title="drawee-text-view"></a>drawee-text-view</h2><p><img src="http://yydcdut.github.io/img/drawee-text-view_art.png" alt="drawee-text-view"></p>
<p>通过 <code>SpannableString</code> 或者 <code>SpannaleStringBuilder</code> 来实现在 TextView 中显示图片，但是系统提供的 <code>ImageSpan</code> 只能获取本地的图片，所以这个基于 Fresco 的 TextView 应运而生。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DraweeTextView textview = (DraweeTextView)findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">SpannableStringBuilder builder = <span class="keyword">new</span> SpannableStringBuilder();</span><br><span class="line">builder.append(<span class="string">"2333333\n"</span>)</span><br><span class="line">start = builder.length();</span><br><span class="line">builder.append(<span class="string">"[emotion:tv_cheers]"</span>);</span><br><span class="line">DraweeSpan span = <span class="keyword">new</span> DraweeSpan(<span class="string">"http://static.yo9.com/web/emotions/tv_cheers.png"</span>);</span><br><span class="line">builder.setSpan(span, start, builder.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">builder.append(<span class="string">"bilibili- ( ゜- ゜)つロ 乾杯~\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">textview.setText(builder);</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="DraweeTextView"><a href="#DraweeTextView" class="headerlink" title="DraweeTextView"></a>DraweeTextView</h3><p>一个控件的源码阅读我一般是从构造函数开始，然后再看最常见的暴露出去的 API，所以这里我们从构造函数开始。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraweeTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DraweeTextView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraweeTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraweeTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@TargetApi</span>(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraweeTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里看到 <code>DraweeTextView</code> 是继承于 TextView ，那么再看看覆盖了哪些 API ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraweeTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mHasDraweeInText;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">//------  与View的生命周期相关  -----</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttachedToWindow();</span><br><span class="line">        onAttach();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinishTemporaryDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onFinishTemporaryDetach();</span><br><span class="line">        onAttach();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">        onDetach();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTemporaryDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStartTemporaryDetach();</span><br><span class="line">        onDetach();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//------  与View的生命周期相关  ----- </span></span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidateDrawable</span><span class="params">(Drawable dr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mHasDraweeInText) &#123;</span><br><span class="line">            <span class="comment">/* invalidate the whole view in this case because it's very</span><br><span class="line">             * hard to know what the bounds of drawables actually is.</span><br><span class="line">             */</span></span><br><span class="line">            invalidate();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.invalidateDrawable(dr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Attach DraweeSpans in text</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DraweeSpan[] images = getImages();</span><br><span class="line">        <span class="keyword">for</span> (DraweeSpan image : images) &#123;</span><br><span class="line">            image.onAttach(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DraweeSpan[] getImages() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mHasDraweeInText &amp;&amp; length() &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ((Spanned) getText()).getSpans(<span class="number">0</span>, length(), DraweeSpan.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DraweeSpan[<span class="number">0</span>]; <span class="comment">//<span class="doctag">TODO:</span> pool empty typed array</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Detach all of the DraweeSpans in text</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DraweeSpan[] images = getImages();</span><br><span class="line">        <span class="keyword">for</span> (DraweeSpan image : images) &#123;</span><br><span class="line">            Drawable drawable = image.getDrawable();</span><br><span class="line">            <span class="comment">// reset callback first</span></span><br><span class="line">            <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                unscheduleDrawable(drawable);</span><br><span class="line">            &#125;</span><br><span class="line">            image.onDetach();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(CharSequence text, BufferType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mHasDraweeInText) &#123;</span><br><span class="line">            onDetach(); <span class="comment">// detach all old images</span></span><br><span class="line">            mHasDraweeInText = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">            <span class="comment">// find DraweeSpan in text</span></span><br><span class="line">            DraweeSpan[] spans = ((Spanned) text).getSpans(<span class="number">0</span>, text.length(), DraweeSpan.class);</span><br><span class="line">            mHasDraweeInText = spans.length &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.setText(text, type);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从整个 View 的生命周期看，在生命开始的时候调用了 <code>onAttach()</code> ，在生命结束的时候调用了 <code>onDetach()</code> 。</p>
<p>在 <code>onAttach</code> 的时候去获取当前内容里面有多少 <code>DraweeSpan</code> 这个 Span ，然后遍历  <code>DraweeSpan</code> 数组，调用  <code>DraweeSpan#onAttach(View)</code> 。</p>
<p>在 <code>onDetach</code> 的时候同样去获取内容中有多少 <code>DraweeSpan</code> 这个 Span ，然后遍历  <code>DraweeSpan</code> 数组，调用 <code>DraweeSpan#getDrawable()</code> 得到 Drawable ，再通过 <code>unscheduleDrawable()</code> 来释放，最后再调用 <code>DraweeSpan#onDetach();</code> 。</p>
<p>而 <code>invalidateDrawable(Drawable)</code> 是 Drawable.Callback 的方法，TextView 实现了该接口。如果被调用，那么就去判断 <code>mHasDraweeInText</code> ，如果为 true 的话进行 View 的刷新。</p>
<p>另外一个 API 是 <code>setText(CharSequence, BufferType)</code> ，当外部每次调用之后，都会去判断一下 <code>mHasDraweeInText</code> 参数，如果为 true 的话，说明之前处理过 drawable ，那么先将之前的 drawable 回收掉，再去重新处理新数据里面的 <code>DraweeSpan</code> 数据。</p>
<h3 id="DraweeSpan"><a href="#DraweeSpan" class="headerlink" title="DraweeSpan"></a>DraweeSpan</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraweeSpan</span> <span class="keyword">extends</span> <span class="title">DynamicDrawableSpan</span> <span class="keyword">implements</span> <span class="title">DeferredReleaser</span>.<span class="title">Releasable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DeferredReleaser mDeferredReleaser;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ForwardingDrawable mActualDrawable;</span><br><span class="line">    <span class="keyword">private</span> CloseableReference&lt;CloseableImage&gt; mFetchedImage;<span class="comment">//返回的数据</span></span><br><span class="line">    <span class="keyword">private</span> DataSource&lt;CloseableReference&lt;CloseableImage&gt;&gt; mDataSource;<span class="comment">//Fresco的访问资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsRequestSubmitted;<span class="comment">//是否进行了IO操作</span></span><br><span class="line">    <span class="keyword">private</span> Drawable mDrawable;<span class="comment">//最终的drawable</span></span><br><span class="line">    <span class="keyword">private</span> Drawable mPlaceHolder;<span class="comment">//占位</span></span><br><span class="line">    <span class="keyword">private</span> View mAttachedView;<span class="comment">//TextView</span></span><br><span class="line">    <span class="keyword">private</span> String mImageUri;<span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsAttached;<span class="comment">//是否在TextView中了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * <span class="doctag">@see</span> ImageRequest#fromUri(String)</span><br><span class="line">     * <span class="doctag">@see</span> com.facebook.common.util.UriUtil</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraweeSpan</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(uri, createEmptyDrawable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DraweeSpan</span><span class="params">(String uri, Drawable placeHolder)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//对齐底部</span></span><br><span class="line">        <span class="keyword">super</span>(ALIGN_BOTTOM);</span><br><span class="line">		<span class="comment">//图片地址</span></span><br><span class="line">        mImageUri = uri;</span><br><span class="line">		<span class="comment">//Fresco中的类，作用发送一个Message到主Looper中，当Looper循环分发Message出去时候进行回调</span></span><br><span class="line">        mDeferredReleaser = DeferredReleaser.getInstance();</span><br><span class="line">		<span class="comment">//占位Drawable</span></span><br><span class="line">        mPlaceHolder = placeHolder;</span><br><span class="line">        <span class="comment">// create forwarding drawable with placeholder</span></span><br><span class="line">		<span class="comment">//创建ForwardingDrawable</span></span><br><span class="line">        mActualDrawable = <span class="keyword">new</span> ForwardingDrawable(mPlaceHolder);</span><br><span class="line">		<span class="comment">//设置大小</span></span><br><span class="line">        Rect bounds = mPlaceHolder.getBounds();</span><br><span class="line">        <span class="keyword">if</span> (bounds.right == <span class="number">0</span> || bounds.bottom == <span class="number">0</span>) &#123;</span><br><span class="line">            mActualDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, mPlaceHolder.getIntrinsicWidth(), mPlaceHolder.getIntrinsicHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mActualDrawable.setBounds(bounds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个透明的ColorDrawable来当占位Drawable</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Drawable <span class="title">createEmptyDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ColorDrawable d = <span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT);</span><br><span class="line">        d.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">getDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mActualDrawable;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//标志位归位</span></span><br><span class="line">        mIsRequestSubmitted = <span class="keyword">false</span>;</span><br><span class="line">        mIsAttached = <span class="keyword">false</span>;</span><br><span class="line">        mAttachedView = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//关闭资源</span></span><br><span class="line">        <span class="keyword">if</span> (mDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mDataSource.close();</span><br><span class="line">            mDataSource = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//释放资源</span></span><br><span class="line">        <span class="keyword">if</span> (mDrawable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            releaseDrawable(mDrawable);</span><br><span class="line">        &#125;</span><br><span class="line">        mDrawable = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mFetchedImage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            CloseableReference.closeSafely(mFetchedImage);</span><br><span class="line">            mFetchedImage = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">releaseDrawable</span><span class="params">(@Nullable Drawable drawable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (drawable <span class="keyword">instanceof</span> DrawableWithCaches) &#123;</span><br><span class="line">            ((DrawableWithCaches) drawable).dropCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DraweeSpan</code> 继承于 <code>DynamicDrawableSpan</code> ，需要覆盖 <code>getDrawable()</code> 方法，而在 <code>getDrawable()</code> 中返回的是 <code>ForwardingDrawable</code> 。<code>DraweeSpan</code>  还实现了 <code>DeferredReleaser.Releasable</code> 接口，覆盖 <code>release()</code> 方法，实现了资源的释放。</p>
<p>那么我们可以从 <code>onAttach(View)</code> 开始看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraweeSpan</span> <span class="keyword">extends</span> <span class="title">DynamicDrawableSpan</span> <span class="keyword">implements</span> <span class="title">DeferredReleaser</span>.<span class="title">Releasable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(@NonNull View view)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//是否attach到View上的判断标志位</span></span><br><span class="line">        mIsAttached = <span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">//第一次进来mAttachedView为null，那么肯定不相等</span></span><br><span class="line">        <span class="keyword">if</span> (mAttachedView != view) &#123;</span><br><span class="line">            mActualDrawable.setCallback(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (mAttachedView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"has been attached to view:"</span> + mAttachedView);</span><br><span class="line">            &#125;</span><br><span class="line">            mAttachedView = view;</span><br><span class="line">            mActualDrawable.setCallback(mAttachedView);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//取消release的回调</span></span><br><span class="line">        mDeferredReleaser.cancelDeferredRelease(<span class="keyword">this</span>);</span><br><span class="line">		<span class="comment">//如果没有进行IO操作</span></span><br><span class="line">        <span class="keyword">if</span> (!mIsRequestSubmitted) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ImagePipelineFactory.getInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">                <span class="comment">// Image pipeline is not initialized</span></span><br><span class="line">                ImagePipelineFactory.initialize(mAttachedView.getContext().getApplicationContext());</span><br><span class="line">            &#125;</span><br><span class="line">            submitRequest();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//IO操作标志位设置为true</span></span><br><span class="line">        mIsRequestSubmitted = <span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">//通过URI的hashcode得到的当做id</span></span><br><span class="line">        <span class="keyword">final</span> String id = getId();</span><br><span class="line">		<span class="comment">//得到ImagePipeline</span></span><br><span class="line">        mDataSource = ImagePipelineFactory.getInstance().getImagePipeline()</span><br><span class="line">                .fetchDecodedImage(ImageRequest.fromUri(getImageUri()), <span class="keyword">null</span>);</span><br><span class="line">		<span class="comment">//得到订阅者</span></span><br><span class="line">        DataSubscriber&lt;CloseableReference&lt;CloseableImage&gt;&gt; subscriber</span><br><span class="line">                = <span class="keyword">new</span> BaseDataSubscriber&lt;CloseableReference&lt;CloseableImage&gt;&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewResultImpl</span><span class="params">(DataSource&lt;CloseableReference&lt;CloseableImage&gt;&gt; dataSource)</span> </span>&#123;</span><br><span class="line">				<span class="comment">//是否结束</span></span><br><span class="line">                <span class="keyword">boolean</span> isFinished = dataSource.isFinished();</span><br><span class="line">				<span class="comment">//拿到结果</span></span><br><span class="line">                CloseableReference&lt;CloseableImage&gt; result = dataSource.getResult();</span><br><span class="line">				<span class="comment">//对是否成功分别进行处理</span></span><br><span class="line">                <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    onNewResultInternal(id, dataSource, result, isFinished);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFinished) &#123;</span><br><span class="line">                    onFailureInternal(id, dataSource, <span class="keyword">new</span> NullPointerException(), <span class="comment">/* isFinished */</span> <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFailureImpl</span><span class="params">(DataSource&lt;CloseableReference&lt;CloseableImage&gt;&gt; dataSource)</span> </span>&#123;</span><br><span class="line">				<span class="comment">//失败</span></span><br><span class="line">                onFailureInternal(id, dataSource, dataSource.getFailureCause(), <span class="comment">/* isFinished */</span> <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">		<span class="comment">//执行</span></span><br><span class="line">        mDataSource.subscribe(subscriber, UiThreadImmediateExecutorService.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(getImageUri().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getImageUri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mImageUri;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当进行 <code>onAttach(View)</code> 操作之后，先判断设置进来的 View 和之前设置的是否一样，然后判断是否进行了 io 操作了，如果没有的话通过 Fresco 进行 io 操作。使用的是 Fresco 的 <code>ImagePipelineFactory</code> 进行处理，对结果是否成功来分别处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraweeSpan</span> <span class="keyword">extends</span> <span class="title">DynamicDrawableSpan</span> <span class="keyword">implements</span> <span class="title">DeferredReleaser</span>.<span class="title">Releasable</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 结果是成功的</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> id</span><br><span class="line">     * <span class="doctag">@param</span> dataSource</span><br><span class="line">     * <span class="doctag">@param</span> result</span><br><span class="line">     * <span class="doctag">@param</span> isFinished</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onNewResultInternal</span><span class="params">(String id, DataSource&lt;CloseableReference&lt;CloseableImage&gt;&gt; dataSource, CloseableReference&lt;CloseableImage&gt; result, <span class="keyword">boolean</span> isFinished)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ignored this result</span></span><br><span class="line">		<span class="comment">//如果数据不对的话，忽略</span></span><br><span class="line">        <span class="keyword">if</span> (!getId().equals(id)</span><br><span class="line">                || dataSource != mDataSource</span><br><span class="line">                || !mIsRequestSubmitted) &#123;</span><br><span class="line">            CloseableReference.closeSafely(result);</span><br><span class="line">            dataSource.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//得到drawable</span></span><br><span class="line">        Drawable drawable;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            drawable = createDrawable(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            CloseableReference.closeSafely(result);</span><br><span class="line">            onFailureInternal(id, dataSource, exception, isFinished);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CloseableReference previousImage = mFetchedImage;</span><br><span class="line">        Drawable previousDrawable = mDrawable;</span><br><span class="line">		<span class="comment">//将最新的结果给mFetchedImage</span></span><br><span class="line">        mFetchedImage = result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// set the new image</span></span><br><span class="line">			<span class="comment">//设置新的drawable</span></span><br><span class="line">            <span class="keyword">if</span> (isFinished) &#123;</span><br><span class="line">                mDataSource = <span class="keyword">null</span>;</span><br><span class="line">                setImageWithIntrinsicBounds(drawable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (previousDrawable != <span class="keyword">null</span> &amp;&amp; previousDrawable != drawable) &#123;</span><br><span class="line">				<span class="comment">//释放</span></span><br><span class="line">                releaseDrawable(previousDrawable);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (previousImage != <span class="keyword">null</span> &amp;&amp; previousImage != result) &#123;</span><br><span class="line">                CloseableReference.closeSafely(previousImage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Drawable <span class="title">createDrawable</span><span class="params">(CloseableReference&lt;CloseableImage&gt; result)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//得到closeableImage</span></span><br><span class="line">        CloseableImage closeableImage = result.get();</span><br><span class="line">		<span class="comment">//如果是CloseableStaticBitmap的话</span></span><br><span class="line">        <span class="keyword">if</span> (closeableImage <span class="keyword">instanceof</span> CloseableStaticBitmap) &#123;</span><br><span class="line">			<span class="comment">//强转</span></span><br><span class="line">            CloseableStaticBitmap closeableStaticBitmap = (CloseableStaticBitmap) closeableImage;</span><br><span class="line">			<span class="comment">//得到BitmapDrawable</span></span><br><span class="line">            BitmapDrawable bitmapDrawable = createBitmapDrawable(closeableStaticBitmap.getUnderlyingBitmap());</span><br><span class="line">			<span class="comment">//判断方向，返回旋转后的drawable</span></span><br><span class="line">            <span class="keyword">return</span> (closeableStaticBitmap.getRotationAngle() != <span class="number">0</span> &amp;&amp; closeableStaticBitmap.getRotationAngle() != -<span class="number">1</span></span><br><span class="line">                    ? <span class="keyword">new</span> OrientedDrawable(bitmapDrawable, closeableStaticBitmap.getRotationAngle()) : bitmapDrawable);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (closeableImage <span class="keyword">instanceof</span> CloseableAnimatedImage) &#123;<span class="comment">//如果是CloseableAnimatedImage类型，比如gif？</span></span><br><span class="line">			<span class="comment">//得到结果</span></span><br><span class="line">            AnimatedImageResult image = ((CloseableAnimatedImage) closeableImage).getImageResult();</span><br><span class="line">			<span class="comment">//获得帧数</span></span><br><span class="line">            <span class="keyword">int</span> frame = image.getFrameForPreview();</span><br><span class="line">            CloseableReference&lt;Bitmap&gt; bitmap;</span><br><span class="line">			<span class="comment">//得到最后一帧的bitmap或者预览帧</span></span><br><span class="line">            <span class="keyword">if</span> (frame &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                bitmap = image.getDecodedFrame(frame);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bitmap = image.getPreviewBitmap();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bitmap != <span class="keyword">null</span> &amp;&amp; bitmap.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="comment">//转成BitmapDrawable</span></span><br><span class="line">                BitmapDrawable bitmapDrawable = createBitmapDrawable(bitmap.get());</span><br><span class="line">                <span class="keyword">return</span> bitmapDrawable;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Unrecognized image class: "</span> + closeableImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> BitmapDrawable <span class="title">createBitmapDrawable</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        BitmapDrawable drawable;</span><br><span class="line">        <span class="keyword">if</span> (mAttachedView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Context context = mAttachedView.getContext();</span><br><span class="line">            drawable = <span class="keyword">new</span> BitmapDrawable(context.getResources(), bitmap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// can't happen</span></span><br><span class="line">            drawable = <span class="keyword">new</span> BitmapDrawable(<span class="keyword">null</span>, bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> drawable;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageWithIntrinsicBounds</span><span class="params">(Drawable drawable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDrawable != drawable) &#123;</span><br><span class="line">			<span class="comment">//释放之前的drawable</span></span><br><span class="line">            releaseDrawable(mDrawable);</span><br><span class="line">			<span class="comment">//将新的drawable设置给ForwardingDrawable</span></span><br><span class="line">            mActualDrawable.setDrawable(drawable);</span><br><span class="line">			<span class="comment">//赋值给成员变量mDrawable</span></span><br><span class="line">            mDrawable = drawable;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">releaseDrawable</span><span class="params">(@Nullable Drawable drawable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (drawable <span class="keyword">instanceof</span> DrawableWithCaches) &#123;</span><br><span class="line">            ((DrawableWithCaches) drawable).dropCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是结果返回成功之后的处理，最主要的就是将得到的 drawable 赋值给 <code>ForwardingDrawable</code> ，而这里最主要的就是这个 <code>ForwardingDrawable</code> ，可以看一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingDrawable</span> <span class="keyword">extends</span> <span class="title">Drawable</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">TransformCallback</span>, <span class="title">TransformAwareDrawable</span>, <span class="title">DrawableParent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Drawable <span class="title">setDrawable</span><span class="params">(Drawable newDrawable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> setCurrent(newDrawable);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Sets a new drawable to be the delegate, and returns the old one (or null).</span><br><span class="line">   *</span><br><span class="line">   * &lt;p&gt;This method will cause the drawable to be invalidated.</span><br><span class="line">   * <span class="doctag">@param</span> newDelegate</span><br><span class="line">   * <span class="doctag">@return</span> the previous delegate</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Drawable <span class="title">setCurrent</span><span class="params">(Drawable newDelegate)</span> </span>&#123;</span><br><span class="line">    Drawable previousDelegate = setCurrentWithoutInvalidate(newDelegate);</span><br><span class="line">    invalidateSelf();<span class="comment">//这里重点！！</span></span><br><span class="line">    <span class="keyword">return</span> previousDelegate;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * As &#123;<span class="doctag">@code</span> setCurrent&#125;, but without invalidating a drawable. Subclasses are responsible to call</span><br><span class="line">   * &#123;<span class="doctag">@code</span> invalidateSelf&#125; on their own.</span><br><span class="line">   * <span class="doctag">@param</span> newDelegate</span><br><span class="line">   * <span class="doctag">@return</span> the previous delegate</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Drawable <span class="title">setCurrentWithoutInvalidate</span><span class="params">(Drawable newDelegate)</span> </span>&#123;</span><br><span class="line">    Drawable previousDelegate = mCurrentDelegate;</span><br><span class="line">    DrawableUtils.setCallbacks(previousDelegate, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    DrawableUtils.setCallbacks(newDelegate, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    DrawableUtils.setDrawableProperties(newDelegate, mDrawableProperties);</span><br><span class="line">    DrawableUtils.copyProperties(newDelegate, previousDelegate);<span class="comment">//这里重点！！</span></span><br><span class="line">    DrawableUtils.setCallbacks(newDelegate, <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">    mCurrentDelegate = newDelegate;</span><br><span class="line">    <span class="keyword">return</span> previousDelegate;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Use the current &#123;<span class="doctag">@link</span> Callback&#125; implementation to have this Drawable</span><br><span class="line">     * redrawn.  Does nothing if there is no Callback attached to the</span><br><span class="line">     * Drawable.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@see</span> Callback#invalidateDrawable</span><br><span class="line">     * <span class="doctag">@see</span> #getCallback()</span><br><span class="line">     * <span class="doctag">@see</span> #setCallback(android.graphics.drawable.Drawable.Callback)</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidateSelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Callback callback = getCallback();</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">//这里返回到DraweeTextView中，刷新自己</span></span><br><span class="line">            callback.invalidateDrawable(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DrawableUtils.copyProperties(newDelegate, previousDelegate);</code> 可以看这里：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawableUtils</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Copies various properties from one drawable to the other.</span><br><span class="line">   * <span class="doctag">@param</span> to drawable to copy properties to</span><br><span class="line">   * <span class="doctag">@param</span> from drawable to copy properties from</span><br><span class="line">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperties</span><span class="params">(Drawable to, Drawable from)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (from == <span class="keyword">null</span> || to == <span class="keyword">null</span> || to == from) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    to.setBounds(from.getBounds());</span><br><span class="line">    to.setChangingConfigurations(from.getChangingConfigurations());</span><br><span class="line">    to.setLevel(from.getLevel());</span><br><span class="line">    to.setVisible(from.isVisible(), <span class="comment">/* restart */</span> <span class="keyword">false</span>);</span><br><span class="line">    to.setState(from.getState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先将 from 的信息复制给 to ，然后调用 <code>invalidateSelf()</code> ，就通知到了 <code>DraweeTextView</code> 中刷新自己。</p>
<p>io 操作失败的话处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraweeSpan</span> <span class="keyword">extends</span> <span class="title">DynamicDrawableSpan</span> <span class="keyword">implements</span> <span class="title">DeferredReleaser</span>.<span class="title">Releasable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onFailureInternal</span><span class="params">(String id, DataSource&lt;CloseableReference&lt;CloseableImage&gt;&gt; dataSource, Throwable throwable, <span class="keyword">boolean</span> isFinished)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class="line">            Log.e(<span class="string">"ImageSpan"</span>, id + <span class="string">" load failure"</span>, throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ignored this result</span></span><br><span class="line">        <span class="keyword">if</span> (!getId().equals(id)</span><br><span class="line">                || dataSource != mDataSource</span><br><span class="line">                || !mIsRequestSubmitted) &#123;</span><br><span class="line">            dataSource.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isFinished) &#123;</span><br><span class="line">            mDataSource = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// Set the previously available image if available.</span></span><br><span class="line">            <span class="keyword">if</span> (mDrawable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mActualDrawable.setDrawable(mDrawable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是将原来的数据设置进去。</p>
<p>当 View 从 Activity 或者 Fragment 中 detach 的时候，会调用 <code>DraweeSpan</code> 的 <code>onDetach</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DraweeSpan</span> <span class="keyword">extends</span> <span class="title">DynamicDrawableSpan</span> <span class="keyword">implements</span> <span class="title">DeferredReleaser</span>.<span class="title">Releasable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mIsAttached) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mActualDrawable.setCallback(<span class="keyword">null</span>);</span><br><span class="line">        mAttachedView = <span class="keyword">null</span>;</span><br><span class="line">        reset();</span><br><span class="line">		<span class="comment">//释放，调用release()</span></span><br><span class="line">        mDeferredReleaser.scheduleDeferredRelease(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mActualDrawable.setDrawable(mPlaceHolder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>资源的释放很关键，在 <code>DraweeSpan</code> 中体现的很明显</li>
<li>几个关键的回调很重要，不然无法刷新 TextView 中的 Drawable</li>
<li>将 Fresco 替换掉其实也可以的，自己写 io 操作，主要是 <code>ForwardingDrawable</code> 中的那几部关键操作</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TextView </tag>
            
            <tag> 源码 </tag>
            
            <tag> 自定义控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SwipeBackLayout源码解析]]></title>
      <url>/2016/05/08/swipebacklayout-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">SwipeBackLayout</a>      分析版本：<a href="https://github.com/ikew0ng/SwipeBackLayout/tree/e4ddae6d2b8af9b606493cba36faef8beba94be2" target="_blank" rel="external">e4ddae6</a></p>
</blockquote>
<p>SwipeBackLayout 是一个仿 IOS 通过手势退出界面的开源库。</p>
<a id="more"></a>
<h2 id="SwipeBackLayout"><a href="#SwipeBackLayout" class="headerlink" title="SwipeBackLayout"></a>SwipeBackLayout</h2><p><img src="http://yydcdut.github.io/img/swipebacklayout.png" alt="SwipeBackLayout"></p>
<p>SwipeBackLayout 可以通过在左、右和下边缘来拖动整个 Activity 达到退出 Activity 的效果。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加到 Gradle ：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'me.imid.swipebacklayout.lib:library:1.0.0'</span></span><br></pre></td></tr></table></figure>
<p>继承 <code>SwipeBackActivity</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoActivity</span> <span class="keyword">extends</span> <span class="title">SwipeBackActivity</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>onCreate</code> 中<code>setContentView()</code> 照常使用</li>
<li>可以通过 <code>getSwipeBackLayout()</code> 定制 SwipeBackLayout</li>
</ul>
<p>在 <code>styles.xml</code> 中的主题中添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">name</span>=<span class="value">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>需要在项目中添加最新的 supportV4 包</p>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoActivity</span> <span class="keyword">extends</span> <span class="title">SwipeBackActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mBgColors;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> mBgIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mKeyTrackingMode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RadioGroup mTrackingModeGroup;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SwipeBackLayout mSwipeBackLayout;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_demo);</span><br><span class="line">        changeActionBarColor();</span><br><span class="line">        findViews();</span><br><span class="line">        mKeyTrackingMode = getString(R.string.key_tracking_mode);</span><br><span class="line">        mSwipeBackLayout = getSwipeBackLayout();</span><br><span class="line"></span><br><span class="line">        mTrackingModeGroup.setOnCheckedChangeListener(<span class="keyword">new</span> RadioGroup.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> edgeFlag;</span><br><span class="line">                <span class="keyword">switch</span> (checkedId) &#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.mode_left:</span><br><span class="line">                        edgeFlag = SwipeBackLayout.EDGE_LEFT;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.mode_right:</span><br><span class="line">                        edgeFlag = SwipeBackLayout.EDGE_RIGHT;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> R.id.mode_bottom:</span><br><span class="line">                        edgeFlag = SwipeBackLayout.EDGE_BOTTOM;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        edgeFlag = SwipeBackLayout.EDGE_ALL;</span><br><span class="line">                &#125;</span><br><span class="line">                mSwipeBackLayout.setEdgeTrackingEnabled(edgeFlag);</span><br><span class="line">                saveTrackingMode(edgeFlag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="SwipeBackActivity"><a href="#SwipeBackActivity" class="headerlink" title="SwipeBackActivity"></a>SwipeBackActivity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">SwipeBackActivityBase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SwipeBackActivityHelper mHelper;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mHelper = <span class="keyword">new</span> SwipeBackActivityHelper(<span class="keyword">this</span>);</span><br><span class="line">        mHelper.onActivityCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</span><br><span class="line">        mHelper.onPostCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">findViewById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        View v = <span class="keyword">super</span>.findViewById(id);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span> &amp;&amp; mHelper != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> mHelper.findViewById(id);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwipeBackLayout <span class="title">getSwipeBackLayout</span><span class="params">()</span> </span>&#123;<span class="comment">//SwipeBackActivityBase接口中的方法</span></span><br><span class="line">        <span class="keyword">return</span> mHelper.getSwipeBackLayout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwipeBackEnable</span><span class="params">(<span class="keyword">boolean</span> enable)</span> </span>&#123;<span class="comment">//SwipeBackActivityBase接口中的方法</span></span><br><span class="line">        getSwipeBackLayout().setEnableGesture(enable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollToFinishActivity</span><span class="params">()</span> </span>&#123;<span class="comment">//SwipeBackActivityBase接口中的方法</span></span><br><span class="line">        Utils.convertActivityToTranslucent(<span class="keyword">this</span>);</span><br><span class="line">        getSwipeBackLayout().scrollToFinishActivity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>SwipeBackActivity</code> 中实现了 <code>SwipeBackActivityBase</code> 接口，在 Activity 的生命周期函数 <code>onCreate()</code> 中创建了 <code>SwipeBackActivityHelper</code> 对象，<strong>该类的作用是设置 Activity 的透明和在  DecorView 中替换 SwipeBackLayout</strong> 。<code>onPostCreate()</code> 是在 Activity 完全运行起来之后才会被调用。其中 <code>findViewById()</code> 方法进行了判断，首先在 Activity 的 contentView 中获取，获取不到再到 <code>SwipeBackLayout</code> 中获取。</p>
<h3 id="SwipeBackActivityHelper"><a href="#SwipeBackActivityHelper" class="headerlink" title="SwipeBackActivityHelper"></a>SwipeBackActivityHelper</h3><p>在 <code>SwipeBackActivity</code> 的 <code>onCreate()</code> 中的调用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackActivityHelper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">private</span> SwipeBackLayout mSwipeBackLayout;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwipeBackActivityHelper</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        mActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置Window的background为透明</span></span><br><span class="line">        mActivity.getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT));</span><br><span class="line">        <span class="comment">//设置decorView没有background</span></span><br><span class="line">        mActivity.getWindow().getDecorView().setBackgroundDrawable(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//inflate一个SwipeBackLayout出来</span></span><br><span class="line">        mSwipeBackLayout = (SwipeBackLayout) LayoutInflater.from(mActivity).inflate(</span><br><span class="line">                me.imid.swipebacklayout.lib.R.layout.swipeback_layout, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//设置手势滑动监听器</span></span><br><span class="line">        mSwipeBackLayout.addSwipeListener(<span class="keyword">new</span> SwipeBackLayout.SwipeListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChange</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">float</span> scrollPercent)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEdgeTouch</span><span class="params">(<span class="keyword">int</span> edgeFlag)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//当有边界触摸的时候设置成透明的</span></span><br><span class="line">                Utils.convertActivityToTranslucent(mActivity);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollOverThreshold</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>onActivityCreate</code> 中主要就是将 window 、 decorView 的背景设置为透明的。</p>
<p>在 <code>SwipeBackActivity</code> 的 <code>onPostCreate()</code> 中的调用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackActivityHelper</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mSwipeBackLayout.attachToActivity(mActivity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>attachToActivity</code> 中的操作就是将 decorView 中的 childView 换成 <code>SwipeBackLayout</code> ，然后将 childView 添加到 <code>SwipeBackLayout</code> 中。</p>
<p>其他的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackActivityHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">findViewById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSwipeBackLayout != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mSwipeBackLayout.findViewById(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwipeBackLayout <span class="title">getSwipeBackLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSwipeBackLayout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SwipeBackLayout-1"><a href="#SwipeBackLayout-1" class="headerlink" title="SwipeBackLayout"></a>SwipeBackLayout</h3><p><code>SwipeBackLayout</code> 是一个 View ，可以从构造函数开始看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Minimum velocity that will be detected as a fling</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_FLING_VELOCITY = <span class="number">400</span>; <span class="comment">// dips per second</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] EDGE_FLAGS = &#123;</span><br><span class="line">            EDGE_LEFT, EDGE_RIGHT, EDGE_BOTTOM, EDGE_ALL</span><br><span class="line">    &#125;;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mEdgeFlag;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> ViewDragHelper mDragHelper;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SwipeBackLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwipeBackLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, R.attr.SwipeBackLayoutStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwipeBackLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        mDragHelper = ViewDragHelper.create(<span class="keyword">this</span>, <span class="keyword">new</span> ViewDragCallback());</span><br><span class="line"></span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.SwipeBackLayout, defStyle,</span><br><span class="line">                R.style.SwipeBackLayout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//与边缘可拖动的距离</span></span><br><span class="line">        <span class="keyword">int</span> edgeSize = a.getDimensionPixelSize(R.styleable.SwipeBackLayout_edge_size, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (edgeSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//设置给ViewDragHelper</span></span><br><span class="line">            setEdgeSize(edgeSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//边缘模式，分为EDGE_LEFT, EDGE_RIGHT, EDGE_BOTTOM, EDGE_ALL</span></span><br><span class="line">        <span class="keyword">int</span> mode = EDGE_FLAGS[a.getInt(R.styleable.SwipeBackLayout_edge_flag, <span class="number">0</span>)];</span><br><span class="line">        <span class="comment">//设置给ViewDragHelper</span></span><br><span class="line">        setEdgeTrackingEnabled(mode);</span><br><span class="line">        <span class="comment">//边缘滑动的时候的阴影</span></span><br><span class="line">        <span class="keyword">int</span> shadowLeft = a.getResourceId(R.styleable.SwipeBackLayout_shadow_left,</span><br><span class="line">                R.drawable.shadow_left);</span><br><span class="line">        <span class="keyword">int</span> shadowRight = a.getResourceId(R.styleable.SwipeBackLayout_shadow_right,</span><br><span class="line">                R.drawable.shadow_right);</span><br><span class="line">        <span class="keyword">int</span> shadowBottom = a.getResourceId(R.styleable.SwipeBackLayout_shadow_bottom,</span><br><span class="line">                R.drawable.shadow_bottom);</span><br><span class="line">        setShadow(shadowLeft, EDGE_LEFT);</span><br><span class="line">        setShadow(shadowRight, EDGE_RIGHT);</span><br><span class="line">        setShadow(shadowBottom, EDGE_BOTTOM);</span><br><span class="line">        a.recycle();</span><br><span class="line">        <span class="comment">//得到密度</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> density = getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="comment">//手势滑动最小速度</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> minVel = MIN_FLING_VELOCITY * density;</span><br><span class="line">        <span class="comment">//设置给ViewDragHelper</span></span><br><span class="line">        mDragHelper.setMinVelocity(minVel);</span><br><span class="line">        mDragHelper.setMaxVelocity(minVel * <span class="number">2f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Set the size of an edge. This is the range in pixels along the edges of</span><br><span class="line">     * this view that will actively detect edge touches or drags if edge</span><br><span class="line">     * tracking is enabled.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> size The size of an edge in pixels</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEdgeSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        mDragHelper.setEdgeSize(size);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Enable edge tracking for the selected edges of the parent view. The</span><br><span class="line">     * callback's</span><br><span class="line">     * &#123;<span class="doctag">@link</span> me.imid.swipebacklayout.lib.ViewDragHelper.Callback#onEdgeTouched(int, int)&#125;</span><br><span class="line">     * and</span><br><span class="line">     * &#123;<span class="doctag">@link</span> me.imid.swipebacklayout.lib.ViewDragHelper.Callback#onEdgeDragStarted(int, int)&#125;</span><br><span class="line">     * methods will only be invoked for edges for which edge tracking has been</span><br><span class="line">     * enabled.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> edgeFlags Combination of edge flags describing the edges to watch</span><br><span class="line">     * <span class="doctag">@see</span> #EDGE_LEFT</span><br><span class="line">     * <span class="doctag">@see</span> #EDGE_RIGHT</span><br><span class="line">     * <span class="doctag">@see</span> #EDGE_BOTTOM</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEdgeTrackingEnabled</span><span class="params">(<span class="keyword">int</span> edgeFlags)</span> </span>&#123;</span><br><span class="line">        mEdgeFlag = edgeFlags;</span><br><span class="line">        mDragHelper.setEdgeTrackingEnabled(mEdgeFlag);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShadow</span><span class="params">(<span class="keyword">int</span> resId, <span class="keyword">int</span> edgeFlag)</span> </span>&#123;</span><br><span class="line">        setShadow(getResources().getDrawable(resId), edgeFlag);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Set a drawable used for edge shadow.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> shadow    Drawable to use</span><br><span class="line">     * <span class="doctag">@param</span> edgeFlag Combination of edge flags describing the edge to set</span><br><span class="line">     * <span class="doctag">@see</span> #EDGE_LEFT</span><br><span class="line">     * <span class="doctag">@see</span> #EDGE_RIGHT</span><br><span class="line">     * <span class="doctag">@see</span> #EDGE_BOTTOM</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShadow</span><span class="params">(Drawable shadow, <span class="keyword">int</span> edgeFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((edgeFlag &amp; EDGE_LEFT) != <span class="number">0</span>) &#123;</span><br><span class="line">            mShadowLeft = shadow;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((edgeFlag &amp; EDGE_RIGHT) != <span class="number">0</span>) &#123;</span><br><span class="line">            mShadowRight = shadow;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((edgeFlag &amp; EDGE_BOTTOM) != <span class="number">0</span>) &#123;</span><br><span class="line">            mShadowBottom = shadow;</span><br><span class="line">        &#125;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//处理ViewDragHelper</span></span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mEnable) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mDragHelper.shouldInterceptTouchEvent(event);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">FIXME:</span> handle exception</span></span><br><span class="line">            <span class="comment">// issues #9</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//处理ViewDragHelper</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mEnable) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mDragHelper.processTouchEvent(event);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SwipeBackLayout</code> 继承自 FrameLayout ，其中手势的操作是通过 <code>ViewDragHelper</code> 来实现的。在构造函数中一些必要的参数设置给 <code>ViewDragHelper</code> 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span><br><span class="line">     * Edge flag indicating that the left edge should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_LEFT = ViewDragHelper.EDGE_LEFT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge flag indicating that the right edge should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_RIGHT = ViewDragHelper.EDGE_RIGHT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge flag indicating that the bottom edge should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_BOTTOM = ViewDragHelper.EDGE_BOTTOM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge flag set indicating all edges should be affected.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_ALL = EDGE_LEFT | EDGE_RIGHT | EDGE_BOTTOM;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Default threshold of scroll</span><br><span class="line">     * 超过0.3f的屏幕比例的距离之后可以滑动出去了，临界值是0.3f</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_SCROLL_THRESHOLD = <span class="number">0.3f</span>;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OVERSCROLL_DISTANCE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> mScrimOpacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Edge being dragged</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTrackingEdge;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//滑动了距离和整个屏幕的的百分比</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">float</span> mScrollPercent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mContentLeft;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mContentTop;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Threshold of scroll, we will close the activity, when scrollPercent over</span><br><span class="line">     * this value;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mScrollThreshold = DEFAULT_SCROLL_THRESHOLD;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewDragCallback</span> <span class="keyword">extends</span> <span class="title">ViewDragHelper</span>.<span class="title">Callback</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> mIsScrollOverValid;</span><br><span class="line"></span><br><span class="line">      	<span class="comment">//如果可拖动则返回true 否则为false</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryCaptureView</span><span class="params">(View view, <span class="keyword">int</span> i)</span> </span>&#123;<span class="comment">//i是pointerId</span></span><br><span class="line">          	<span class="comment">//是否touch到了边缘</span></span><br><span class="line">            <span class="keyword">boolean</span> ret = mDragHelper.isEdgeTouched(mEdgeFlag, i);</span><br><span class="line">          	<span class="comment">//哪个边缘被touch了</span></span><br><span class="line">            <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDragHelper.isEdgeTouched(EDGE_LEFT, i)) &#123;</span><br><span class="line">                    mTrackingEdge = EDGE_LEFT;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDragHelper.isEdgeTouched(EDGE_RIGHT, i)) &#123;</span><br><span class="line">                    mTrackingEdge = EDGE_RIGHT;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mDragHelper.isEdgeTouched(EDGE_BOTTOM, i)) &#123;</span><br><span class="line">                    mTrackingEdge = EDGE_BOTTOM;</span><br><span class="line">                &#125;</span><br><span class="line">              	<span class="comment">//回调出去</span></span><br><span class="line">                <span class="keyword">if</span> (mListeners != <span class="keyword">null</span> &amp;&amp; !mListeners.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (SwipeListener listener : mListeners) &#123;</span><br><span class="line">                        listener.onEdgeTouch(mTrackingEdge);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mIsScrollOverValid = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> directionCheck = <span class="keyword">false</span>;</span><br><span class="line">          	<span class="comment">//是否达到了滑动的门槛</span></span><br><span class="line">            <span class="keyword">if</span> (mEdgeFlag == EDGE_LEFT || mEdgeFlag == EDGE_RIGHT) &#123;</span><br><span class="line">                directionCheck = !mDragHelper.checkTouchSlop(ViewDragHelper.DIRECTION_VERTICAL, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mEdgeFlag == EDGE_BOTTOM) &#123;</span><br><span class="line">                directionCheck = !mDragHelper</span><br><span class="line">                        .checkTouchSlop(ViewDragHelper.DIRECTION_HORIZONTAL, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mEdgeFlag == EDGE_ALL) &#123;</span><br><span class="line">                directionCheck = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret &amp; directionCheck;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      	<span class="comment">//返回指定View在横向上能滑动的最大距离</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHorizontalDragRange</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mEdgeFlag &amp; (EDGE_LEFT | EDGE_RIGHT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      	<span class="comment">//返回指定View在纵向上能滑动的最大距离</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewVerticalDragRange</span><span class="params">(View child)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mEdgeFlag &amp; EDGE_BOTTOM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      	<span class="comment">//当子视图位置变化时，会回调这个函数</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewPositionChanged</span><span class="params">(View changedView, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onViewPositionChanged(changedView, left, top, dx, dy);</span><br><span class="line">          	<span class="comment">//计算当前滑动比例</span></span><br><span class="line">            <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_LEFT) != <span class="number">0</span>) &#123;</span><br><span class="line">                mScrollPercent = Math.abs((<span class="keyword">float</span>) left</span><br><span class="line">                        / (mContentView.getWidth() + mShadowLeft.getIntrinsicWidth()));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_RIGHT) != <span class="number">0</span>) &#123;</span><br><span class="line">                mScrollPercent = Math.abs((<span class="keyword">float</span>) left</span><br><span class="line">                        / (mContentView.getWidth() + mShadowRight.getIntrinsicWidth()));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_BOTTOM) != <span class="number">0</span>) &#123;</span><br><span class="line">                mScrollPercent = Math.abs((<span class="keyword">float</span>) top</span><br><span class="line">                        / (mContentView.getHeight() + mShadowBottom.getIntrinsicHeight()));</span><br><span class="line">            &#125;</span><br><span class="line">            mContentLeft = left;</span><br><span class="line">            mContentTop = top;</span><br><span class="line">            invalidate();</span><br><span class="line">          	<span class="comment">//当滑动比例小于可滑动出去的时候，且mIsScrollOverValid已经为false的时候</span></span><br><span class="line">            <span class="keyword">if</span> (mScrollPercent &lt; mScrollThreshold &amp;&amp; !mIsScrollOverValid) &#123;</span><br><span class="line">                mIsScrollOverValid = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mListeners != <span class="keyword">null</span> &amp;&amp; !mListeners.isEmpty()</span><br><span class="line">                    &amp;&amp; mDragHelper.getViewDragState() == STATE_DRAGGING</span><br><span class="line">                    &amp;&amp; mScrollPercent &gt;= mScrollThreshold &amp;&amp; mIsScrollOverValid) &#123;</span><br><span class="line">                mIsScrollOverValid = <span class="keyword">false</span>;</span><br><span class="line">              	<span class="comment">//回调出去，已经达到可以滑出结束Activity的标准了</span></span><br><span class="line">                <span class="keyword">for</span> (SwipeListener listener : mListeners) &#123;</span><br><span class="line">                    listener.onScrollOverThreshold();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//当比例大于等于1的时候，就可以关闭掉Activity了</span></span><br><span class="line">            <span class="keyword">if</span> (mScrollPercent &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mActivity.isFinishing()) &#123;</span><br><span class="line">                    mActivity.finish();</span><br><span class="line">                    mActivity.overridePendingTransition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">      	<span class="comment">//当手指从子视图松开时，会调用这个函数，同时返回在x轴和y轴上当前的速度</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewReleased</span><span class="params">(View releasedChild, <span class="keyword">float</span> xvel, <span class="keyword">float</span> yvel)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidth = releasedChild.getWidth();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeight = releasedChild.getHeight();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>, top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_LEFT) != <span class="number">0</span>) &#123;<span class="comment">//左边边缘</span></span><br><span class="line">              	<span class="comment">//速度满足&gt;=0且已经滑过了临界点0.3f，滑到最右边，不然滑到0的位置</span></span><br><span class="line">                left = xvel &gt; <span class="number">0</span> || xvel == <span class="number">0</span> &amp;&amp; mScrollPercent &gt; mScrollThreshold ? childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE : <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_RIGHT) != <span class="number">0</span>) &#123;<span class="comment">//右边边缘</span></span><br><span class="line">				<span class="comment">//速度满足&gt;=0且已经滑过了临界点0.3f，滑到最左边，不然滑到0的位置</span></span><br><span class="line">                left = xvel &lt; <span class="number">0</span> || xvel == <span class="number">0</span> &amp;&amp; mScrollPercent &gt; mScrollThreshold ? -(childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE) : <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_BOTTOM) != <span class="number">0</span>) &#123;<span class="comment">//上边边缘</span></span><br><span class="line">				<span class="comment">//速度满足&gt;=0且已经滑过了临界点0.3f，滑到最下边，不然滑到0的位置</span></span><br><span class="line">                top = yvel &lt; <span class="number">0</span> || yvel == <span class="number">0</span> &amp;&amp; mScrollPercent &gt; mScrollThreshold ? -(childHeight + mShadowBottom.getIntrinsicHeight() + OVERSCROLL_DISTANCE) : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//移动View</span></span><br><span class="line">            mDragHelper.settleCapturedViewAt(left, top);</span><br><span class="line">          	<span class="comment">//刷新View</span></span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">			</span><br><span class="line">      	<span class="comment">//返回一个值，告诉Helper，这个view能滑动的最大（或者负向最大）的横向坐标</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionHorizontal</span><span class="params">(View child, <span class="keyword">int</span> left, <span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_LEFT) != <span class="number">0</span>) &#123;</span><br><span class="line">                ret = Math.min(child.getWidth(), Math.max(left, <span class="number">0</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_RIGHT) != <span class="number">0</span>) &#123;</span><br><span class="line">                ret = Math.min(<span class="number">0</span>, Math.max(left, -child.getWidth()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      	<span class="comment">//返回一个值，告诉Helper，这个view能滑动的最大（或者负向最大）的纵向坐标</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clampViewPositionVertical</span><span class="params">(View child, <span class="keyword">int</span> top, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_BOTTOM) != <span class="number">0</span>) &#123;</span><br><span class="line">                ret = Math.min(<span class="number">0</span>, Math.max(top, -child.getHeight()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      	<span class="comment">//当边缘开始拖动的时候，会调用这个回调</span></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onViewDragStateChanged(state);</span><br><span class="line">            <span class="keyword">if</span> (mListeners != <span class="keyword">null</span> &amp;&amp; !mListeners.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (SwipeListener listener : mListeners) &#123;</span><br><span class="line">                    listener.onScrollStateChange(state, mScrollPercent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//调用mDragHelper.settleCapturedViewAt(left, top)之后会进到这里</span></span><br><span class="line">        mScrimOpacity = <span class="number">1</span> - mScrollPercent;</span><br><span class="line">        <span class="keyword">if</span> (mDragHelper.continueSettling(<span class="keyword">true</span>)) &#123;</span><br><span class="line">            ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        mInLayout = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mContentView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mContentView.layout(mContentLeft, mContentTop,</span><br><span class="line">                    mContentLeft + mContentView.getMeasuredWidth(),</span><br><span class="line">                    mContentTop + mContentView.getMeasuredHeight());</span><br><span class="line">        &#125;</span><br><span class="line">        mInLayout = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mInLayout) &#123;</span><br><span class="line">            <span class="keyword">super</span>.requestLayout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>ViewDragHelper.Callback</code> 的手势判断中，处理的主要逻辑主要在 <code>tryCaptureView</code> 、 <code>onViewPositionChanged</code> 、 <code>onViewReleased</code> 三个方法中，分别是在准备滑动、滑动时、和放手的时候的逻辑。</p>
<p>在 <code>tryCaptureView</code> 中主要进行了边缘的判断，以及是否满足滑动条件；在 <code>onViewPositionChanged</code> 中计算了当前滑动距离与整个 ContentView 的距离的比例，是否超越临界值等；在 <code>onViewReleased</code> 中处理了手抬起之后的操作，比如将 View 滑归位或者滑出去等。</p>
<p>现在基本上了解了滑动的机制了，那么回过头来看看 <code>attachToActivity</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> View mContentView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachToActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        mActivity = activity;</span><br><span class="line">        TypedArray a = activity.getTheme().obtainStyledAttributes(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</span><br><span class="line">                android.R.attr.windowBackground</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> background = a.getResourceId(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        a.recycle();</span><br><span class="line"></span><br><span class="line">        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();</span><br><span class="line">		<span class="comment">// 拿到decorView的第一个子view</span></span><br><span class="line">        ViewGroup decorChild = (ViewGroup) decor.getChildAt(<span class="number">0</span>);</span><br><span class="line">        decorChild.setBackgroundResource(background);</span><br><span class="line">      	<span class="comment">//把这个decorChild从decorView删除掉</span></span><br><span class="line">        decor.removeView(decorChild);</span><br><span class="line">      	<span class="comment">//将decorView添加到SwipeBackLayout中</span></span><br><span class="line">        addView(decorChild);</span><br><span class="line">      	<span class="comment">//将decorChild赋值给成员变量mContentView</span></span><br><span class="line">        setContentView(decorChild);</span><br><span class="line">        <span class="comment">// 在DecorView下增加SwipeBackLayout</span></span><br><span class="line">        decor.addView(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Set up contentView which will be moved by user gesture</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        mContentView = view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>attachToActivity</code> 将 decorView 中的 contentView 换成了 <code>SwipeBackLayout</code> ，而 contentView 则被添加到了 <code>SwipeBackLayout</code> 中。与正常的相比，之间多了一个 <code>SwipeBackLayout</code> 。</p>
<p>在滑动的时候哪些阴影是怎么出现的呢：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SCRIM_COLOR = <span class="number">0x99000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mScrimOpacity;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScrimColor = DEFAULT_SCRIM_COLOR;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> mScrollPercent;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> Drawable mShadowLeft;</span><br><span class="line">    <span class="keyword">private</span> Drawable mShadowRight;</span><br><span class="line">    <span class="keyword">private</span> Drawable mShadowBottom;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> Rect mTmpRect = <span class="keyword">new</span> Rect();</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mScrimOpacity = <span class="number">1</span> - mScrollPercent;</span><br><span class="line">        <span class="keyword">if</span> (mDragHelper.continueSettling(<span class="keyword">true</span>)) &#123;</span><br><span class="line">            ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View child, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> drawContent = child == mContentView;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> ret = <span class="keyword">super</span>.drawChild(canvas, child, drawingTime);</span><br><span class="line">        <span class="keyword">if</span> (mScrimOpacity &gt; <span class="number">0</span> &amp;&amp; drawContent</span><br><span class="line">                &amp;&amp; mDragHelper.getViewDragState() != ViewDragHelper.STATE_IDLE) &#123;</span><br><span class="line">            drawShadow(canvas, child);</span><br><span class="line">            drawScrim(canvas, child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawScrim</span><span class="params">(Canvas canvas, View child)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//得到alpha值</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> baseAlpha = (mScrimColor &amp; <span class="number">0xff000000</span>) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line">      	<span class="comment">//得到新的alpha值</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> alpha = (<span class="keyword">int</span>) (baseAlpha * mScrimOpacity);</span><br><span class="line">      	<span class="comment">//得到新的color</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> color = alpha &lt;&lt; <span class="number">24</span> | (mScrimColor &amp; <span class="number">0xffffff</span>);</span><br><span class="line">		<span class="comment">//绘制</span></span><br><span class="line">        <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_LEFT) != <span class="number">0</span>) &#123;</span><br><span class="line">            canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, child.getLeft(), getHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_RIGHT) != <span class="number">0</span>) &#123;</span><br><span class="line">            canvas.clipRect(child.getRight(), <span class="number">0</span>, getRight(), getHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mTrackingEdge &amp; EDGE_BOTTOM) != <span class="number">0</span>) &#123;</span><br><span class="line">            canvas.clipRect(child.getLeft(), child.getBottom(), getRight(), getHeight());</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.drawColor(color);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">  	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawShadow</span><span class="params">(Canvas canvas, View child)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Rect childRect = mTmpRect;</span><br><span class="line">      	<span class="comment">//得到当前View的位置</span></span><br><span class="line">        child.getHitRect(childRect);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((mEdgeFlag &amp; EDGE_LEFT) != <span class="number">0</span>) &#123;</span><br><span class="line">          	<span class="comment">//给drawable设置位置</span></span><br><span class="line">            mShadowLeft.setBounds(childRect.left - mShadowLeft.getIntrinsicWidth(), childRect.top, childRect.left, childRect.bottom);</span><br><span class="line">          	<span class="comment">//设置透明度</span></span><br><span class="line">            mShadowLeft.setAlpha((<span class="keyword">int</span>) (mScrimOpacity * FULL_ALPHA));</span><br><span class="line">          	<span class="comment">//画到canvas上</span></span><br><span class="line">            mShadowLeft.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//给drawable设置位置、设置透明度、画到canvas上</span></span><br><span class="line">        <span class="keyword">if</span> ((mEdgeFlag &amp; EDGE_RIGHT) != <span class="number">0</span>) &#123;</span><br><span class="line">            mShadowRight.setBounds(childRect.right, childRect.top, childRect.right + mShadowRight.getIntrinsicWidth(), childRect.bottom);</span><br><span class="line">            mShadowRight.setAlpha((<span class="keyword">int</span>) (mScrimOpacity * FULL_ALPHA));</span><br><span class="line">            mShadowRight.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//给drawable设置位置、设置透明度、画到canvas上</span></span><br><span class="line">        <span class="keyword">if</span> ((mEdgeFlag &amp; EDGE_BOTTOM) != <span class="number">0</span>) &#123;</span><br><span class="line">            mShadowBottom.setBounds(childRect.left, childRect.bottom, childRect.right, childRect.bottom + mShadowBottom.getIntrinsicHeight());</span><br><span class="line">            mShadowBottom.setAlpha((<span class="keyword">int</span>) (mScrimOpacity * FULL_ALPHA));</span><br><span class="line">            mShadowBottom.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就这样，阴影就绘制出来了。</p>
<p>再看看 <code>scrollToFinishActivity</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeBackLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Scroll out contentView and finish the activity</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollToFinishActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//得到contentView的宽高</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childWidth = mContentView.getWidth();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childHeight = mContentView.getHeight();</span><br><span class="line">		<span class="comment">//要移动到的位置</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((mEdgeFlag &amp; EDGE_LEFT) != <span class="number">0</span>) &#123;</span><br><span class="line">            left = childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;</span><br><span class="line">            mTrackingEdge = EDGE_LEFT;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mEdgeFlag &amp; EDGE_RIGHT) != <span class="number">0</span>) &#123;</span><br><span class="line">            left = -childWidth - mShadowRight.getIntrinsicWidth() - OVERSCROLL_DISTANCE;</span><br><span class="line">            mTrackingEdge = EDGE_RIGHT;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mEdgeFlag &amp; EDGE_BOTTOM) != <span class="number">0</span>) &#123;</span><br><span class="line">            top = -childHeight - mShadowBottom.getIntrinsicHeight() - OVERSCROLL_DISTANCE;</span><br><span class="line">            mTrackingEdge = EDGE_BOTTOM;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mDragHelper.smoothSlideViewTo(mContentView, left, top);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//调用mDragHelper.smoothSlideViewTo(mContentView, left, top);之后进到这里</span></span><br><span class="line">        mScrimOpacity = <span class="number">1</span> - mScrollPercent;</span><br><span class="line">        <span class="keyword">if</span> (mDragHelper.continueSettling(<span class="keyword">true</span>)) &#123;</span><br><span class="line">            ViewCompat.postInvalidateOnAnimation(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Convert a translucent themed Activity</span><br><span class="line">     * &#123;<span class="doctag">@link</span> android.R.attr#windowIsTranslucent&#125; back from opaque to</span><br><span class="line">     * translucent following a call to</span><br><span class="line">     * &#123;<span class="doctag">@link</span> #convertActivityFromTranslucent(android.app.Activity)&#125; .</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * Calling this allows the Activity behind this one to be seen again. Once</span><br><span class="line">     * all such Activities have been redrawn</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * This call has no effect on non-translucent activities or on activities</span><br><span class="line">     * with the &#123;<span class="doctag">@link</span> android.R.attr#windowIsFloating&#125; attribute.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convertActivityToTranslucent</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            convertActivityToTranslucentAfterL(activity);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            convertActivityToTranslucentBeforeL(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Calling the convertToTranslucent method on platforms before Android 5.0</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convertActivityToTranslucentBeforeL</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt;[] classes = Activity.class.getDeclaredClasses();</span><br><span class="line">            Class&lt;?&gt; translucentConversionListenerClazz = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Class clazz : classes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getSimpleName().contains(<span class="string">"TranslucentConversionListener"</span>)) &#123;</span><br><span class="line">                    translucentConversionListenerClazz = clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Method method = Activity.class.getDeclaredMethod(<span class="string">"convertToTranslucent"</span>,</span><br><span class="line">                    translucentConversionListenerClazz);</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            method.invoke(activity, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                <span class="keyword">null</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Calling the convertToTranslucent method on platforms after Android 5.0</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convertActivityToTranslucentAfterL</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method getActivityOptions = Activity.class.getDeclaredMethod(<span class="string">"getActivityOptions"</span>);</span><br><span class="line">            getActivityOptions.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object options = getActivityOptions.invoke(activity);</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] classes = Activity.class.getDeclaredClasses();</span><br><span class="line">            Class&lt;?&gt; translucentConversionListenerClazz = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Class clazz : classes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getSimpleName().contains(<span class="string">"TranslucentConversionListener"</span>)) &#123;</span><br><span class="line">                    translucentConversionListenerClazz = clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Method convertToTranslucent = Activity.class.getDeclaredMethod(<span class="string">"convertToTranslucent"</span>,</span><br><span class="line">                    translucentConversionListenerClazz, ActivityOptions.class);</span><br><span class="line">            convertToTranslucent.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            convertToTranslucent.invoke(activity, <span class="keyword">null</span>, options);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过反射改变 Activity 的属性值。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><code>SwipeBackLayout</code> 的手势操作用到的是 Support V4 的 <code>ViewDragHelper</code></li>
<li>能达到 Activity 背景透明的效果主要是通过 Utils 和 style.xml 中设置的 <code>android:windowIsTranslucent</code> 。</li>
<li>正是因为 <code>windowIsTranslucent</code> 参数，可能在某些机器上直接显示桌面了，我以前遇到过的就有 sony 的 ROM 。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SwipeBack </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AsyncTask源码解析]]></title>
      <url>/2016/05/02/asynctask-analyse/</url>
      <content type="html"><![CDATA[<p>本文以 API 23 代码为例讲解 AsyncTask 的使用和源码以及注意事项。</p>
<a id="more"></a>
<h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><p>API 3 引入的类，目的在于简化 Android 的异步耗时操作前后的 UI 线程操作。在某种程度上来说， AsyncTask 是 <code>Thread</code> 和 <code>Handler</code> 的帮助类，无需关心线程调度等操作。 AsyncTask 有三个类属性，分别是 <code>Params</code> ， <code>Progress</code> ，<code>Result</code> ，和四个步骤，<code>onPreExecute</code> ， <code>doInBackground</code> ， <code>onProgressUpdate</code> 和 <code>onPostExecute</code> 。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>AsyncTask 必须得继承才能使用，子类至少得重写 <code>doInBackground(Params...)</code> 方法，同时也会经常重写 <code>onPostExecute(Result)</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFilesTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">URL</span>, <span class="title">Integer</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">protected</span> Long <span class="title">doInBackground</span><span class="params">(URL... urls)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> count = urls.length;</span><br><span class="line">         <span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">             totalSize += Downloader.downloadFile(urls[i]);</span><br><span class="line">             publishProgress((<span class="keyword">int</span>) ((i / (<span class="keyword">float</span>) count) * <span class="number">100</span>));</span><br><span class="line">             <span class="comment">// Escape early if cancel() is called</span></span><br><span class="line">             <span class="keyword">if</span> (isCancelled()) <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> totalSize;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;</span><br><span class="line">         setProgressPercent(progress[<span class="number">0</span>]);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Long result)</span> </span>&#123;</span><br><span class="line">         showDialog(<span class="string">"Downloaded "</span> + result + <span class="string">" bytes"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>AsyncTask 的执行很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> DownloadFilesTask().execute(url1, url2, url3);</span><br></pre></td></tr></table></figure>
<h2 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h2><p>AsyncTask 有三个类属性，分别是：</p>
<ol>
<li><code>Params</code> ，传递给 <code>doInBackground</code> 的参数形式</li>
<li><code>Progress</code> ，在 <code>doInBackground</code> 运行中计算的进度单位值（the type of the progress units published during     the background computation）</li>
<li><code>Result</code> ， <code>doInBackground</code> 运行完成后得到的结果的形式</li>
</ol>
<p>并不是所有的类属性都会被用到，如果有不需要的话，使用 <code>Void</code> 。</p>
<h2 id="四个步骤"><a href="#四个步骤" class="headerlink" title="四个步骤"></a>四个步骤</h2><p>当 AsyncTask 被执行时，会经过四个步骤：</p>
<ol>
<li><code>onPreExecute()</code> ，当执行 <code>doInBackground</code> 前在 <strong>UI 线程</strong>被调用</li>
<li><code>doInBackground(Params...)</code> ， <code>onPreExecute()</code> 之后在<strong>子线程</strong>中被调用。这个方法中主要处理耗时操作，最后的结构将会传递给 <code>onPostExecute</code> 。在这个步骤中，可以使用 <code>publishProgress(Progess...)</code> 来进行进度控制，当调用这个方法之后，<code>onPregressUpdate(Progress...)</code> 会被自动调用</li>
<li><code>onPregessUpdat(Progress...)</code> ，当调用 <code>publishProgress(Progess...)</code> 之后自动在 <strong>UI 线程</strong>被调用，这个方法中可以进行百分制的进度条的展示等等</li>
<li><code>onPostExecute(Result)</code> ，当 <code>doInBackground</code> 完成之后在 <strong>UI 线程</strong>被调用</li>
</ol>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol>
<li>在 JELLY_BEAN 版本之前 AsyncTask 类必须在 UI 线程中加载</li>
<li>AsyncTask 必须在 UI 线程创建</li>
<li><code>execute(Params...)</code> 方法必须在 UI 线程中调用</li>
<li>不要人为去调用 <code>onPreExecute()</code> ， <code>onPostExecute(Result)</code> ， <code>doInBackground(Params...)</code> ， <code>onProgressUpdate(Progress...)</code> </li>
<li>task 只会被执行一次，如果调用了两次 <code>exexute</code> 的话将会抛出异常</li>
</ol>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="AsyncTask-1"><a href="#AsyncTask-1" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_POST_RESULT = <span class="number">0x1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MESSAGE_POST_PROGRESS = <span class="number">0x2</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WorkerRunnable&lt;Params, Result&gt; mWorker;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FutureTask&lt;Result&gt; mFuture;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean mCancelled = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean mTaskInvoked = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a new asynchronous task. This constructor must be invoked on the UI thread.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">//mTaskInvoked是一个AtomicBoolean变量，设置为true表明task正在执行</span></span><br><span class="line">                mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">//线程优先级设置为后台</span></span><br><span class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">                Result result = doInBackground(mParams);</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">                <span class="keyword">return</span> postResult(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    postResultIfNotInvoked(get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    android.util.Log.w(LOG_TAG, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>, e.getCause());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                    postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span>&lt;<span class="title">Params</span>, <span class="title">Result</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">        Params[] mParams;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个static的Handler，这样的话所有的AsyncTask对象都是这个Handler</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class="line">        <span class="keyword">if</span> (!wasTaskInvoked) &#123;</span><br><span class="line">            postResult(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 将Result通过Handler传递到UI线程</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">        message.sendToTarget();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 得到Handler</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sHandler = <span class="keyword">new</span> InternalHandler();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sHandler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 主线程的Handler</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Looper.getMainLooper());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">            <span class="comment">//处理不同的事件</span></span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                    <span class="comment">// There is only one result</span></span><br><span class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                    result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 完成</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">            onCancelled(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onPostExecute(result);</span><br><span class="line">        &#125;</span><br><span class="line">        mStatus = Status.FINISHED;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCancelled.get();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Handler传递数据的时候将数据封装的形式</span><br><span class="line">     * mTask是为了到时将AsyncTaskResult获取到之后拿到task进行操作，比如result.mTask.onProgressUpdate(result.mData)</span><br><span class="line">     * mData是Result数据或者Preogress数据</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(&#123;<span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskResult</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AsyncTask mTask;</span><br><span class="line">        <span class="keyword">final</span> Data[] mData;</span><br><span class="line"></span><br><span class="line">        AsyncTaskResult(AsyncTask task, Data... data) &#123;</span><br><span class="line">            mTask = task;</span><br><span class="line">            mData = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在构造方法中初始化了 <code>mWorker</code> 和 <code>mFuture</code> 两个变量，初始化 <code>mFuture</code> 的时候将 <code>mWork</code> 作为参数传递进去了。 <code>mWork</code> 是一个 <code>Callable</code> 对象，<code>mFuture</code> 是一个 <code>FutureTask</code> 对象。</p>
<p><code>Callable</code> 和 <code>FutureTask</code> 的一般用法是让线程池去 <code>submit</code> 一个 <code>Callable</code> ，返回一个 <code>Future</code> 类型的变量，此时 <code>Callable</code> 中的操作已经添加到线程池中了，按照线程池中的调度算法进行调度运行。当返回的 <code>Future</code> 变量进行 <code>get()</code> 方法操作的时候，得到 <code>Callable</code> 中操作的返回值，如果操作还没有操作完，那么程序会阻塞在 <code>get()</code> 方法这里。</p>
<p><strong>在 <code>WorkerRunnable</code> 的 <code>call()</code> 方法中调用了 <code>doInBackground</code> 。在 <code>postResult</code> 将数据通过 Handler 传递到 UI 线程，在 Handler 的 <code>handleMessage()</code> 中调用了 <code>finish</code>  方法，使 <code>onPostExecute</code> 被调用。</strong></p>
<h3 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//我的MX5的CPU_COUNT的值为8    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class="line">    <span class="comment">//那么这里为9，同一时刻能够运行的线程数为9个    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//那么这里为17，即线程池大小为17  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//每次只能执行1个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR</span><br><span class="line">            = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,</span><br><span class="line">                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * An &#123;<span class="doctag">@link</span> Executor&#125; that executes tasks one at a time in serial</span><br><span class="line">     * order.  This serialization is global to a particular process.</span><br><span class="line">     * 串行池，UI线程，对应之前讲到的 AsyncTask 类必须在 UI 线程中加载</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">        <span class="comment">//队列</span></span><br><span class="line">        <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">        <span class="comment">//当前执行的Runnable        </span></span><br><span class="line">        Runnable mActive;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//向队列中添加runnable，new一个Runnable出来，执行传递进来的runnable.run，无论传递进来的runnable发生什么事，继续执行下一个runnable</span></span><br><span class="line">            mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        r.run();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        scheduleNext();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//出队列，将值传递给mActive  </span></span><br><span class="line">            <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) &#123;</span><br><span class="line">        <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec, Params... params) &#123;</span><br><span class="line">        <span class="comment">//这里就是之前介绍说到的，一个task只能被执行一次</span></span><br><span class="line">        <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">                <span class="keyword">case</span> RUNNING:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task is already running."</span>);</span><br><span class="line">                <span class="keyword">case</span> FINISHED:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task has already been executed "</span></span><br><span class="line">                            + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将状态改为RUNNING</span></span><br><span class="line">        mStatus = Status.RUNNING;</span><br><span class="line">        <span class="comment">//调用onPreExecute</span></span><br><span class="line">        onPreExecute();</span><br><span class="line">        <span class="comment">//将参数传递给mWorker </span></span><br><span class="line">        mWorker.mParams = params;</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span><br><span class="line">     * Indicates the current status of the task. Each status will be set only once</span><br><span class="line">     * during the lifetime of a task.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Status &#123;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Indicates that the task has not been executed yet.</span><br><span class="line">         * 表示task还没有被执行</span><br><span class="line">         */</span></span><br><span class="line">        PENDING,</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Indicates that the task is running.</span><br><span class="line">         * 表示task正在运行</span><br><span class="line">         */</span></span><br><span class="line">        RUNNING,</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * Indicates that &#123;<span class="doctag">@link</span> AsyncTask#onPostExecute&#125; has finished.</span><br><span class="line">         * 表示task已经运行完了</span><br><span class="line">         */</span></span><br><span class="line">        FINISHED,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在执行 <code>execute</code> 方法的时候就会调用 <code>onPreExecute</code>  。</strong></p>
<p><code>SERIAL_EXECUTOR</code> 说明了之前的 <code>规则 1</code> 。 <code>executeOnExecutor</code> 说明了之前的 <code>规则 5</code> 。</p>
<h3 id="publishProgress"><a href="#publishProgress" class="headerlink" title="publishProgress"></a>publishProgress</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="annotation">@WorkerThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(Looper.getMainLooper());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                    <span class="comment">// There is only one result</span></span><br><span class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                    result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>通过调用 <code>publishProgress</code> 方法，将数据通过 Handler 传递到 UI 线程，在 <code>handleMessage()</code> 中处理，调用了 <code>onProgressUpdate</code> 。</strong></p>
<h2 id="其他的方法"><a href="#其他的方法" class="headerlink" title="其他的方法"></a>其他的方法</h2><h3 id="使用自定义的线程池"><a href="#使用自定义的线程池" class="headerlink" title="使用自定义的线程池"></a>使用自定义的线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="annotation">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec,</span><br><span class="line">            Params... params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">                <span class="keyword">case</span> RUNNING:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task is already running."</span>);</span><br><span class="line">                <span class="keyword">case</span> FINISHED:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task has already been executed "</span></span><br><span class="line">                            + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">        onPreExecute();</span><br><span class="line"></span><br><span class="line">        mWorker.mParams = params;</span><br><span class="line">        exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>executeOnExecutor</code> 该方法之前分析过，但是需要注意的是该方法是 public ，所以用户可以传入自己的线程池。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Executor exec = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">15</span>, <span class="number">200</span>, <span class="number">10</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());  </span><br><span class="line"><span class="keyword">new</span> DownloadTask().executeOnExecutor(exec);</span><br></pre></td></tr></table></figure>
<p>但是比较麻烦的是每次都需要这么写，有没有简单点的方法呢，是有的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultExecutor</span><span class="params">(Executor exec)</span> </span>&#123;</span><br><span class="line">        sDefaultExecutor = exec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法是被隐藏了的，但是可以通过反射调用。</p>
<h3 id="Cancel"><a href="#Cancel" class="headerlink" title="Cancel"></a>Cancel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean mCancelled = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">        mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> mFuture.cancel(mayInterruptIfRunning);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCancelled.get();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(&#123;<span class="string">"UnusedParameters"</span>&#125;)</span><br><span class="line">    <span class="annotation">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        onCancelled();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AsyncTask 的取消操作是封装好的，只需要调用就行。</p>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Result <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFuture.get();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Result <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFuture.get(timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以直接通过 <code>get()</code> 方法拿到最后的值，只不过没拿到值前会阻塞线程。</p>
<h2 id="AsyncTaskCompat"><a href="#AsyncTaskCompat" class="headerlink" title="AsyncTaskCompat"></a>AsyncTaskCompat</h2><p>support V4 中有一个 AsyncTask 的兼容类 <code>AsyncTaskCompat</code> 。主要逻辑就是在 API 11 之前并行处理 Task，而 API 11 之后也改为并行处理 Task 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskCompat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Params, Progress, Result&gt; AsyncTask&lt;Params, Progress, Result&gt; executeParallel(</span><br><span class="line">            AsyncTask&lt;Params, Progress, Result&gt; task,</span><br><span class="line">            Params... params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"task can not be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">11</span>) &#123;</span><br><span class="line">            <span class="comment">// From API 11 onwards, we need to manually select the THREAD_POOL_EXECUTOR</span></span><br><span class="line">            AsyncTaskCompatHoneycomb.executeParallel(task, params);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Before API 11, all tasks were run in parallel</span></span><br><span class="line">            task.execute(params);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>AsyncTask 只能执行一次</li>
<li>尽量在 UI 线程加载和创建 AsyncTask</li>
<li>并行操作的话可以通过 <code>AsyncTaskCompat</code> 或者 <code>executeOnExecutor(exec)</code> 来实现</li>
<li>如果 cancel 掉 Task 的话，会调用 <code>onCancel()</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AsyncTask </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google-EasyPermissions源码解析]]></title>
      <url>/2016/04/24/easypermissions-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/googlesamples/easypermissions" target="_blank" rel="external">easypermissions</a>      分析版本：<a href="https://github.com/googlesamples/easypermissions/tree/962b99da0a08c27fc0d6f78252a948b36d64f60c" target="_blank" rel="external">962b99d</a></p>
</blockquote>
<p>EasyPermissions 是一个在 Android M 或者更高版本的上使用去简化系统权限逻辑的开源库。</p>
<a id="more"></a>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加依赖到 <code>Gradle</code> :</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  compile <span class="string">'pub.devrel:easypermissions:0.1.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在使用 EasyPermissions 之前，需要在 <code>Activity</code> 或者 <code>Fragment</code> 中实现 <code>EasyPermissions.PermissionCallbacks</code> 接口，并且覆盖以下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title">EasyPermissions</span>.<span class="title">PermissionCallbacks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将结果转发给EasyPermissions</span></span><br><span class="line">        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionsGranted</span><span class="params">(<span class="keyword">int</span> requestCode, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 权限被授予</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionsDenied</span><span class="params">(<span class="keyword">int</span> requestCode, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 权限被拒绝</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h3><ul>
<li><p>使用 <code>EasyPermissions#hasPermissions(...)</code> 去判断 app 是否已经有权限了。该方法的最后个参数是可变数组形式的，所以可以一次性查询多个权限。</p>
</li>
<li><p>使用 <code>EasyPermissions#requestPermissions</code> 去请求权限。该方法在请求权限的同时有必要的话会显示使用权限理由。<code>requestCode</code> 对于该方法来说必须是唯一的，同时最后个参数也是可变数组形式的，所以可以一次性请求多个权限。</p>
</li>
<li><p>使用 <code>AfterPermissioonGranted</code> 注解。这是可选的，但是提供出来是为了方便。如果所有的请求的权限都被授予了，被注解的方法将会被执行，这样做是为了简化通常的请求权限成功之后再调用方法的流程。同时也可以在 <code>onPermissionsGranted</code> 的回调中添加逻辑操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@AfterPermissionGranted</span>(RC_CAMERA_AND_WIFI)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodRequiresTwoPermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String[] perms = &#123;Manifest.permission.CAMERA, Manifest.permission.CHANGE_WIFI_STATE&#125;;</span><br><span class="line">  <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="keyword">this</span>, perms)) &#123;</span><br><span class="line">      <span class="comment">// Already have permission, do the thing</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Do not have permissions, request them now</span></span><br><span class="line">      EasyPermissions.requestPermissions(<span class="keyword">this</span>, getString(R.string.camera_and_wifi_rationale),</span><br><span class="line">                    RC_CAMERA_AND_WIFI, perms);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="hasPermissions"><a href="#hasPermissions" class="headerlink" title="hasPermissions"></a>hasPermissions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyPermissions</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">     * Check if the calling context has a set of permissions.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> context the calling context.</span><br><span class="line">     * <span class="doctag">@param</span> perms   one ore more permissions, such as &#123;<span class="doctag">@code</span> android.Manifest.permission.CAMERA&#125;.</span><br><span class="line">     * <span class="doctag">@return</span> true if all permissions are already granted, false if at least one permission</span><br><span class="line">     * is not yet granted.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasPermissions</span><span class="params">(Context context, String... perms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String perm : perms) &#123;</span><br><span class="line">            <span class="comment">//通过ContextCompat#checkSelfPermission判断</span></span><br><span class="line">            <span class="keyword">boolean</span> hasPerm = (ContextCompat.checkSelfPermission(context, perm) == PackageManager.PERMISSION_GRANTED);</span><br><span class="line">            <span class="keyword">if</span> (!hasPerm) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法的作用是判断是否授予了权限，通过 v4 的 <code>ContextCompat#checkSelfPermission</code> 来判断，在返回结果的时候，如果所有的请求的权限都是被授予了的话，就返回 <code>true</code> ，否则返回 <code>false</code> 。</p>
<h3 id="requestPermissions"><a href="#requestPermissions" class="headerlink" title="requestPermissions"></a>requestPermissions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyPermissions</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(<span class="keyword">final</span> Object object, String rationale,</span><br><span class="line">                                          <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> String... perms)</span> </span>&#123;</span><br><span class="line">        requestPermissions(object, rationale,</span><br><span class="line">                android.R.string.ok,</span><br><span class="line">                android.R.string.cancel,</span><br><span class="line">                requestCode, perms);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">     * Request a set of permissions, showing rationale if the system requests it.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> object         Activity or Fragment requesting permissions. Should implement</span><br><span class="line">     *                       &#123;<span class="doctag">@link</span> android.support.v4.app.ActivityCompat.OnRequestPermissionsResultCallback&#125;</span><br><span class="line">     *                       or</span><br><span class="line">     *                       &#123;<span class="doctag">@link</span> android.support.v13.app.FragmentCompat.OnRequestPermissionsResultCallback&#125;</span><br><span class="line">     * <span class="doctag">@param</span> rationale      a message explaining why the application needs this set of permissions, will</span><br><span class="line">     *                       be displayed if the user rejects the request the first time.</span><br><span class="line">     * <span class="doctag">@param</span> positiveButton custom text for positive button</span><br><span class="line">     * <span class="doctag">@param</span> negativeButton custom text for negative button</span><br><span class="line">     * <span class="doctag">@param</span> requestCode    request code to track this request, must be &lt; 256.</span><br><span class="line">     * <span class="doctag">@param</span> perms          a set of permissions to be requested.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(<span class="keyword">final</span> Object object, String rationale, @StringRes <span class="keyword">int</span> positiveButton, @StringRes <span class="keyword">int</span> negativeButton, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> String... perms)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断传入参数是否合适</span></span><br><span class="line">        checkCallingObjectSuitability(object);</span><br><span class="line">        <span class="comment">//拿到PermissionCallbacks对象</span></span><br><span class="line">        <span class="keyword">final</span> PermissionCallbacks callbacks = (PermissionCallbacks) object;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> shouldShowRationale = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (String perm : perms) &#123;</span><br><span class="line">            <span class="comment">//是否需要显示理由</span></span><br><span class="line">            shouldShowRationale = shouldShowRationale || shouldShowRequestPermissionRationale(object, perm);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果需要的话，显示dialog进行显示</span></span><br><span class="line">        <span class="keyword">if</span> (shouldShowRationale) &#123;</span><br><span class="line">            AlertDialog dialog = <span class="keyword">new</span> AlertDialog.Builder(getActivity(object))</span><br><span class="line">                    .setMessage(rationale)</span><br><span class="line">                    .setPositiveButton(positiveButton, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                        <span class="annotation">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                            <span class="comment">//用户同意了，进行系统权限申请操作</span></span><br><span class="line">                            executePermissionsRequest(object, perms, requestCode);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .setNegativeButton(negativeButton, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                        <span class="annotation">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                            <span class="comment">// act as if the permissions were denied</span></span><br><span class="line">                            <span class="comment">//没有同意的话，回调出去</span></span><br><span class="line">                            callbacks.onPermissionsDenied(requestCode, Arrays.asList(perms));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).create();</span><br><span class="line">            dialog.show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不需要显示理由，直接进行权限请求操作</span></span><br><span class="line">            executePermissionsRequest(object, perms, requestCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">     * 判断传入的对象合适合法，判断规则是传入的object是不是 Fragment 或者 Activity 类，同时是否实现了 PermissionCallbacks</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> object</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCallingObjectSuitability</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Make sure Object is an Activity or Fragment</span></span><br><span class="line">        <span class="keyword">if</span> (!((object <span class="keyword">instanceof</span> Fragment) || (object <span class="keyword">instanceof</span> Activity))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Caller must be an Activity or a Fragment."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure Object implements callbacks</span></span><br><span class="line">        <span class="keyword">if</span> (!(object <span class="keyword">instanceof</span> PermissionCallbacks)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Caller must implement PermissionCallbacks."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span><br><span class="line">     * 是否需要显示请求权限理由</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> object</span><br><span class="line">     * <span class="doctag">@param</span> perm</span><br><span class="line">     * <span class="doctag">@return</span> 需要的话返回true，不需要的话返回false</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldShowRequestPermissionRationale</span><span class="params">(Object object, String perm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            <span class="keyword">return</span> ActivityCompat.shouldShowRequestPermissionRationale((Activity) object, perm);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Fragment) object).shouldShowRequestPermissionRationale(perm);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 执行权限请求操作</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> object</span><br><span class="line">     * <span class="doctag">@param</span> perms</span><br><span class="line">     * <span class="doctag">@param</span> requestCode</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executePermissionsRequest</span><span class="params">(Object object, String[] perms, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断传入参数是否合适</span></span><br><span class="line">        checkCallingObjectSuitability(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            ActivityCompat.requestPermissions((Activity) object, perms, requestCode);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">            ((Fragment) object).requestPermissions(perms, requestCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 拿到Activity对象</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> object</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Activity <span class="title">getActivity</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Activity) object);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Fragment) object).getActivity();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>requestPermission()</code> 有两个不同参数的实现，区别在于弹出的对话框中的 positive 和 negative 文字是否自定义。传入的 <code>Object</code> 对象得是 <code>Activity</code> 或者 <code>Fragment</code> 并且实现了 <code>android.support.v4.app.ActivityCompat.OnRequestPermissionsResultCallback</code> 或者 <code>android.support.v13.app.FragmentCompat.OnRequestPermissionsResultCallback</code>。然后通过 <code>shouldShowRequestPermissionRationale</code> 方法去判断是否需要显示请求权限的理由，当申请的权限中有一个需要显示请求权限的话，那么就会弹出 dialog 。如果需要弹出 dialog ，用户取消的话那么直接回调出去，没有取消的话就让系统进行权限的申请。</p>
<p>走到这里 <code>requestPermission()</code> 的任务完成了，那么当用户同意或者不同意授予请求的权限，会进入到 <code>android.support.v4.app.ActivityCompat.OnRequestPermissionsResultCallback</code> 或者 <code>android.support.v13.app.FragmentCompat.OnRequestPermissionsResultCallback</code>。再回过头看看 <code>使用#准备</code> 中的内容，发现在 <code>OnRequestPermissionsResultCallback</code> 方法中调用了 <code>EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);</code>。</p>
<h3 id="onRequestPermissionsResult"><a href="#onRequestPermissionsResult" class="headerlink" title="onRequestPermissionsResult"></a>onRequestPermissionsResult</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyPermissions</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Handle the result of a permission request, should be called from the calling Activity's</span><br><span class="line">     * &#123;<span class="doctag">@link</span> android.support.v4.app.ActivityCompat.OnRequestPermissionsResultCallback#onRequestPermissionsResult(int, String[], int[])&#125;</span><br><span class="line">     * method.</span><br><span class="line">     * &lt;p/&gt;</span><br><span class="line">     * If any permissions were granted or denied, the Activity will receive the appropriate</span><br><span class="line">     * callbacks through &#123;<span class="doctag">@link</span> PermissionCallbacks&#125; and methods annotated with</span><br><span class="line">     * &#123;<span class="doctag">@link</span> AfterPermissionGranted&#125; will be run if appropriate.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> requestCode  requestCode argument to permission result callback.</span><br><span class="line">     * <span class="doctag">@param</span> permissions  permissions argument to permission result callback.</span><br><span class="line">     * <span class="doctag">@param</span> grantResults grantResults argument to permission result callback.</span><br><span class="line">     * <span class="doctag">@param</span> object       the calling Activity or Fragment.</span><br><span class="line">     * <span class="doctag">@throws</span> IllegalArgumentException if the calling Activity does not implement</span><br><span class="line">     *                                  &#123;<span class="doctag">@link</span> PermissionCallbacks&#125;.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断传入参数是否合适</span></span><br><span class="line">        checkCallingObjectSuitability(object);</span><br><span class="line">        <span class="comment">//合适的话直接强转，不合适抛异常</span></span><br><span class="line">        PermissionCallbacks callbacks = (PermissionCallbacks) object;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make a collection of granted and denied permissions from the request.</span></span><br><span class="line">        ArrayList&lt;String&gt; granted = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; denied = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="comment">//判断返回的权限数据，如果权限被授予，添加到granted的List中，没有被授予则添加到denied的List中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissions.length; i++) &#123;</span><br><span class="line">            String perm = permissions[i];</span><br><span class="line">            <span class="keyword">if</span> (grantResults[i] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                granted.add(perm);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                denied.add(perm);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Report granted permissions, if any.</span></span><br><span class="line">      <span class="comment">//进行回调</span></span><br><span class="line">        <span class="keyword">if</span> (!granted.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Notify callbacks</span></span><br><span class="line">            callbacks.onPermissionsGranted(requestCode, granted);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Report denied permissions, if any.</span></span><br><span class="line">      <span class="comment">//进行回调</span></span><br><span class="line">        <span class="keyword">if</span> (!denied.isEmpty()) &#123;</span><br><span class="line">            callbacks.onPermissionsDenied(requestCode, denied);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If 100% successful, call annotated methods</span></span><br><span class="line">      <span class="comment">//如果所有请求的权限都被授予，则调用被注解的方法</span></span><br><span class="line">        <span class="keyword">if</span> (!granted.isEmpty() &amp;&amp; denied.isEmpty()) &#123;</span><br><span class="line">            runAnnotatedMethods(object, requestCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>onRequestPermissionsResult()</code> 方法处理系统请求权限之后返回的数据，将授予和没有授予的权限通过 <code>PermissionCallbacks</code> 分别回调出去。最后如果请求的权限都被授予的话，则自动去调用被注解了的方法。</p>
<h3 id="runAnnotatedMethods"><a href="#runAnnotatedMethods" class="headerlink" title="runAnnotatedMethods"></a>runAnnotatedMethods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyPermissions</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 通过反射的方式调用被注解了的方法</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> object</span><br><span class="line">     * <span class="doctag">@param</span> requestCode</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runAnnotatedMethods</span><span class="params">(Object object, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        Class clazz = object.getClass();</span><br><span class="line">        <span class="keyword">for</span> (Method method : clazz.getDeclaredMethods()) &#123;</span><br><span class="line">          <span class="comment">//是否被AfterPermissionGranted注解了的方法</span></span><br><span class="line">            <span class="keyword">if</span> (method.isAnnotationPresent(AfterPermissionGranted.class)) &#123;</span><br><span class="line">                <span class="comment">// Check for annotated methods with matching request code.</span></span><br><span class="line">                AfterPermissionGranted ann = method.getAnnotation(AfterPermissionGranted.class);</span><br><span class="line">              <span class="comment">//requestCode和AfterPermissionGranted注解传入的requestCode相同的话</span></span><br><span class="line">                <span class="keyword">if</span> (ann.value() == requestCode) &#123;</span><br><span class="line">                    <span class="comment">// Method must be void so that we can invoke it</span></span><br><span class="line">                  <span class="comment">//必须是没有参数的方法</span></span><br><span class="line">                    <span class="keyword">if</span> (method.getParameterTypes().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot execute non-void method "</span> + method.getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// Make method accessible if private</span></span><br><span class="line">                      <span class="comment">//如果是private的话，设置Accessible</span></span><br><span class="line">                        <span class="keyword">if</span> (!method.isAccessible()) &#123;</span><br><span class="line">                            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                      <span class="comment">//调用</span></span><br><span class="line">                        method.invoke(object);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        Log.e(TAG, <span class="string">"runDefaultMethod:IllegalAccessException"</span>, e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                        Log.e(TAG, <span class="string">"runDefaultMethod:InvocationTargetException"</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>runAnnotatedMethods()</code> 方法通过反射方法去调用被注解了的方法，同时这个方法得满足 <code>requestCode</code> 相同且方法没有参数。</p>
<h3 id="AfterPermissionGranted"><a href="#AfterPermissionGranted" class="headerlink" title="AfterPermissionGranted"></a>AfterPermissionGranted</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> AfterPermissionGranted &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个 <code>RUNTIME</code> 的注解，常用使用方式就是通过反射的形式。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>EasyPermissions</code> 通过注解的方式巧妙的减少了在成功请求权限之后的操作，减少的步奏是完成获取权限成功之后自动调用被注解的方法。简单的例子就如 demo 中的一样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@AfterPermissionGranted</span>(RC_CAMERA_PERM)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cameraTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="keyword">this</span>, Manifest.permission.CAMERA)) &#123;</span><br><span class="line">        <span class="comment">// Have permission, do the thing!</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"TODO: Camera things"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ask for one permission</span></span><br><span class="line">        EasyPermissions.requestPermissions(<span class="keyword">this</span>, getString(R.string.rationale_camera), RC_CAMERA_PERM, Manifest.permission.CAMERA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有权限的情况下请求权限，请求完之后如果成功则又自动进入这个方法，进行 Toast 操作。</p>
<h3 id="运行时权限"><a href="#运行时权限" class="headerlink" title="运行时权限"></a>运行时权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">group:android.permission-group.CONTACTS</span><br><span class="line">  permission:android.permission.WRITE_CONTACTS</span><br><span class="line">  permission:android.permission.GET_ACCOUNTS</span><br><span class="line">  permission:android.permission.READ_CONTACTS</span><br><span class="line"></span><br><span class="line">group:android.permission-group.PHONE</span><br><span class="line">  permission:android.permission.READ_CALL_LOG</span><br><span class="line">  permission:android.permission.READ_PHONE_STATE</span><br><span class="line">  permission:android.permission.CALL_PHONE</span><br><span class="line">  permission:android.permission.WRITE_CALL_LOG</span><br><span class="line">  permission:android.permission.USE_SIP</span><br><span class="line">  permission:android.permission.PROCESS_OUTGOING_CALLS</span><br><span class="line">  permission:com.android.voicemail.permission.ADD_VOICEMAIL</span><br><span class="line"></span><br><span class="line">group:android.permission-group.CALENDAR</span><br><span class="line">  permission:android.permission.READ_CALENDAR</span><br><span class="line">  permission:android.permission.WRITE_CALENDAR</span><br><span class="line"></span><br><span class="line">group:android.permission-group.CAMERA</span><br><span class="line">  permission:android.permission.CAMERA</span><br><span class="line"></span><br><span class="line">group:android.permission-group.SENSORS</span><br><span class="line">  permission:android.permission.BODY_SENSORS</span><br><span class="line"></span><br><span class="line">group:android.permission-group.LOCATION</span><br><span class="line">  permission:android.permission.ACCESS_FINE_LOCATION</span><br><span class="line">  permission:android.permission.ACCESS_COARSE_LOCATION</span><br><span class="line"></span><br><span class="line">group:android.permission-group.STORAGE</span><br><span class="line">  permission:android.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">  permission:android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class="line"></span><br><span class="line">group:android.permission-group.MICROPHONE</span><br><span class="line">  permission:android.permission.RECORD_AUDIO</span><br><span class="line"></span><br><span class="line">group:android.permission-group.SMS</span><br><span class="line">  permission:android.permission.READ_SMS</span><br><span class="line">  permission:android.permission.RECEIVE_WAP_PUSH</span><br><span class="line">  permission:android.permission.RECEIVE_MMS</span><br><span class="line">  permission:android.permission.RECEIVE_SMS</span><br><span class="line">  permission:android.permission.SEND_SMS</span><br><span class="line">  permission:android.permission.READ_CELL_BROADCASTS</span><br></pre></td></tr></table></figure>
<p>同时也可以通过 <code>adb shell pm list permissions -d -g</code> 进行查看。</p>
<p>运行权限也分为了一组一组的，同时申请权限的时候也是按组来申请的，也就是说 <strong>app 对 <code>READ_CONTACTS</code> 已经授权了，当你的 app 申请 <code>WRITE_CONTACTS</code> 时，系统会直接授权通过</strong>。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>EasyPermissions</code> 提供的 <code>Fragment</code> 是 v4 包的，如果要使用 <code>android.app.Fragment</code> 的话就需要自己添加了。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 权限 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android-crop源码解析]]></title>
      <url>/2016/04/17/android-crop-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/jdamcd/android-crop" target="_blank" rel="external">android-crop</a>      分析版本：<a href="https://github.com/jdamcd/android-crop/tree/2db9b6eeaea5990947a2bf07288b0852a272945a" target="_blank" rel="external">adb9b6e</a></p>
</blockquote>
<p>android-crop 是一个基于 AOSP 的图片裁剪库。</p>
<a id="more"></a>
<h2 id="android-crop"><a href="#android-crop" class="headerlink" title="android-crop"></a>android-crop</h2><p><img src="http://yydcdut.github.io/img/android_crop_highlightview.jpg" alt="android-crop"></p>
<p>整个界面分为上面的两个 Button，显示的 CropImageView，裁剪显示区域的 HighlightView。通过拖拉已经放大缩小 HighlightView 来确定裁剪区域。同时当 HighlightView 缩小的一定值的时候， CropImageView 也会缩小。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入包：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.soundcloud.android:android-crop:1.0.1@aar'</span></span><br></pre></td></tr></table></figure>
<p>在 <code>AndroidManifest.xml</code> 中申明 <code>CropImageActivity</code> :</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">"com.soundcloud.android.crop.CropImageActivity"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>选择想要裁剪的图片（选择图片的这个过程也可以自己完成）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Crop.pickImage(activity)</span><br></pre></td></tr></table></figure>
<p>之后会返回到 <code>onActivityResult</code> 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent result)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (requestCode == Crop.REQUEST_PICK &amp;&amp; resultCode == RESULT_OK) &#123;</span><br><span class="line">		beginCrop(result.getData());</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行裁剪：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beginCrop</span><span class="params">(Uri source)</span> </span>&#123;</span><br><span class="line">	Uri destination = Uri.fromFile(<span class="keyword">new</span> File(getCacheDir(), <span class="string">"cropped"</span>));<span class="comment">//temp url</span></span><br><span class="line">	Crop.of(source, destination).asSquare().start(activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>裁剪完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent result)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (requestCode == Crop.REQUEST_CROPK) &#123;</span><br><span class="line">		handleCrop(resultCode, result);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="选择图片"><a href="#选择图片" class="headerlink" title="选择图片"></a>选择图片</h3><p>先从选择图片开始看，这个地方也就是通过 <code>Intent</code> 的 type 为 <code>image/*</code> 去做操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crop</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Pick image from an Activity</span><br><span class="line">     * 通过Activity的方式启动</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> activity Activity to receive result</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pickImage</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        pickImage(activity, REQUEST_PICK);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * Pick image from an Activity with a custom request code</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> activity    Activity to receive result</span><br><span class="line">     * <span class="doctag">@param</span> requestCode requestCode for result</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pickImage</span><span class="params">(Activity activity, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            activity.startActivityForResult(getImagePicker(), requestCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class="line">            showImagePickerError(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Intent <span class="title">getImagePicker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT).setType(<span class="string">"image/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showImagePickerError</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, R.string.crop__pick_error, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>Crop</code> 中不仅仅提供了 <code>Activity</code> 的方式，同时还提供了 <code>android.app.Fragment</code> 和 <code>android.support.v4.app.Fragment</code> 的方式。</p>
<h3 id="裁图前的准备"><a href="#裁图前的准备" class="headerlink" title="裁图前的准备"></a>裁图前的准备</h3><p>先从入口开始看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uri destination = Uri.fromFile(<span class="keyword">new</span> File(getCacheDir(), <span class="string">"cropped"</span>));</span><br><span class="line">Crop.of(source, destination).asSquare().start(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>传入的 <code>destination</code> 是裁剪完之后保存的地址。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Crop</span> </span>&#123;</span><br><span class="line">  	<span class="class"><span class="keyword">interface</span> <span class="title">Extra</span> </span>&#123;</span><br><span class="line">        String ASPECT_X = <span class="string">"aspect_x"</span>;</span><br><span class="line">        String ASPECT_Y = <span class="string">"aspect_y"</span>;</span><br><span class="line">        String MAX_X = <span class="string">"max_x"</span>;</span><br><span class="line">        String MAX_Y = <span class="string">"max_y"</span>;</span><br><span class="line">        String ERROR = <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Intent cropIntent;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * Create a crop Intent builder with source and destination image Uris</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> source      Uri for image to crop</span><br><span class="line">     * <span class="doctag">@param</span> destination Uri for saving the cropped image</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Crop <span class="title">of</span><span class="params">(Uri source, Uri destination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Crop(source, destination);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="title">Crop</span><span class="params">(Uri source, Uri destination)</span> </span>&#123;</span><br><span class="line">        cropIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">        cropIntent.setData(source);</span><br><span class="line">        cropIntent.putExtra(MediaStore.EXTRA_OUTPUT, destination);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * Crop area with fixed 1:1 aspect ratio</span><br><span class="line">     * X:Y 的比例为 1:1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Crop <span class="title">asSquare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cropIntent.putExtra(Extra.ASPECT_X, <span class="number">1</span>);</span><br><span class="line">        cropIntent.putExtra(Extra.ASPECT_Y, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * Send the crop Intent from an Activity</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> activity Activity to receive result</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        start(activity, REQUEST_CROP);</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * Send the crop Intent from an Activity with a custom request code</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> activity    Activity to receive result</span><br><span class="line">     * <span class="doctag">@param</span> requestCode requestCode for result</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Activity activity, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        activity.startActivityForResult(getIntent(activity), requestCode);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * Get Intent to start crop Activity</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> context Context</span><br><span class="line">     * <span class="doctag">@return</span> Intent for CropImageActivity</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Intent <span class="title">getIntent</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        cropIntent.setClass(context, CropImageActivity.class);</span><br><span class="line">        <span class="keyword">return</span> cropIntent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调用 <code>Crop.of(source, destination).asSquare().start(this)</code> 进入到 <code>CropImageActivity</code> 这个界面中。其中还经历了许多的配置，比如初始化的时候裁图显示的X/Y比例是多少等。</p>
<p>那么进入到 <code>CropImageActivity</code> 中看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CropImageActivity</span> <span class="keyword">extends</span> <span class="title">MonitoredActivity</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_DEFAULT = <span class="number">2048</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_LIMIT = <span class="number">4096</span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">int</span> aspectX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aspectY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output image</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> exifRotation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Uri sourceUri;<span class="comment">//要裁图的图片的uri</span></span><br><span class="line">    <span class="keyword">private</span> Uri saveUri;<span class="comment">//裁完图的图片要保存的地址</span></span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> CropImageView imageView;<span class="comment">//显示bitmap的View</span></span><br><span class="line">	<span class="keyword">private</span> HighlightView cropView;<span class="comment">//显示裁剪的View</span></span><br><span class="line">  </span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line">        setupWindowFlags();<span class="comment">//初始化界面</span></span><br><span class="line">        setupViews();<span class="comment">//初始化界面里的控件</span></span><br><span class="line"></span><br><span class="line">        loadInput();<span class="comment">//加载传入的数据</span></span><br><span class="line">        <span class="keyword">if</span> (rotateBitmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        startCrop();<span class="comment">//开始裁剪</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * 加载数据</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        Bundle extras = intent.getExtras();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (extras != <span class="keyword">null</span>) &#123;</span><br><span class="line">            aspectX = extras.getInt(Crop.Extra.ASPECT_X);</span><br><span class="line">            aspectY = extras.getInt(Crop.Extra.ASPECT_Y);</span><br><span class="line">            maxX = extras.getInt(Crop.Extra.MAX_X);</span><br><span class="line">            maxY = extras.getInt(Crop.Extra.MAX_Y);</span><br><span class="line">            saveUri = extras.getParcelable(MediaStore.EXTRA_OUTPUT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sourceUri = intent.getData();</span><br><span class="line">        <span class="keyword">if</span> (sourceUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            exifRotation = CropUtil.getExifRotation(CropUtil.getFromMediaUri(<span class="keyword">this</span>, getContentResolver(), sourceUri));<span class="comment">//通过图片的Exif信息得到要选择多少度</span></span><br><span class="line"></span><br><span class="line">            InputStream is = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sampleSize = calculateBitmapSampleSize(sourceUri);<span class="comment">//计算图片在decode的时候的sampleSize</span></span><br><span class="line">                is = getContentResolver().openInputStream(sourceUri);</span><br><span class="line">                BitmapFactory.Options option = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">                option.inSampleSize = sampleSize;</span><br><span class="line">              	<span class="comment">//decode出通过exif信息旋转之后，通过option的simpleSize采样缩放之后的bitmap，赋值给成员变量rotateBitmap</span></span><br><span class="line">                rotateBitmap = <span class="keyword">new</span> RotateBitmap(BitmapFactory.decodeStream(is, <span class="keyword">null</span>, option), exifRotation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                Log.e(<span class="string">"Error reading image: "</span> + e.getMessage(), e);</span><br><span class="line">                setResultException(e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</span><br><span class="line">                Log.e(<span class="string">"OOM reading image: "</span> + e.getMessage(), e);</span><br><span class="line">                setResultException(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                CropUtil.closeSilently(is);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 计算simpleSize</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calculateBitmapSampleSize</span><span class="params">(Uri bitmapUri)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = getContentResolver().openInputStream(bitmapUri);</span><br><span class="line">            BitmapFactory.decodeStream(is, <span class="keyword">null</span>, options); <span class="comment">//bitmap的高宽都存到了options中</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            CropUtil.closeSilently(is);<span class="comment">//关流</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxSize = getMaxImageSize();<span class="comment">//得到最大的显示size</span></span><br><span class="line">        <span class="keyword">int</span> sampleSize = <span class="number">1</span>;</span><br><span class="line">      	<span class="comment">//通过bitmap的高或者宽除以simpleSize得到的值与maxSize对比，如果还大的话，simpleSize向右移动一位，就是乘以2，如果都不大于maxSize的话，就选定当前这个值</span></span><br><span class="line">        <span class="keyword">while</span> (options.outHeight / sampleSize &gt; maxSize || options.outWidth / sampleSize &gt; maxSize) &#123;</span><br><span class="line">            sampleSize = sampleSize &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sampleSize;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 得到最大的Size</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxImageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> textureLimit = getMaxTextureSize();</span><br><span class="line">        <span class="keyword">if</span> (textureLimit == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> SIZE_DEFAULT;<span class="comment">//2048</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.min(textureLimit, SIZE_LIMIT);<span class="comment">//4096</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * OpenGL的texture的大小是ImageView最大绘制的大小</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxTextureSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The OpenGL texture size is the maximum size that can be drawn in an ImageView</span></span><br><span class="line">        <span class="keyword">int</span>[] maxSize = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        GLES10.glGetIntegerv(GLES10.GL_MAX_TEXTURE_SIZE, maxSize, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> maxSize[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCrop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFinishing()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//设置bitmap</span></span><br><span class="line">        imageView.setImageRotateBitmapResetBase(rotateBitmap, <span class="keyword">true</span>);</span><br><span class="line">        CropUtil.startBackgroundJob(<span class="keyword">this</span>, <span class="keyword">null</span>, getResources().getString(R.string.crop__wait),</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                      	<span class="comment">//线程计数器</span></span><br><span class="line">                        <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">                      	<span class="comment">//主线程进行UI操作</span></span><br><span class="line">                        handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                <span class="keyword">if</span> (imageView.getScale() == <span class="number">1F</span>) &#123;</span><br><span class="line">                                    imageView.center();</span><br><span class="line">                                &#125;</span><br><span class="line">                                latch.countDown();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                      	<span class="comment">//子线程阻塞住，直到latch.countDown();执行</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            latch.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                      	<span class="comment">//设置裁剪View</span></span><br><span class="line">                        <span class="keyword">new</span> Cropper().crop();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, handler</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Cropper</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">crop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    makeDefault();<span class="comment">//设置默认值</span></span><br><span class="line">                    imageView.invalidate();<span class="comment">//更新绘制</span></span><br><span class="line">                    <span class="keyword">if</span> (imageView.highlightViews.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                        cropView = imageView.highlightViews.get(<span class="number">0</span>);</span><br><span class="line">                        cropView.setFocus(<span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (rotateBitmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HighlightView hv = <span class="keyword">new</span> HighlightView(imageView);<span class="comment">//这个imageview就是CropImageView</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> width = rotateBitmap.getWidth();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> height = rotateBitmap.getHeight();</span><br><span class="line"></span><br><span class="line">            Rect imageRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make the default size about 4/5 of the width or height</span></span><br><span class="line">            <span class="keyword">int</span> cropWidth = Math.min(width, height) * <span class="number">4</span> / <span class="number">5</span>;<span class="comment">//要显示裁剪的view的宽度是bitmap的宽度或高度中的最小值的4/5</span></span><br><span class="line">            <span class="annotation">@SuppressWarnings</span>(<span class="string">"SuspiciousNameCombination"</span>)</span><br><span class="line">            <span class="keyword">int</span> cropHeight = cropWidth;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (aspectX != <span class="number">0</span> &amp;&amp; aspectY != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (aspectX &gt; aspectY) &#123;<span class="comment">//根据传入的X:Y的比例进行设置</span></span><br><span class="line">                    cropHeight = cropWidth * aspectY / aspectX;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cropWidth = cropHeight * aspectX / aspectY;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> x = (width - cropWidth) / <span class="number">2</span>;<span class="comment">//裁剪view的x坐标</span></span><br><span class="line">            <span class="keyword">int</span> y = (height - cropHeight) / <span class="number">2</span>;<span class="comment">//裁剪view的y坐标</span></span><br><span class="line"></span><br><span class="line">            RectF cropRect = <span class="keyword">new</span> RectF(x, y, x + cropWidth, y + cropHeight);</span><br><span class="line">            hv.setup(imageView.getUnrotatedMatrix(), imageRect, cropRect, aspectX != <span class="number">0</span> &amp;&amp; aspectY != <span class="number">0</span>);<span class="comment">//初始化HighlightView</span></span><br><span class="line">            imageView.add(hv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>startCrop</code> 中做的 job 是以下操作，主要是通过 <code>Activity</code> 生命周期来显示或者隐藏 <code>Dialog</code> 和在子线程中执行 job 操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CropUtil</span> </span>&#123;</span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * 该方法主要操作就是进行耗时操作前后显示dialog，同时监听Activity的生命去显示和隐藏dialog</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> activity</span><br><span class="line">     * <span class="doctag">@param</span> title</span><br><span class="line">     * <span class="doctag">@param</span> message</span><br><span class="line">     * <span class="doctag">@param</span> job</span><br><span class="line">     * <span class="doctag">@param</span> handler</span><br><span class="line">     */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startBackgroundJob</span><span class="params">(MonitoredActivity activity, String title, String message, Runnable job, Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Make the progress dialog uncancelable, so that we can guarantee</span></span><br><span class="line">        <span class="comment">// the thread will be done before the activity getting destroyed</span></span><br><span class="line">        ProgressDialog dialog = ProgressDialog.show(</span><br><span class="line">                activity, title, message, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> BackgroundJob(activity, job, dialog, handler)).start();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//MonitoredActivity.LifeCycleAdapter是Activity的生命周期监听的一个Adapter</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundJob</span> <span class="keyword">extends</span> <span class="title">MonitoredActivity</span>.<span class="title">LifeCycleAdapter</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MonitoredActivity activity;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ProgressDialog dialog;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Runnable job;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Handler handler;<span class="comment">//主线程的handler</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Runnable cleanupRunner = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              	<span class="comment">//从activity中remove掉，防止泄露</span></span><br><span class="line">                activity.removeLifeCycleListener(BackgroundJob.<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">if</span> (dialog.getWindow() != <span class="keyword">null</span>) dialog.dismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BackgroundJob</span><span class="params">(MonitoredActivity activity, Runnable job,</span><br><span class="line">                             ProgressDialog dialog, Handler handler)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.activity = activity;</span><br><span class="line">            <span class="keyword">this</span>.dialog = dialog;</span><br><span class="line">            <span class="keyword">this</span>.job = job;</span><br><span class="line">            <span class="keyword">this</span>.activity.addLifeCycleListener(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.handler = handler;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              	<span class="comment">//执行job</span></span><br><span class="line">                job.run();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                handler.post(cleanupRunner);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(MonitoredActivity activity)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// We get here only when the onDestroyed being called before</span></span><br><span class="line">            <span class="comment">// the cleanupRunner. So, run it now and remove it from the queue</span></span><br><span class="line">            cleanupRunner.run();</span><br><span class="line">            handler.removeCallbacks(cleanupRunner);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStopped</span><span class="params">(MonitoredActivity activity)</span> </span>&#123;</span><br><span class="line">          	<span class="comment">//当Activity的状态为stop的时候，将dialog隐藏掉</span></span><br><span class="line">            dialog.hide();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(MonitoredActivity activity)</span> </span>&#123;</span><br><span class="line">          	<span class="comment">//当Activity的状态为started的时候，将dialog显示出来</span></span><br><span class="line">            dialog.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="真正裁剪"><a href="#真正裁剪" class="headerlink" title="真正裁剪"></a>真正裁剪</h3><p>当点击『完成』时候：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CropImageActivity</span> <span class="keyword">extends</span> <span class="title">MonitoredActivity</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onSaveClicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cropView == <span class="keyword">null</span> || isSaving) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isSaving = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        Bitmap croppedImage;</span><br><span class="line">      	<span class="comment">//得到HighlightView的Rect大小</span></span><br><span class="line">        Rect r = cropView.getScaledCropRect(sampleSize);</span><br><span class="line">        <span class="keyword">int</span> width = r.width();</span><br><span class="line">        <span class="keyword">int</span> height = r.height();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> outWidth = width;</span><br><span class="line">        <span class="keyword">int</span> outHeight = height;</span><br><span class="line">      	<span class="comment">//如果intent传参传的是maxX和maxY的话，这里就需要进行判断</span></span><br><span class="line">      	<span class="comment">//如果裁剪出的width大于maxX或者裁剪出的height大于maxY，则进行比例缩放</span></span><br><span class="line">        <span class="keyword">if</span> (maxX &gt; <span class="number">0</span> &amp;&amp; maxY &gt; <span class="number">0</span> &amp;&amp; (width &gt; maxX || height &gt; maxY)) &#123;</span><br><span class="line">            <span class="keyword">float</span> ratio = (<span class="keyword">float</span>) width / (<span class="keyword">float</span>) height;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">float</span>) maxX / (<span class="keyword">float</span>) maxY &gt; ratio) &#123;</span><br><span class="line">                outHeight = maxY;</span><br><span class="line">                outWidth = (<span class="keyword">int</span>) ((<span class="keyword">float</span>) maxY * ratio + .<span class="number">5f</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                outWidth = maxX;</span><br><span class="line">                outHeight = (<span class="keyword">int</span>) ((<span class="keyword">float</span>) maxX / ratio + .<span class="number">5f</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          	<span class="comment">//得到裁剪之后的Bitmap</span></span><br><span class="line">            croppedImage = decodeRegionCrop(r, outWidth, outHeight);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            setResultException(e);</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (croppedImage != <span class="keyword">null</span>) &#123;</span><br><span class="line">          	<span class="comment">//在CropImageView中显示裁剪了的bitmap</span></span><br><span class="line">            imageView.setImageRotateBitmapResetBase(<span class="keyword">new</span> RotateBitmap(croppedImage, exifRotation), <span class="keyword">true</span>);</span><br><span class="line">            imageView.center();</span><br><span class="line">            imageView.highlightViews.clear();</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//保存裁剪之后的bitmap</span></span><br><span class="line">        saveImage(croppedImage);</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="function"><span class="keyword">private</span> Bitmap <span class="title">decodeRegionCrop</span><span class="params">(Rect rect, <span class="keyword">int</span> outWidth, <span class="keyword">int</span> outHeight)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Release memory now</span></span><br><span class="line">      	<span class="comment">//释放CropImageView中的bitmap</span></span><br><span class="line">        clearImageView();</span><br><span class="line"></span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        Bitmap croppedImage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = getContentResolver().openInputStream(sourceUri);</span><br><span class="line">          	<span class="comment">//得到BitmapRegionDecoder</span></span><br><span class="line">            BitmapRegionDecoder decoder = BitmapRegionDecoder.newInstance(is, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> width = decoder.getWidth();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> height = decoder.getHeight();</span><br><span class="line">			<span class="comment">//如果exif信息中要旋转</span></span><br><span class="line">            <span class="keyword">if</span> (exifRotation != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Adjust crop area to account for image rotation</span></span><br><span class="line">                Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">                matrix.setRotate(-exifRotation);</span><br><span class="line">				<span class="comment">//adjusted为旋转后的rect</span></span><br><span class="line">                RectF adjusted = <span class="keyword">new</span> RectF();</span><br><span class="line">                matrix.mapRect(adjusted, <span class="keyword">new</span> RectF(rect));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Adjust to account for origin at 0,0</span></span><br><span class="line">                adjusted.offset(adjusted.left &lt; <span class="number">0</span> ? width : <span class="number">0</span>, adjusted.top &lt; <span class="number">0</span> ? height : <span class="number">0</span>);</span><br><span class="line">                rect = <span class="keyword">new</span> Rect((<span class="keyword">int</span>) adjusted.left, (<span class="keyword">int</span>) adjusted.top, (<span class="keyword">int</span>) adjusted.right, (<span class="keyword">int</span>) adjusted.bottom);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              	<span class="comment">//裁剪rect区域的图像</span></span><br><span class="line">                croppedImage = decoder.decodeRegion(rect, <span class="keyword">new</span> BitmapFactory.Options());</span><br><span class="line">              	<span class="comment">//裁剪的宽度或高度大于想要的宽度或高度的话，通过矩阵进行缩放，然后再创建出一个想要高宽的bitmap</span></span><br><span class="line">                <span class="keyword">if</span> (croppedImage != <span class="keyword">null</span> &amp;&amp; (rect.width() &gt; outWidth || rect.height() &gt; outHeight)) &#123;</span><br><span class="line">                    Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">                    matrix.postScale((<span class="keyword">float</span>) outWidth / rect.width(), (<span class="keyword">float</span>) outHeight / rect.height());</span><br><span class="line">                    croppedImage = Bitmap.createBitmap(croppedImage, <span class="number">0</span>, <span class="number">0</span>, croppedImage.getWidth(), croppedImage.getHeight(), matrix, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                <span class="comment">// Rethrow with some extra information</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Rectangle "</span> + rect + <span class="string">" is outside of the image ("</span></span><br><span class="line">                        + width + <span class="string">","</span> + height + <span class="string">","</span> + exifRotation + <span class="string">")"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.e(<span class="string">"Error cropping image: "</span> + e.getMessage(), e);</span><br><span class="line">            setResultException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</span><br><span class="line">            Log.e(<span class="string">"OOM cropping image: "</span> + e.getMessage(), e);</span><br><span class="line">            setResultException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            CropUtil.closeSilently(is);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> croppedImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 回收之前没有裁剪的bitmap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearImageView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        imageView.clear();</span><br><span class="line">        <span class="keyword">if</span> (rotateBitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rotateBitmap.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveImage</span><span class="params">(Bitmap croppedImage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (croppedImage != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Bitmap b = croppedImage;</span><br><span class="line">            CropUtil.startBackgroundJob(<span class="keyword">this</span>, <span class="keyword">null</span>, getResources().getString(R.string.crop__saving),</span><br><span class="line">                    <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            saveOutput(b);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, handler</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * 保存bitmap</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> croppedImage</span><br><span class="line">     */</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveOutput</span><span class="params">(Bitmap croppedImage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (saveUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream = getContentResolver().openOutputStream(saveUri);</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    croppedImage.compress(Bitmap.CompressFormat.JPEG, <span class="number">90</span>, outputStream);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                setResultException(e);</span><br><span class="line">                Log.e(<span class="string">"Cannot open file: "</span> + saveUri, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                CropUtil.closeSilently(outputStream);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            CropUtil.copyExifRotation(</span><br><span class="line">                    CropUtil.getFromMediaUri(<span class="keyword">this</span>, getContentResolver(), sourceUri),</span><br><span class="line">                    CropUtil.getFromMediaUri(<span class="keyword">this</span>, getContentResolver(), saveUri)</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            setResultUri(saveUri);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Bitmap b = croppedImage;</span><br><span class="line">        handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                imageView.clear();</span><br><span class="line">                b.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>裁剪是通过 <code>BitmapRegionDecoder</code> 来实现的，<code>BitmapRegionDecoder.newInstance(InputStream is, boolean isShareable)</code> ，传入的参数是一个 <code>InputStream</code> ，这样做的好处是可以减少创建出原图大小的 Bitmap ，达到节省内存，<em>有效的防止 OOM</em>。</strong></p>
<h3 id="RotateBitmap"><a href="#RotateBitmap" class="headerlink" title="RotateBitmap"></a>RotateBitmap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotateBitmap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bitmap bitmap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rotation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RotateBitmap</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> rotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bitmap = bitmap;</span><br><span class="line">        <span class="keyword">this</span>.rotation = rotation % <span class="number">360</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRotation</span><span class="params">(<span class="keyword">int</span> rotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rotation = rotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBitmap</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bitmap = bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//得到旋转的矩阵</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Matrix <span class="title">getRotateMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// By default this is an identity matrix</span></span><br><span class="line">        Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span> &amp;&amp; rotation != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// We want to do the rotation at origin, but since the bounding</span></span><br><span class="line">            <span class="comment">// rectangle will be changed after rotation, so the delta values</span></span><br><span class="line">            <span class="comment">// are based on old &amp; new width/height respectively.</span></span><br><span class="line">            <span class="keyword">int</span> cx = bitmap.getWidth() / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> cy = bitmap.getHeight() / <span class="number">2</span>;</span><br><span class="line">            matrix.preTranslate(-cx, -cy);</span><br><span class="line">            matrix.postRotate(rotation);</span><br><span class="line">            matrix.postTranslate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOrientationChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rotation / <span class="number">90</span>) % <span class="number">2</span> != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//得到高度，要判断exif中是否要旋转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isOrientationChanged()) &#123;</span><br><span class="line">            <span class="keyword">return</span> bitmap.getWidth();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bitmap.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//得到宽度，要判断exif中是否要旋转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isOrientationChanged()) &#123;</span><br><span class="line">            <span class="keyword">return</span> bitmap.getHeight();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bitmap.getWidth();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//回收bitmap</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bitmap.recycle();</span><br><span class="line">            bitmap = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HighlightView"><a href="#HighlightView" class="headerlink" title="HighlightView"></a>HighlightView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HighlightView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GROW_NONE = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>);<span class="comment">//没有状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GROW_LEFT_EDGE = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>);<span class="comment">//触摸到左边边界状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GROW_RIGHT_EDGE = (<span class="number">1</span> &lt;&lt; <span class="number">2</span>);<span class="comment">//触摸到右边边界状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GROW_TOP_EDGE = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>);<span class="comment">//触摸到上面边界状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GROW_BOTTOM_EDGE = (<span class="number">1</span> &lt;&lt; <span class="number">4</span>);<span class="comment">//触摸到下边边界状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVE = (<span class="number">1</span> &lt;&lt; <span class="number">5</span>);<span class="comment">//移动状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HIGHLIGHT_COLOR = <span class="number">0xFF33B5E5</span>;<span class="comment">//默认颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> HANDLE_RADIUS_DP = <span class="number">12f</span>;<span class="comment">//默认handle的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> OUTLINE_DP = <span class="number">2f</span>;<span class="comment">//线的宽度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> ModifyMode &#123;None, Move, Grow&#125;<span class="comment">//当前触摸状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> HandleMode &#123;Changing, Always, Never&#125;</span><br><span class="line"></span><br><span class="line">    RectF cropRect; <span class="comment">// Image space</span></span><br><span class="line">    Rect drawRect; <span class="comment">// Screen space</span></span><br><span class="line">    Matrix matrix;</span><br><span class="line">    <span class="keyword">private</span> RectF imageRect; <span class="comment">// Image space</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint outsidePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint outlinePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint handlePaint = <span class="keyword">new</span> Paint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> View viewContext; <span class="comment">// View displaying image</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> showThirds;<span class="comment">//是否绘制裁剪View里面的四条线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> showCircle;<span class="comment">//是否绘制圆</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> highlightColor;<span class="comment">//裁剪View绘制的颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ModifyMode modifyMode = ModifyMode.None;</span><br><span class="line">    <span class="keyword">private</span> HandleMode handleMode = HandleMode.Changing;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> maintainAspectRatio;<span class="comment">//是否希望变化的时候保存X/Y的比例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> initialAspectRatio;<span class="comment">//初始化的时候比例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> handleRadius;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> outlineWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFocused;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighlightView</span><span class="params">(View context)</span> </span>&#123;</span><br><span class="line">        viewContext = context;</span><br><span class="line">        initStyles(context.getContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initStyles</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//读取attr的值</span></span><br><span class="line">        TypedValue outValue = <span class="keyword">new</span> TypedValue();</span><br><span class="line">        context.getTheme().resolveAttribute(R.attr.cropImageStyle, outValue, <span class="keyword">true</span>);</span><br><span class="line">        TypedArray attributes = context.obtainStyledAttributes(outValue.resourceId, R.styleable.CropImageView);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            showThirds = attributes.getBoolean(R.styleable.CropImageView_showThirds, <span class="keyword">false</span>);</span><br><span class="line">            showCircle = attributes.getBoolean(R.styleable.CropImageView_showCircle, <span class="keyword">false</span>);</span><br><span class="line">            highlightColor = attributes.getColor(R.styleable.CropImageView_highlightColor,</span><br><span class="line">                    DEFAULT_HIGHLIGHT_COLOR);</span><br><span class="line">            handleMode = HandleMode.values()[attributes.getInt(R.styleable.CropImageView_showHandles, <span class="number">0</span>)];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            attributes.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Matrix m, Rect imageRect, RectF cropRect, <span class="keyword">boolean</span> maintainAspectRatio)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//通过传进来的Matrix生成一个新的Matrix赋值给成员变量</span></span><br><span class="line">        matrix = <span class="keyword">new</span> Matrix(m);</span><br><span class="line">		<span class="comment">//裁剪的区域</span></span><br><span class="line">        <span class="keyword">this</span>.cropRect = cropRect;</span><br><span class="line">      	<span class="comment">//整个图的区域</span></span><br><span class="line">        <span class="keyword">this</span>.imageRect = <span class="keyword">new</span> RectF(imageRect);</span><br><span class="line">      	<span class="comment">//希望保持比例</span></span><br><span class="line">        <span class="keyword">this</span>.maintainAspectRatio = maintainAspectRatio;</span><br><span class="line">		<span class="comment">//得到初始化比例</span></span><br><span class="line">        initialAspectRatio = <span class="keyword">this</span>.cropRect.width() / <span class="keyword">this</span>.cropRect.height();</span><br><span class="line">      	<span class="comment">//匹配裁剪区域对应到屏幕坐标系上</span></span><br><span class="line">        drawRect = computeLayout();</span><br><span class="line">		<span class="comment">//初始化画笔</span></span><br><span class="line">        outsidePaint.setARGB(<span class="number">125</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">        outlinePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        outlinePaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        outlineWidth = dpToPx(OUTLINE_DP);</span><br><span class="line"></span><br><span class="line">        handlePaint.setColor(highlightColor);</span><br><span class="line">        handlePaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        handlePaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        handleRadius = dpToPx(HANDLE_RADIUS_DP);</span><br><span class="line">		<span class="comment">//当前ModifyMode为None</span></span><br><span class="line">        modifyMode = ModifyMode.None;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">dpToPx</span><span class="params">(<span class="keyword">float</span> dp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dp * viewContext.getResources().getDisplayMetrics().density;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//保存</span></span><br><span class="line">        canvas.save();</span><br><span class="line">        Path path = <span class="keyword">new</span> Path();</span><br><span class="line">        outlinePaint.setStrokeWidth(outlineWidth);</span><br><span class="line">      	<span class="comment">//如果没有获得焦点，那么绘制黑色</span></span><br><span class="line">        <span class="keyword">if</span> (!hasFocus()) &#123;</span><br><span class="line">            outlinePaint.setColor(Color.BLACK);</span><br><span class="line">            canvas.drawRect(drawRect, outlinePaint);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//获得了焦点的情况下</span></span><br><span class="line">          	<span class="comment">//得到CropImageView的Rect区域</span></span><br><span class="line">            Rect viewDrawingRect = <span class="keyword">new</span> Rect();</span><br><span class="line">            viewContext.getDrawingRect(viewDrawingRect);</span><br><span class="line"></span><br><span class="line">            path.addRect(<span class="keyword">new</span> RectF(drawRect), Path.Direction.CW);</span><br><span class="line">            outlinePaint.setColor(highlightColor);</span><br><span class="line">			<span class="comment">//是否支持硬件加速</span></span><br><span class="line">            <span class="keyword">if</span> (isClipPathSupported(canvas)) &#123;</span><br><span class="line">              	<span class="comment">//clipPath取不属于RectF(drawRect)和viewDrawingRect的集合</span></span><br><span class="line">                canvas.clipPath(path, Region.Op.DIFFERENCE);</span><br><span class="line">                canvas.drawRect(viewDrawingRect, outsidePaint);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                drawOutsideFallback(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//回到保存之前的样子</span></span><br><span class="line">            canvas.restore();</span><br><span class="line">          	<span class="comment">//画path</span></span><br><span class="line">            canvas.drawPath(path, outlinePaint);</span><br><span class="line">			<span class="comment">//画中间的四条线</span></span><br><span class="line">            <span class="keyword">if</span> (showThirds) &#123;</span><br><span class="line">                drawThirds(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//画圆</span></span><br><span class="line">            <span class="keyword">if</span> (showCircle) &#123;</span><br><span class="line">                drawCircle(canvas);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (handleMode == HandleMode.Always || (handleMode == HandleMode.Changing &amp;&amp; modifyMode == ModifyMode.Grow)) &#123;</span><br><span class="line">				<span class="comment">//画handle的圆</span></span><br><span class="line">                drawHandles(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Fall back to naive method for darkening outside crop area</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawOutsideFallback</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, canvas.getWidth(), drawRect.top, outsidePaint);</span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, drawRect.bottom, canvas.getWidth(), canvas.getHeight(), outsidePaint);</span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, drawRect.top, drawRect.left, drawRect.bottom, outsidePaint);</span><br><span class="line">        canvas.drawRect(drawRect.right, drawRect.top, canvas.getWidth(), drawRect.bottom, outsidePaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Clip path is broken, unreliable or not supported on:</span><br><span class="line">     * - JellyBean MR1</span><br><span class="line">     * - ICS &amp; ICS MR1 with hardware acceleration turned on</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isClipPathSupported</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.ICE_CREAM_SANDWICH)</span><br><span class="line">                || Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> !canvas.isHardwareAccelerated();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 画handle的圆</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> canvas</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHandles</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> xMiddle = drawRect.left + ((drawRect.right - drawRect.left) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> yMiddle = drawRect.top + ((drawRect.bottom - drawRect.top) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        canvas.drawCircle(drawRect.left, yMiddle, handleRadius, handlePaint);</span><br><span class="line">        canvas.drawCircle(xMiddle, drawRect.top, handleRadius, handlePaint);</span><br><span class="line">        canvas.drawCircle(drawRect.right, yMiddle, handleRadius, handlePaint);</span><br><span class="line">        canvas.drawCircle(xMiddle, drawRect.bottom, handleRadius, handlePaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 画里面的四条线</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> canvas</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawThirds</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        outlinePaint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">float</span> xThird = (drawRect.right - drawRect.left) / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">float</span> yThird = (drawRect.bottom - drawRect.top) / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        canvas.drawLine(drawRect.left + xThird, drawRect.top,</span><br><span class="line">                drawRect.left + xThird, drawRect.bottom, outlinePaint);</span><br><span class="line">        canvas.drawLine(drawRect.left + xThird * <span class="number">2</span>, drawRect.top,</span><br><span class="line">                drawRect.left + xThird * <span class="number">2</span>, drawRect.bottom, outlinePaint);</span><br><span class="line">        canvas.drawLine(drawRect.left, drawRect.top + yThird,</span><br><span class="line">                drawRect.right, drawRect.top + yThird, outlinePaint);</span><br><span class="line">        canvas.drawLine(drawRect.left, drawRect.top + yThird * <span class="number">2</span>,</span><br><span class="line">                drawRect.right, drawRect.top + yThird * <span class="number">2</span>, outlinePaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        outlinePaint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line">        canvas.drawOval(<span class="keyword">new</span> RectF(drawRect), outlinePaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMode</span><span class="params">(ModifyMode mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mode != modifyMode) &#123;</span><br><span class="line">            modifyMode = mode;</span><br><span class="line">            viewContext.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determines which edges are hit by touching at (x, y)</span></span><br><span class="line">  	<span class="comment">//在CropImageView的OnTouchEvent中，通过x，y判断是否有碰触到HighlightView</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHit</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">        Rect r = computeLayout();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> hysteresis = <span class="number">20F</span>;<span class="comment">//误差值，误差在这个范围内就算hit到了</span></span><br><span class="line">        <span class="keyword">int</span> retval = GROW_NONE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// verticalCheck makes sure the position is between the top and</span></span><br><span class="line">        <span class="comment">// the bottom edge (with some tolerance). Similar for horizCheck.</span></span><br><span class="line">        <span class="keyword">boolean</span> verticalCheck = (y &gt;= r.top - hysteresis)</span><br><span class="line">                &amp;&amp; (y &lt; r.bottom + hysteresis);</span><br><span class="line">        <span class="keyword">boolean</span> horizCheck = (x &gt;= r.left - hysteresis)</span><br><span class="line">                &amp;&amp; (x &lt; r.right + hysteresis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check whether the position is near some edge(s)</span></span><br><span class="line">        <span class="keyword">if</span> ((Math.abs(r.left - x) &lt; hysteresis) &amp;&amp; verticalCheck) &#123;</span><br><span class="line">            retval |= GROW_LEFT_EDGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((Math.abs(r.right - x) &lt; hysteresis) &amp;&amp; verticalCheck) &#123;</span><br><span class="line">            retval |= GROW_RIGHT_EDGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((Math.abs(r.top - y) &lt; hysteresis) &amp;&amp; horizCheck) &#123;</span><br><span class="line">            retval |= GROW_TOP_EDGE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((Math.abs(r.bottom - y) &lt; hysteresis) &amp;&amp; horizCheck) &#123;</span><br><span class="line">            retval |= GROW_BOTTOM_EDGE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Not near any edge but inside the rectangle: move</span></span><br><span class="line">        <span class="keyword">if</span> (retval == GROW_NONE &amp;&amp; r.contains((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y)) &#123;</span><br><span class="line">            retval = MOVE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handles motion (dx, dy) in screen space.</span></span><br><span class="line">    <span class="comment">// The "edge" parameter specifies which edges the user is dragging.</span></span><br><span class="line">  	<span class="comment">//处理手势事件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleMotion</span><span class="params">(<span class="keyword">int</span> edge, <span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span> </span>&#123;</span><br><span class="line">        Rect r = computeLayout();</span><br><span class="line">      	<span class="comment">//如果触摸状态是MOVE的话，移动</span></span><br><span class="line">        <span class="keyword">if</span> (edge == MOVE) &#123;</span><br><span class="line">            <span class="comment">// Convert to image space before sending to moveBy()</span></span><br><span class="line">          	<span class="comment">//将坐标转换成相对于CropImageView的坐标</span></span><br><span class="line">            moveBy(dx * (cropRect.width() / r.width()),</span><br><span class="line">                    dy * (cropRect.height() / r.height()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          	<span class="comment">//不是触摸到左右边界，那么移动x方向为0</span></span><br><span class="line">            <span class="keyword">if</span> (((GROW_LEFT_EDGE | GROW_RIGHT_EDGE) &amp; edge) == <span class="number">0</span>) &#123;</span><br><span class="line">                dx = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//不是触摸到上下边界，那么移动y方向为0</span></span><br><span class="line">            <span class="keyword">if</span> (((GROW_TOP_EDGE | GROW_BOTTOM_EDGE) &amp; edge) == <span class="number">0</span>) &#123;</span><br><span class="line">                dy = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Convert to image space before sending to growBy()</span></span><br><span class="line">            <span class="keyword">float</span> xDelta = dx * (cropRect.width() / r.width());</span><br><span class="line">            <span class="keyword">float</span> yDelta = dy * (cropRect.height() / r.height());</span><br><span class="line">          	<span class="comment">//放大缩小</span></span><br><span class="line">            growBy((((edge &amp; GROW_LEFT_EDGE) != <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>) * xDelta,</span><br><span class="line">                    (((edge &amp; GROW_TOP_EDGE) != <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>) * yDelta);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Grows the cropping rectangle by (dx, dy) in image space</span></span><br><span class="line">  	<span class="comment">//cropRect移动dx，dy</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveBy</span><span class="params">(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span> </span>&#123;</span><br><span class="line">        Rect invalRect = <span class="keyword">new</span> Rect(drawRect);</span><br><span class="line"></span><br><span class="line">        cropRect.offset(dx, dy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Put the cropping rectangle inside image rectangle</span></span><br><span class="line">        cropRect.offset(</span><br><span class="line">                Math.max(<span class="number">0</span>, imageRect.left - cropRect.left),</span><br><span class="line">                Math.max(<span class="number">0</span>, imageRect.top - cropRect.top));</span><br><span class="line"></span><br><span class="line">        cropRect.offset(</span><br><span class="line">                Math.min(<span class="number">0</span>, imageRect.right - cropRect.right),</span><br><span class="line">                Math.min(<span class="number">0</span>, imageRect.bottom - cropRect.bottom));</span><br><span class="line"></span><br><span class="line">        drawRect = computeLayout();</span><br><span class="line">      	<span class="comment">//取并集</span></span><br><span class="line">        invalRect.union(drawRect);</span><br><span class="line">      	<span class="comment">//invalRect再缩小-handleRadius那么大</span></span><br><span class="line">        invalRect.inset(-(<span class="keyword">int</span>) handleRadius, -(<span class="keyword">int</span>) handleRadius);</span><br><span class="line">      	<span class="comment">//绘制</span></span><br><span class="line">        viewContext.invalidate(invalRect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Grows the cropping rectangle by (dx, dy) in image space.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">growBy</span><span class="params">(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//如果要保持比例的话，重新计算dx或dy</span></span><br><span class="line">        <span class="keyword">if</span> (maintainAspectRatio) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dx != <span class="number">0</span>) &#123;</span><br><span class="line">                dy = dx / initialAspectRatio;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dy != <span class="number">0</span>) &#123;</span><br><span class="line">                dx = dy * initialAspectRatio;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don't let the cropping rectangle grow too fast.</span></span><br><span class="line">        <span class="comment">// Grow at most half of the difference between the image rectangle and</span></span><br><span class="line">        <span class="comment">// the cropping rectangle.</span></span><br><span class="line">        RectF r = <span class="keyword">new</span> RectF(cropRect);</span><br><span class="line">        <span class="keyword">if</span> (dx &gt; <span class="number">0F</span> &amp;&amp; r.width() + <span class="number">2</span> * dx &gt; imageRect.width()) &#123;</span><br><span class="line">            dx = (imageRect.width() - r.width()) / <span class="number">2F</span>;</span><br><span class="line">            <span class="keyword">if</span> (maintainAspectRatio) &#123;</span><br><span class="line">                dy = dx / initialAspectRatio;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dy &gt; <span class="number">0F</span> &amp;&amp; r.height() + <span class="number">2</span> * dy &gt; imageRect.height()) &#123;</span><br><span class="line">            dy = (imageRect.height() - r.height()) / <span class="number">2F</span>;</span><br><span class="line">            <span class="keyword">if</span> (maintainAspectRatio) &#123;</span><br><span class="line">                dx = dy * initialAspectRatio;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//左右缩小-dx，上下缩小-dy</span></span><br><span class="line">        r.inset(-dx, -dy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don't let the cropping rectangle shrink too fast</span></span><br><span class="line">      	<span class="comment">//不要收缩的太快</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> widthCap = <span class="number">25F</span>;</span><br><span class="line">        <span class="keyword">if</span> (r.width() &lt; widthCap) &#123;</span><br><span class="line">            r.inset(-(widthCap - r.width()) / <span class="number">2F</span>, <span class="number">0F</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">float</span> heightCap = maintainAspectRatio</span><br><span class="line">                ? (widthCap / initialAspectRatio)</span><br><span class="line">                : widthCap;</span><br><span class="line">        <span class="keyword">if</span> (r.height() &lt; heightCap) &#123;</span><br><span class="line">            r.inset(<span class="number">0F</span>, -(heightCap - r.height()) / <span class="number">2F</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Put the cropping rectangle inside the image rectangle</span></span><br><span class="line">        <span class="keyword">if</span> (r.left &lt; imageRect.left) &#123;</span><br><span class="line">            r.offset(imageRect.left - r.left, <span class="number">0F</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.right &gt; imageRect.right) &#123;</span><br><span class="line">            r.offset(-(r.right - imageRect.right), <span class="number">0F</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r.top &lt; imageRect.top) &#123;</span><br><span class="line">            r.offset(<span class="number">0F</span>, imageRect.top - r.top);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.bottom &gt; imageRect.bottom) &#123;</span><br><span class="line">            r.offset(<span class="number">0F</span>, -(r.bottom - imageRect.bottom));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cropRect.set(r);</span><br><span class="line">        drawRect = computeLayout();</span><br><span class="line">        viewContext.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the cropping rectangle in image space with specified scale</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Rect <span class="title">getScaledCropRect</span><span class="params">(<span class="keyword">float</span> scale)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//得到传入参数放大后的的裁剪区域，scale一般传入的就是simpleSize</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rect((<span class="keyword">int</span>) (cropRect.left * scale), (<span class="keyword">int</span>) (cropRect.top * scale),</span><br><span class="line">                (<span class="keyword">int</span>) (cropRect.right * scale), (<span class="keyword">int</span>) (cropRect.bottom * scale));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Maps the cropping rectangle from image space to screen space</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Rect <span class="title">computeLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RectF r = <span class="keyword">new</span> RectF(cropRect.left, cropRect.top,</span><br><span class="line">                cropRect.right, cropRect.bottom);</span><br><span class="line">        matrix.mapRect(r);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rect(Math.round(r.left), Math.round(r.top),</span><br><span class="line">                Math.round(r.right), Math.round(r.bottom));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        drawRect = computeLayout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasFocus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isFocused;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFocus</span><span class="params">(<span class="keyword">boolean</span> isFocused)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isFocused = isFocused;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CropImageView"><a href="#CropImageView" class="headerlink" title="CropImageView"></a>CropImageView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CropImageView</span> <span class="keyword">extends</span> <span class="title">ImageViewTouchBase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;HighlightView&gt; highlightViews = <span class="keyword">new</span> ArrayList&lt;HighlightView&gt;();</span><br><span class="line">    HighlightView motionHighlightView;</span><br><span class="line">    Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lastX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lastY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> motionEdge;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> validPointerId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CropImageView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CropImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CropImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        <span class="keyword">if</span> (bitmapDisplayed.getBitmap() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (HighlightView hv : highlightViews) &#123;</span><br><span class="line">              	<span class="comment">//设置矩阵</span></span><br><span class="line">                hv.matrix.set(getUnrotatedMatrix());</span><br><span class="line">                hv.invalidate();</span><br><span class="line">                <span class="keyword">if</span> (hv.hasFocus()) &#123;</span><br><span class="line">                  	<span class="comment">//让HighlightView全部显示在屏幕上</span></span><br><span class="line">                    centerBasedOnHighlightView(hv);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomTo</span><span class="params">(<span class="keyword">float</span> scale, <span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//固定位置zoom</span></span><br><span class="line">        <span class="keyword">super</span>.zoomTo(scale, centerX, centerY);</span><br><span class="line">        <span class="keyword">for</span> (HighlightView hv : highlightViews) &#123;</span><br><span class="line">            hv.matrix.set(getUnrotatedMatrix());</span><br><span class="line">            hv.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//放大</span></span><br><span class="line">        <span class="keyword">super</span>.zoomIn();</span><br><span class="line">        <span class="keyword">for</span> (HighlightView hv : highlightViews) &#123;</span><br><span class="line">            hv.matrix.set(getUnrotatedMatrix());</span><br><span class="line">            hv.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//缩小</span></span><br><span class="line">        <span class="keyword">super</span>.zoomOut();</span><br><span class="line">        <span class="keyword">for</span> (HighlightView hv : highlightViews) &#123;</span><br><span class="line">            hv.matrix.set(getUnrotatedMatrix());</span><br><span class="line">            hv.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postTranslate</span><span class="params">(<span class="keyword">float</span> deltaX, <span class="keyword">float</span> deltaY)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//平移</span></span><br><span class="line">        <span class="keyword">super</span>.postTranslate(deltaX, deltaY);</span><br><span class="line">        <span class="keyword">for</span> (HighlightView hv : highlightViews) &#123;</span><br><span class="line">            hv.matrix.postTranslate(deltaX, deltaY);</span><br><span class="line">            hv.invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(@NonNull MotionEvent event)</span> </span>&#123;</span><br><span class="line">        CropImageActivity cropImageActivity = (CropImageActivity) context;</span><br><span class="line">      	<span class="comment">//如果正在保存，则跳过</span></span><br><span class="line">        <span class="keyword">if</span> (cropImageActivity.isSaving()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="keyword">for</span> (HighlightView hv : highlightViews) &#123;</span><br><span class="line">              	<span class="comment">//判断触摸到了什么</span></span><br><span class="line">                <span class="keyword">int</span> edge = hv.getHit(event.getX(), event.getY());</span><br><span class="line">                <span class="keyword">if</span> (edge != HighlightView.GROW_NONE) &#123;</span><br><span class="line">                    motionEdge = edge;</span><br><span class="line">                    motionHighlightView = hv;</span><br><span class="line">                    lastX = event.getX();</span><br><span class="line">                    lastY = event.getY();</span><br><span class="line">                    <span class="comment">// Prevent multiple touches from interfering with crop area re-sizing</span></span><br><span class="line">                  	<span class="comment">//设置PointerId防止多指操作</span></span><br><span class="line">                    validPointerId = event.getPointerId(event.getActionIndex());</span><br><span class="line">                  	<span class="comment">//设置触摸状态</span></span><br><span class="line">                    motionHighlightView.setMode((edge == HighlightView.MOVE)</span><br><span class="line">                            ? HighlightView.ModifyMode.Move</span><br><span class="line">                            : HighlightView.ModifyMode.Grow);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">if</span> (motionHighlightView != <span class="keyword">null</span>) &#123;</span><br><span class="line">              	<span class="comment">//让HighlightView全部显示在屏幕上</span></span><br><span class="line">                centerBasedOnHighlightView(motionHighlightView);</span><br><span class="line">                motionHighlightView.setMode(HighlightView.ModifyMode.None);</span><br><span class="line">            &#125;</span><br><span class="line">            motionHighlightView = <span class="keyword">null</span>;</span><br><span class="line">            center();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="comment">//让HiglightView去处理手势</span></span><br><span class="line">            <span class="keyword">if</span> (motionHighlightView != <span class="keyword">null</span> &amp;&amp; event.getPointerId(event.getActionIndex()) == validPointerId) &#123;</span><br><span class="line">                motionHighlightView.handleMotion(motionEdge, event.getX()</span><br><span class="line">                        - lastX, event.getY() - lastY);</span><br><span class="line">                lastX = event.getX();</span><br><span class="line">                lastY = event.getY();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If we're not zoomed then there's no point in even allowing the user to move the image around.</span></span><br><span class="line">            <span class="comment">// This call to center puts it back to the normalized location.</span></span><br><span class="line">            <span class="keyword">if</span> (getScale() == <span class="number">1F</span>) &#123;</span><br><span class="line">                center();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pan the displayed image to make sure the cropping rectangle is visible.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureVisible</span><span class="params">(HighlightView hv)</span> </span>&#123;</span><br><span class="line">        Rect r = hv.drawRect;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> panDeltaX1 = Math.max(<span class="number">0</span>, getLeft() - r.left);</span><br><span class="line">        <span class="keyword">int</span> panDeltaX2 = Math.min(<span class="number">0</span>, getRight() - r.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> panDeltaY1 = Math.max(<span class="number">0</span>, getTop() - r.top);</span><br><span class="line">        <span class="keyword">int</span> panDeltaY2 = Math.min(<span class="number">0</span>, getBottom() - r.bottom);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> panDeltaX = panDeltaX1 != <span class="number">0</span> ? panDeltaX1 : panDeltaX2;</span><br><span class="line">        <span class="keyword">int</span> panDeltaY = panDeltaY1 != <span class="number">0</span> ? panDeltaY1 : panDeltaY2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (panDeltaX != <span class="number">0</span> || panDeltaY != <span class="number">0</span>) &#123;</span><br><span class="line">            panBy(panDeltaX, panDeltaY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the cropping rectangle's size changed significantly, change the</span></span><br><span class="line">    <span class="comment">// view's center and scale according to the cropping rectangle.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">centerBasedOnHighlightView</span><span class="params">(HighlightView hv)</span> </span>&#123;</span><br><span class="line">        Rect drawRect = hv.drawRect;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> width = drawRect.width();</span><br><span class="line">        <span class="keyword">float</span> height = drawRect.height();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> thisWidth = getWidth();</span><br><span class="line">        <span class="keyword">float</span> thisHeight = getHeight();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> z1 = thisWidth / width * .<span class="number">6F</span>;</span><br><span class="line">        <span class="keyword">float</span> z2 = thisHeight / height * .<span class="number">6F</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> zoom = Math.min(z1, z2);</span><br><span class="line">        zoom = zoom * <span class="keyword">this</span>.getScale();</span><br><span class="line">        zoom = Math.max(<span class="number">1F</span>, zoom);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((Math.abs(zoom - getScale()) / zoom) &gt; .<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span>[] coordinates = <span class="keyword">new</span> <span class="keyword">float</span>[] &#123; hv.cropRect.centerX(), hv.cropRect.centerY() &#125;;</span><br><span class="line">            getUnrotatedMatrix().mapPoints(coordinates);</span><br><span class="line">            zoomTo(zoom, coordinates[<span class="number">0</span>], coordinates[<span class="number">1</span>], <span class="number">300F</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureVisible(hv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(@NonNull Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">for</span> (HighlightView highlightView : highlightViews) &#123;</span><br><span class="line">            highlightView.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HighlightView hv)</span> </span>&#123;</span><br><span class="line">        highlightViews.add(hv);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ImageViewTouchBase"><a href="#ImageViewTouchBase" class="headerlink" title="ImageViewTouchBase"></a>ImageViewTouchBase</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageViewTouchBase</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SCALE_RATE = <span class="number">1.25F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the base transformation which is used to show the image</span></span><br><span class="line">    <span class="comment">// initially.  The current computation for this shows the image in</span></span><br><span class="line">    <span class="comment">// it's entirety, letterboxing as needed.  One could choose to</span></span><br><span class="line">    <span class="comment">// show the image as cropped instead.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This matrix is recomputed when we go from the thumbnail image to</span></span><br><span class="line">    <span class="comment">// the full size image.</span></span><br><span class="line">    <span class="keyword">protected</span> Matrix baseMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the supplementary transformation which reflects what</span></span><br><span class="line">    <span class="comment">// the user has done in terms of zooming and panning.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This matrix remains the same when we go from the thumbnail image</span></span><br><span class="line">    <span class="comment">// to the full size image.</span></span><br><span class="line">    <span class="keyword">protected</span> Matrix suppMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the final matrix which is computed as the concatentation</span></span><br><span class="line">    <span class="comment">// of the base matrix and the supplementary matrix.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Matrix displayMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Temporary buffer used for getting the values out of a matrix.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] matrixValues = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The current bitmap being displayed.</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> RotateBitmap bitmapDisplayed = <span class="keyword">new</span> RotateBitmap(<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> thisWidth = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> thisHeight = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> maxZoom;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Runnable onLayoutRunnable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ImageViewTouchBase will pass a Bitmap to the Recycler if it has finished</span></span><br><span class="line">    <span class="comment">// its use of that Bitmap</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Recycler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">(Bitmap b)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Recycler recycler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageViewTouchBase</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageViewTouchBase</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageViewTouchBase</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecycler</span><span class="params">(Recycler recycler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.recycler = recycler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">        thisWidth = right - left;</span><br><span class="line">        thisHeight = bottom - top;</span><br><span class="line">        Runnable r = onLayoutRunnable;</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">            onLayoutRunnable = <span class="keyword">null</span>;</span><br><span class="line">            r.run();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bitmapDisplayed.getBitmap() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getProperBaseMatrix(bitmapDisplayed, baseMatrix, <span class="keyword">true</span>);</span><br><span class="line">            setImageMatrix(getImageViewMatrix());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            event.startTracking();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.isTracking() &amp;&amp; !event.isCanceled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getScale() &gt; <span class="number">1.0f</span>) &#123;</span><br><span class="line">                <span class="comment">// If we're zoomed in, pressing Back jumps out to show the</span></span><br><span class="line">                <span class="comment">// entire image, otherwise Back returns the user to the gallery</span></span><br><span class="line">                zoomTo(<span class="number">1.0f</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyUp(keyCode, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageBitmap</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        setImageBitmap(bitmap, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//设置旋转的Bitmap</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setImageBitmap</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> rotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setImageBitmap(bitmap);</span><br><span class="line">        Drawable d = getDrawable();</span><br><span class="line">        <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</span><br><span class="line">            d.setDither(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bitmap old = bitmapDisplayed.getBitmap();</span><br><span class="line">        bitmapDisplayed.setBitmap(bitmap);</span><br><span class="line">        bitmapDisplayed.setRotation(rotation);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (old != <span class="keyword">null</span> &amp;&amp; old != bitmap &amp;&amp; recycler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            recycler.recycle(old);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//释放</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setImageBitmapResetBase(<span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function changes bitmap, reset base matrix according to the size</span></span><br><span class="line">    <span class="comment">// of the bitmap, and optionally reset the supplementary matrix</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageBitmapResetBase</span><span class="params">(<span class="keyword">final</span> Bitmap bitmap, <span class="keyword">final</span> <span class="keyword">boolean</span> resetSupp)</span> </span>&#123;</span><br><span class="line">        setImageRotateBitmapResetBase(<span class="keyword">new</span> RotateBitmap(bitmap, <span class="number">0</span>), resetSupp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageRotateBitmapResetBase</span><span class="params">(<span class="keyword">final</span> RotateBitmap bitmap, <span class="keyword">final</span> <span class="keyword">boolean</span> resetSupp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewWidth = getWidth();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (viewWidth &lt;= <span class="number">0</span>)  &#123;</span><br><span class="line">            onLayoutRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  	<span class="comment">//反复调用自己，知道得到view的宽度为止</span></span><br><span class="line">                    setImageRotateBitmapResetBase(bitmap, resetSupp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bitmap.getBitmap() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getProperBaseMatrix(bitmap, baseMatrix, <span class="keyword">true</span>);</span><br><span class="line">            setImageBitmap(bitmap.getBitmap(), bitmap.getRotation());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            baseMatrix.reset();</span><br><span class="line">            setImageBitmap(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resetSupp) &#123;</span><br><span class="line">            suppMatrix.reset();</span><br><span class="line">        &#125;</span><br><span class="line">        setImageMatrix(getImageViewMatrix());</span><br><span class="line">        maxZoom = calculateMaxZoom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Center as much as possible in one or both axis.  Centering is defined as follows:</span></span><br><span class="line">    <span class="comment">// * If the image is scaled down below the view's dimensions then center it.</span></span><br><span class="line">    <span class="comment">// * If the image is scaled larger than the view and is translated out of view then translate it back into view.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">center</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap = bitmapDisplayed.getBitmap();</span><br><span class="line">        <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Matrix m = getImageViewMatrix();</span><br><span class="line"></span><br><span class="line">        RectF rect = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight());</span><br><span class="line">        m.mapRect(rect);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> height = rect.height();</span><br><span class="line">        <span class="keyword">float</span> width  = rect.width();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> deltaX = <span class="number">0</span>, deltaY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        deltaY = centerVertical(rect, height, deltaY);</span><br><span class="line">        deltaX = centerHorizontal(rect, width, deltaX);</span><br><span class="line"></span><br><span class="line">        postTranslate(deltaX, deltaY);</span><br><span class="line">        setImageMatrix(getImageViewMatrix());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">centerVertical</span><span class="params">(RectF rect, <span class="keyword">float</span> height, <span class="keyword">float</span> deltaY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> viewHeight = getHeight();</span><br><span class="line">        <span class="keyword">if</span> (height &lt; viewHeight) &#123;</span><br><span class="line">            deltaY = (viewHeight - height) / <span class="number">2</span> - rect.top;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rect.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            deltaY = -rect.top;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rect.bottom &lt; viewHeight) &#123;</span><br><span class="line">            deltaY = getHeight() - rect.bottom;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deltaY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">centerHorizontal</span><span class="params">(RectF rect, <span class="keyword">float</span> width, <span class="keyword">float</span> deltaX)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> viewWidth = getWidth();</span><br><span class="line">        <span class="keyword">if</span> (width &lt; viewWidth) &#123;</span><br><span class="line">            deltaX = (viewWidth - width) / <span class="number">2</span> - rect.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rect.left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            deltaX = -rect.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rect.right &lt; viewWidth) &#123;</span><br><span class="line">            deltaX = viewWidth - rect.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deltaX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//初始化，设置ImageView的ScaleType</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setScaleType(ImageView.ScaleType.MATRIX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">(Matrix matrix, <span class="keyword">int</span> whichValue)</span> </span>&#123;</span><br><span class="line">        matrix.getValues(matrixValues);</span><br><span class="line">        <span class="keyword">return</span> matrixValues[whichValue];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the scale factor out of the matrix.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">float</span> <span class="title">getScale</span><span class="params">(Matrix matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getValue(matrix, Matrix.MSCALE_X);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">float</span> <span class="title">getScale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getScale(suppMatrix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setup the base matrix so that the image is centered and scaled properly.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getProperBaseMatrix</span><span class="params">(RotateBitmap bitmap, Matrix matrix, <span class="keyword">boolean</span> includeRotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> viewWidth = getWidth();</span><br><span class="line">        <span class="keyword">float</span> viewHeight = getHeight();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> w = bitmap.getWidth();</span><br><span class="line">        <span class="keyword">float</span> h = bitmap.getHeight();</span><br><span class="line">        matrix.reset();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We limit up-scaling to 3x otherwise the result may look bad if it's a small icon</span></span><br><span class="line">        <span class="keyword">float</span> widthScale = Math.min(viewWidth / w, <span class="number">3.0f</span>);</span><br><span class="line">        <span class="keyword">float</span> heightScale = Math.min(viewHeight / h, <span class="number">3.0f</span>);</span><br><span class="line">        <span class="keyword">float</span> scale = Math.min(widthScale, heightScale);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (includeRotation) &#123;</span><br><span class="line">            matrix.postConcat(bitmap.getRotateMatrix());</span><br><span class="line">        &#125;</span><br><span class="line">        matrix.postScale(scale, scale);</span><br><span class="line">        matrix.postTranslate((viewWidth  - w * scale) / <span class="number">2F</span>, (viewHeight - h * scale) / <span class="number">2F</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Combine the base matrix and the supp matrix to make the final matrix</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Matrix <span class="title">getImageViewMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The final matrix is computed as the concatentation of the base matrix</span></span><br><span class="line">        <span class="comment">// and the supplementary matrix</span></span><br><span class="line">        displayMatrix.set(baseMatrix);</span><br><span class="line">        displayMatrix.postConcat(suppMatrix);</span><br><span class="line">        <span class="keyword">return</span> displayMatrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Matrix <span class="title">getUnrotatedMatrix</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Matrix unrotated = <span class="keyword">new</span> Matrix();</span><br><span class="line">        getProperBaseMatrix(bitmapDisplayed, unrotated, <span class="keyword">false</span>);</span><br><span class="line">        unrotated.postConcat(suppMatrix);</span><br><span class="line">        <span class="keyword">return</span> unrotated;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">float</span> <span class="title">calculateMaxZoom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bitmapDisplayed.getBitmap() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1F</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> fw = (<span class="keyword">float</span>) bitmapDisplayed.getWidth()  / (<span class="keyword">float</span>) thisWidth;</span><br><span class="line">        <span class="keyword">float</span> fh = (<span class="keyword">float</span>) bitmapDisplayed.getHeight() / (<span class="keyword">float</span>) thisHeight;</span><br><span class="line">        <span class="keyword">return</span> Math.max(fw, fh) * <span class="number">4</span>; <span class="comment">// 400%</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomTo</span><span class="params">(<span class="keyword">float</span> scale, <span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &gt; maxZoom) &#123;</span><br><span class="line">            scale = maxZoom;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> oldScale = getScale();</span><br><span class="line">        <span class="keyword">float</span> deltaScale = scale / oldScale;</span><br><span class="line"></span><br><span class="line">        suppMatrix.postScale(deltaScale, deltaScale, centerX, centerY);</span><br><span class="line">        setImageMatrix(getImageViewMatrix());</span><br><span class="line">        center();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomTo</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> scale, <span class="keyword">final</span> <span class="keyword">float</span> centerX,</span><br><span class="line">                          <span class="keyword">final</span> <span class="keyword">float</span> centerY, <span class="keyword">final</span> <span class="keyword">float</span> durationMs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> incrementPerMs = (scale - getScale()) / durationMs;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> oldScale = getScale();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">float</span> currentMs = Math.min(durationMs, now - startTime);</span><br><span class="line">                <span class="keyword">float</span> target = oldScale + (incrementPerMs * currentMs);</span><br><span class="line">                zoomTo(target, centerX, centerY);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (currentMs &lt; durationMs) &#123;</span><br><span class="line">                    handler.post(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomTo</span><span class="params">(<span class="keyword">float</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> cx = getWidth() / <span class="number">2F</span>;</span><br><span class="line">        <span class="keyword">float</span> cy = getHeight() / <span class="number">2F</span>;</span><br><span class="line">        zoomTo(scale, cx, cy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        zoomIn(SCALE_RATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        zoomOut(SCALE_RATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomIn</span><span class="params">(<span class="keyword">float</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getScale() &gt;= maxZoom) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// Don't let the user zoom into the molecular level</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bitmapDisplayed.getBitmap() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> cx = getWidth() / <span class="number">2F</span>;</span><br><span class="line">        <span class="keyword">float</span> cy = getHeight() / <span class="number">2F</span>;</span><br><span class="line"></span><br><span class="line">        suppMatrix.postScale(rate, rate, cx, cy);</span><br><span class="line">        setImageMatrix(getImageViewMatrix());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">zoomOut</span><span class="params">(<span class="keyword">float</span> rate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bitmapDisplayed.getBitmap() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> cx = getWidth() / <span class="number">2F</span>;</span><br><span class="line">        <span class="keyword">float</span> cy = getHeight() / <span class="number">2F</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Zoom out to at most 1x</span></span><br><span class="line">        Matrix tmp = <span class="keyword">new</span> Matrix(suppMatrix);</span><br><span class="line">        tmp.postScale(<span class="number">1F</span> / rate, <span class="number">1F</span> / rate, cx, cy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getScale(tmp) &lt; <span class="number">1F</span>) &#123;</span><br><span class="line">            suppMatrix.setScale(<span class="number">1F</span>, <span class="number">1F</span>, cx, cy);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            suppMatrix.postScale(<span class="number">1F</span> / rate, <span class="number">1F</span> / rate, cx, cy);</span><br><span class="line">        &#125;</span><br><span class="line">        setImageMatrix(getImageViewMatrix());</span><br><span class="line">        center();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postTranslate</span><span class="params">(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span> </span>&#123;</span><br><span class="line">        suppMatrix.postTranslate(dx, dy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">panBy</span><span class="params">(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span> </span>&#123;</span><br><span class="line">        postTranslate(dx, dy);</span><br><span class="line">        setImageMatrix(getImageViewMatrix());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>项目中裁剪的核心是 <code>BitmapRegionDecoder</code> ，还要许多可取之处，比如计算 <code>simpleSize</code> 的方法、得到 View 的宽度的方法等。</p>
<p>BitmapRegionDecoder 类用来编译(解码)在图片内不同的方形区域，BitmapRegionDecoder 类在使用较大图片只需要取得图片中的一小部分的内容是特别有效益的。我们创建一个 BitmapRegionDecoder 类，并调用 newInstance() 方法，就可以得到 BitmapRegionDecoder 的对象之后，我们就能调用 decodeRegion() 方法去多次获得位图的特定地区的小图片。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android图像处理 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ExplosionField源码解析]]></title>
      <url>/2016/04/10/explosionfield-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/tyrantgit/ExplosionField" target="_blank" rel="external">ExplosionField</a>      分析版本：<a href="https://github.com/tyrantgit/ExplosionField/tree/3122cb6c5783218f1a08787e6a6241e6e745695f" target="_blank" rel="external">3122cb6</a></p>
</blockquote>
<p>一个粒子爆炸效果的 UI 开源控件。</p>
<a id="more"></a>
<h2 id="ExplosionField"><a href="#ExplosionField" class="headerlink" title="ExplosionField"></a>ExplosionField</h2><p><code>ExplosionField</code> 是一个开源的 Android UI 控件，其 UI 效果是粒子爆炸效果。</p>
<p><img src="http://yydcdut.github.io/img/explosionfield.gif" alt="ExplosionField"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>得到想要爆炸的 <code>View</code> ，然后将 <code>View</code> 设置到 <code>ExplosionField</code> 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExplosionField explosionField = ExplosionField.attach2Window(<span class="keyword">this</span>);</span><br><span class="line">explosionField.explode(view);</span><br></pre></td></tr></table></figure>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>从 <code>MainActivity</code> 开始分析走吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">      	<span class="comment">//ExplosionField是个View，附着在Activity上</span></span><br><span class="line">        mExplosionField = ExplosionField.attach2Window(<span class="keyword">this</span>);</span><br><span class="line">        addListener(findViewById(R.id.root));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(View root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">          	<span class="comment">//如果是ViewGroup或者其子类，进行递归</span></span><br><span class="line">            ViewGroup parent = (ViewGroup) root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.getChildCount(); i++) &#123;</span><br><span class="line">                addListener(parent.getChildAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          	<span class="comment">//不然的话设置监听器</span></span><br><span class="line">            root.setClickable(<span class="keyword">true</span>);</span><br><span class="line">            root.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    mExplosionField.explode(v);<span class="comment">//进行爆照动画</span></span><br><span class="line">                    v.setOnClickListener(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从 <code>MainActivity</code> 中可以看出爆炸这个过程是调用 <code>explode(View)</code> 方法进行的，同时得到 <code>ExplosionField</code> 对象是通过其静态方法 <code>ExplosionField.attach2Window(Activity)</code> 得到的。</p>
<p>那么 <code>attach2Window(Activity)</code> 做了什么呢：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplosionField</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExplosionField <span class="title">attach2Window</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//DecorView中Content的那个FrameLayout</span></span><br><span class="line">        ViewGroup rootView = (ViewGroup) activity.findViewById(Window.ID_ANDROID_CONTENT);</span><br><span class="line">      	<span class="comment">//把自己new出来</span></span><br><span class="line">        ExplosionField explosionField = <span class="keyword">new</span> ExplosionField(activity);</span><br><span class="line">      	<span class="comment">//把自己添加DecorView的ContentView中，宽高都是match_parent</span></span><br><span class="line">        rootView.addView(explosionField, <span class="keyword">new</span> ViewGroup.LayoutParams(</span><br><span class="line">                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</span><br><span class="line">        <span class="keyword">return</span> explosionField;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>attach2Window(Activity)</code>  方法就是将 <code>ExplosionField</code> 添加到最上层。那么来看看这个 View :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplosionField</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">int</span>[] mExpandInset = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">  	<span class="comment">//保存每个颗粒的动画</span></span><br><span class="line">  	<span class="keyword">private</span> List&lt;ExplosionAnimator&gt; mExplosions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">ExplosionField</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExplosionField</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExplosionField</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(mExpandInset, Utils.dp2Px(<span class="number">32</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">for</span> (ExplosionAnimator explosion : mExplosions) &#123;</span><br><span class="line">            explosion.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">explode</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//得到View相对整个屏幕的坐标</span></span><br><span class="line">        Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line">        view.getGlobalVisibleRect(r);</span><br><span class="line">      	<span class="comment">//得到ExplosionField的location</span></span><br><span class="line">        <span class="keyword">int</span>[] location = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        getLocationOnScreen(location);</span><br><span class="line">      	<span class="comment">//进行偏移</span></span><br><span class="line">        r.offset(-location[<span class="number">0</span>], -location[<span class="number">1</span>]);</span><br><span class="line">      	<span class="comment">//Rect.inset方法是将rect变狭窄，但这里传入的是负值，那么就是变大</span></span><br><span class="line">        r.inset(-mExpandInset[<span class="number">0</span>], -mExpandInset[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> startDelay = <span class="number">100</span>;</span><br><span class="line">      	<span class="comment">//振动的动画</span></span><br><span class="line">        ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>).setDuration(<span class="number">150</span>);</span><br><span class="line">        animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line"></span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                view.setTranslationX((random.nextFloat() - <span class="number">0.5f</span>) * view.getWidth() * <span class="number">0.05f</span>);</span><br><span class="line">                view.setTranslationY((random.nextFloat() - <span class="number">0.5f</span>) * view.getHeight() * <span class="number">0.05f</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line">		<span class="comment">//将这个View消失的动画</span></span><br><span class="line">      		view.animate().setDuration(<span class="number">150</span>).setStartDelay(startDelay).scaleX(<span class="number">0f</span>).scaleY(<span class="number">0f</span>).alpha(<span class="number">0f</span>).start();</span><br><span class="line">      	<span class="comment">//进行爆炸</span></span><br><span class="line">        explode(Utils.createBitmapFromView(view), r, startDelay, ExplosionAnimator.DEFAULT_DURATION);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">explode</span><span class="params">(Bitmap bitmap, Rect bound, <span class="keyword">long</span> startDelay, <span class="keyword">long</span> duration)</span> </span>&#123;</span><br><span class="line">       	<span class="comment">//new出爆炸动画</span></span><br><span class="line">        <span class="keyword">final</span> ExplosionAnimator explosion = <span class="keyword">new</span> ExplosionAnimator(<span class="keyword">this</span>, bitmap, bound);</span><br><span class="line">        explosion.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">              	<span class="comment">//当结束的时候从mExplosions中将动画去除掉</span></span><br><span class="line">                mExplosions.remove(animation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">       	<span class="comment">//延时</span></span><br><span class="line">        explosion.setStartDelay(startDelay);</span><br><span class="line">       	<span class="comment">//动画进行事件</span></span><br><span class="line">        explosion.setDuration(duration);</span><br><span class="line">       	<span class="comment">//将动画添加到mExplosions中</span></span><br><span class="line">        mExplosions.add(explosion);</span><br><span class="line">       	<span class="comment">//动画开始</span></span><br><span class="line">        explosion.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当开始进行爆照时，先进行 150ms 的振动动画，之后将此 View 隐藏掉，在 <code>ExplosionField</code> 中的相同位置绘制出这个 View ，进行爆炸。</p>
<p>先简单的过一遍 <code>Utils</code> 这个类吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DENSITY = Resources.getSystem().getDisplayMetrics().density;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Canvas sCanvas = <span class="keyword">new</span> Canvas();</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//dp转像素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2Px</span><span class="params">(<span class="keyword">int</span> dp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.round(dp * DENSITY);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 将一个View绘制成Bitmap</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> view</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapFromView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ImageView) &#123;</span><br><span class="line">            Drawable drawable = ((ImageView) view).getDrawable();</span><br><span class="line">            <span class="keyword">if</span> (drawable != <span class="keyword">null</span> &amp;&amp; drawable <span class="keyword">instanceof</span> BitmapDrawable) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((BitmapDrawable) drawable).getBitmap();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        view.clearFocus();</span><br><span class="line">        Bitmap bitmap = createBitmapSafely(view.getWidth(),</span><br><span class="line">                view.getHeight(), Bitmap.Config.ARGB_8888, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (sCanvas) &#123;</span><br><span class="line">                Canvas canvas = sCanvas;</span><br><span class="line">                canvas.setBitmap(bitmap);</span><br><span class="line">                view.draw(canvas);</span><br><span class="line">                canvas.setBitmap(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 创建bitmap，防OOM</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> width</span><br><span class="line">     * <span class="doctag">@param</span> height</span><br><span class="line">     * <span class="doctag">@param</span> config</span><br><span class="line">     * <span class="doctag">@param</span> retryCount</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapSafely</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, Bitmap.Config config, <span class="keyword">int</span> retryCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Bitmap.createBitmap(width, height, config);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">if</span> (retryCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.gc();</span><br><span class="line">                <span class="keyword">return</span> createBitmapSafely(width, height, config, retryCount - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看完工具类，回过头来看爆照动画类 <code>ExplosionAnimator</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplosionAnimator</span> <span class="keyword">extends</span> <span class="title">ValueAnimator</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">long</span> DEFAULT_DURATION = <span class="number">0x400</span>;<span class="comment">//1024...</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Interpolator DEFAULT_INTERPOLATOR = <span class="keyword">new</span> AccelerateInterpolator(<span class="number">0.6f</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> END_VALUE = <span class="number">1.4f</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> X = Utils.dp2Px(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> Y = Utils.dp2Px(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> V = Utils.dp2Px(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> W = Utils.dp2Px(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Particle[] mParticles;</span><br><span class="line">    <span class="keyword">private</span> Rect mBound;</span><br><span class="line">    <span class="keyword">private</span> View mContainer;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">ExplosionAnimator</span><span class="params">(View container, Bitmap bitmap, Rect bound)</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mBound = <span class="keyword">new</span> Rect(bound);</span><br><span class="line">      	<span class="comment">//X,Y要分成多少个颗粒</span></span><br><span class="line">        <span class="keyword">int</span> partLen = <span class="number">15</span>;</span><br><span class="line">      	<span class="comment">//颗粒数组，15*15</span></span><br><span class="line">        mParticles = <span class="keyword">new</span> Particle[partLen * partLen];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">      	<span class="comment">//按17*17来算颗粒的宽度和高度</span></span><br><span class="line">        <span class="keyword">int</span> w = bitmap.getWidth() / (partLen + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> h = bitmap.getHeight() / (partLen + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partLen; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; partLen; j++) &#123;</span><br><span class="line">              	<span class="comment">//边上的颗粒不添加进来，只取从1~16的颗粒</span></span><br><span class="line">                mParticles[(i * partLen) + j] = generateParticle(bitmap.getPixel((j + <span class="number">1</span>) * w, (i + <span class="number">1</span>) * h), random);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//container是ExplosionField</span></span><br><span class="line">        mContainer = container;</span><br><span class="line">      	<span class="comment">//设置变化值</span></span><br><span class="line">        setFloatValues(<span class="number">0f</span>, END_VALUE);</span><br><span class="line">      	<span class="comment">//插值器</span></span><br><span class="line">        setInterpolator(DEFAULT_INTERPOLATOR);</span><br><span class="line">      	<span class="comment">//时间</span></span><br><span class="line">        setDuration(DEFAULT_DURATION);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">private</span> Particle <span class="title">generateParticle</span><span class="params">(<span class="keyword">int</span> color, Random random)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//new出颗粒</span></span><br><span class="line">        Particle particle = <span class="keyword">new</span> Particle();</span><br><span class="line">      	<span class="comment">//设置颗粒颜色</span></span><br><span class="line">        particle.color = color;</span><br><span class="line">      	<span class="comment">//设置颗粒半径,2dp</span></span><br><span class="line">        particle.radius = V;</span><br><span class="line">      	<span class="comment">//获取随机数，如果小于0.2，particle.baseRadius值在2dp~5dp之间，也就是开始爆炸的时候半径在2dp~5dp之间</span></span><br><span class="line">        <span class="keyword">if</span> (random.nextFloat() &lt; <span class="number">0.2f</span>) &#123;</span><br><span class="line">            particle.baseRadius = V + ((X - V) * random.nextFloat());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果大于等于0.2，particle.baseRadius值在1dp~2dp之间，也就是开始爆炸的时候半径在1dp~2dp之间</span></span><br><span class="line">            particle.baseRadius = W + ((V - W) * random.nextFloat());</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//0~1的随机数</span></span><br><span class="line">        <span class="keyword">float</span> nextFloat = random.nextFloat();</span><br><span class="line">      	<span class="comment">//(Temp值)值范围在mBound.height()*(0~0.38)</span></span><br><span class="line">        particle.top = mBound.height() * ((<span class="number">0.18f</span> * random.nextFloat()) + <span class="number">0.2f</span>);</span><br><span class="line">        <span class="comment">//如果小于0.2，那么颗粒的top的值在mBound.height()*(0~0.38)，如果大于等于0.2，那么颗粒的top的值在mBound.height()*(0~0.456)</span></span><br><span class="line">      	particle.top = nextFloat &lt; <span class="number">0.2f</span> ? particle.top : particle.top + ((particle.top * <span class="number">0.2f</span>) * random.nextFloat());</span><br><span class="line">      	<span class="comment">//(Temp值)值范围在mBound.height()*(-0.9~0.9)</span></span><br><span class="line">        particle.bottom = (mBound.height() * (random.nextFloat() - <span class="number">0.5f</span>)) * <span class="number">1.8f</span>;</span><br><span class="line">        <span class="comment">//如果小于0.2，那么颗粒的bottom的值在mBound.height()*(-0.9~0.9)，如果大于等于0.2但小于0.8，那么颗粒的bottom的值在mBound.height()*(-0.54~0.54)，如果大于等于0.8，那么颗粒的bottom的值在mBound.height()*(-0.27~0.27)</span></span><br><span class="line">      	<span class="keyword">float</span> f = nextFloat &lt; <span class="number">0.2f</span> ? particle.bottom : nextFloat &lt; <span class="number">0.8f</span> ? particle.bottom * <span class="number">0.6f</span> : particle.bottom * <span class="number">0.3f</span>;</span><br><span class="line">      	<span class="comment">//赋值给bottom</span></span><br><span class="line">        particle.bottom = f;</span><br><span class="line">		<span class="comment">//???这是啥???</span></span><br><span class="line">        particle.mag = <span class="number">4.0f</span> * particle.top / particle.bottom;</span><br><span class="line">        particle.neg = (-particle.mag) / particle.bottom;</span><br><span class="line">      	<span class="comment">//f值在mBound.centerX()+(-10dp~10dp)</span></span><br><span class="line">        f = mBound.centerX() + (Y * (random.nextFloat() - <span class="number">0.5f</span>));</span><br><span class="line">      	<span class="comment">//赋值给baseCx，一开始的X中心坐标</span></span><br><span class="line">        particle.baseCx = f;</span><br><span class="line">      	<span class="comment">//赋值给cx</span></span><br><span class="line">        particle.cx = f;</span><br><span class="line">      	<span class="comment">//f值在mBound.centerY()+(-10dp~10dp)</span></span><br><span class="line">        f = mBound.centerY() + (Y * (random.nextFloat() - <span class="number">0.5f</span>));</span><br><span class="line">      	<span class="comment">//赋值给baseCx，一开始的Y中心坐标</span></span><br><span class="line">        particle.baseCy = f;</span><br><span class="line">      	<span class="comment">//赋值给cx</span></span><br><span class="line">        particle.cy = f;</span><br><span class="line">      	<span class="comment">//颗粒不显示时间，无穷~0.14</span></span><br><span class="line">        particle.life = END_VALUE / <span class="number">10</span> * random.nextFloat();</span><br><span class="line">      	<span class="comment">//溢出值0~0.4</span></span><br><span class="line">        particle.overflow = <span class="number">0.4f</span> * random.nextFloat();</span><br><span class="line">      	<span class="comment">//透明度为1</span></span><br><span class="line">        particle.alpha = <span class="number">1f</span>;</span><br><span class="line">        <span class="keyword">return</span> particle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>nextFloat</code> 的值小于 0.2 时，top 范围在 <code>mBound.height()*(0~0.38)</code> ，bottom 范围在 <code>mBound.height()*(-0.9~0.9)</code> ；</li>
<li>在 <code>nextFloat</code> 的值大于等于 0.2，小于 0.8 时，top 范围在 <code>mBound.height()*(0~0.456)</code> ，bottom 范围在 <code>mBound.height()*(-0.54~0.54)</code> ；</li>
<li>在 <code>nextFloat</code> 的值大于等于 0.8 时，top 范围在 <code>mBound.height()*(0~0.456)</code> ，bottom 范围在 <code>mBound.height()*(-0.27~0.27)</code></li>
</ul>
<p><code>particle.baseCx</code> 和 <code>particle.baseCy</code> 是爆炸一开始的颗粒的坐标，都在要爆炸 View 中心的偏移 10dp 的位置。</p>
<p>当爆炸开始时，调用了 <code>start()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplosionAnimator</span> <span class="keyword">extends</span> <span class="title">ValueAnimator</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.start();</span><br><span class="line">        mContainer.invalidate(mBound);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>mContainer</code> 就是 <code>ExplosionField</code> ，那么 <code>onDraw(Canvas)</code> 方法将会被调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplosionField</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">for</span> (ExplosionAnimator explosion : mExplosions) &#123;</span><br><span class="line">            explosion.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再进到 <code>ExplosionAnimator</code> 的 <code>draw(Canvas)</code> 方法中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplosionAnimator</span> <span class="keyword">extends</span> <span class="title">ValueAnimator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isStarted()) &#123;<span class="comment">//如果已经开始了，那么就跳过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//遍历每个像素</span></span><br><span class="line">        <span class="keyword">for</span> (Particle particle : mParticles) &#123;</span><br><span class="line">            particle.advance((<span class="keyword">float</span>) getAnimatedValue());</span><br><span class="line">          	<span class="comment">//如果透明度大于0</span></span><br><span class="line">            <span class="keyword">if</span> (particle.alpha &gt; <span class="number">0f</span>) &#123;</span><br><span class="line">              	<span class="comment">//将颜色赋值给笔</span></span><br><span class="line">                mPaint.setColor(particle.color);</span><br><span class="line">              	<span class="comment">//给笔设置alpha值</span></span><br><span class="line">                mPaint.setAlpha((<span class="keyword">int</span>) (Color.alpha(particle.color) * particle.alpha));</span><br><span class="line">              	<span class="comment">//画圆，以cx,cy为中心，radius为半径</span></span><br><span class="line">                canvas.drawCircle(particle.cx, particle.cy, particle.radius, mPaint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//继续</span></span><br><span class="line">        mContainer.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要动画应该就是在 <code>Particle.advance(float)</code> 方法里面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplosionAnimator</span> <span class="keyword">extends</span> <span class="title">ValueAnimator</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Particle</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> alpha;<span class="comment">//透明值</span></span><br><span class="line">        <span class="keyword">int</span> color;<span class="comment">//颜色</span></span><br><span class="line">        <span class="keyword">float</span> cx;<span class="comment">//不断变化的X的位置</span></span><br><span class="line">        <span class="keyword">float</span> cy;<span class="comment">//不断变化的Y的位置</span></span><br><span class="line">        <span class="keyword">float</span> radius;<span class="comment">//半径</span></span><br><span class="line">        <span class="keyword">float</span> baseCx;<span class="comment">//一开始的X位置</span></span><br><span class="line">        <span class="keyword">float</span> baseCy;<span class="comment">//一开始的Y位置</span></span><br><span class="line">        <span class="keyword">float</span> baseRadius;<span class="comment">//最终的半径</span></span><br><span class="line">        <span class="keyword">float</span> top;<span class="comment">//top</span></span><br><span class="line">        <span class="keyword">float</span> bottom;<span class="comment">//bottom</span></span><br><span class="line">        <span class="keyword">float</span> mag;<span class="comment">//???</span></span><br><span class="line">        <span class="keyword">float</span> neg;<span class="comment">//???</span></span><br><span class="line">        <span class="keyword">float</span> life;<span class="comment">//当0~1的比例大于life，颗粒才会显示出来</span></span><br><span class="line">        <span class="keyword">float</span> overflow;<span class="comment">//当0~1的比例小于等于(1-overflow)，颗粒才会显示出来</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">advance</span><span class="params">(<span class="keyword">float</span> factor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> f = <span class="number">0f</span>;</span><br><span class="line">          	<span class="comment">//当前的比例，factor为0~END_VALUE(1.4)的值，而normalization为0~1</span></span><br><span class="line">            <span class="keyword">float</span> normalization = factor / END_VALUE;</span><br><span class="line">          	<span class="comment">//当前比例小于存活时间(无穷~0.14)或者当前比例大于(1-溢出值)，也就是大于(0.6~1)，将透明度置为0</span></span><br><span class="line">            <span class="keyword">if</span> (normalization &lt; life || normalization &gt; <span class="number">1f</span> - overflow) &#123;</span><br><span class="line">                alpha = <span class="number">0f</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          	<span class="comment">//经过上面一层判断之后，接下来操作的话normalization值应该在life~(1-overflow)之间</span></span><br><span class="line">          	<span class="comment">//normalization = 当前已经显示比例 / 实际上能显示在View上的比例 ，现在这个值的范围是0~1</span></span><br><span class="line">            normalization = (normalization - life) / (<span class="number">1f</span> - life - overflow);</span><br><span class="line">          	<span class="comment">//f2为真正显示在View上面的时候的值，在0~END_VALUE(1.4)之间</span></span><br><span class="line">            <span class="keyword">float</span> f2 = normalization * END_VALUE;</span><br><span class="line">          	<span class="comment">//如果该值超过0.7</span></span><br><span class="line">            <span class="keyword">if</span> (normalization &gt;= <span class="number">0.7f</span>) &#123;</span><br><span class="line">              	<span class="comment">//给f赋值</span></span><br><span class="line">                f = (normalization - <span class="number">0.7f</span>) / <span class="number">0.3f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          	<span class="comment">//如果normalization没有超过0.7，alpha一直为1，超过0.7之后慢慢变透明</span></span><br><span class="line">            alpha = <span class="number">1f</span> - f;</span><br><span class="line">          	<span class="comment">//范围0~1.4*bottom，bottom可能为正可能为负</span></span><br><span class="line">            f = bottom * f2;</span><br><span class="line">          	<span class="comment">//颗粒X中心坐标，当bottom为正时往右移，为负的时候往左边移动</span></span><br><span class="line">            cx = baseCx + f;</span><br><span class="line">          	<span class="comment">//颗粒X中心坐标</span></span><br><span class="line">            cy = (<span class="keyword">float</span>) (baseCy - <span class="keyword">this</span>.neg * Math.pow(f, <span class="number">2.0</span>)) - f * mag;</span><br><span class="line">          	<span class="comment">//修改半径</span></span><br><span class="line">            radius = V + (baseRadius - V) * f2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在第一个 if 判断中，<code>normalization &lt; life</code> 说明<strong>一开始的时候是不显示的</strong>，所以这个地方导致了有些颗粒先出来有些颗粒后出来；</li>
<li>同时在第一个 if 判断中， <code>normalization &gt; 1f - overflow</code> 说明到后面该颗粒就不显示了；</li>
<li><code>cx</code> 在不断的加上 <code>f</code> ，而 <code>f</code> 的值是由 <code>bottom * f2</code> 儿来，<code>bottom</code> 可能为正数可能为负数，这就导致了有得颗粒向左有的颗粒向右</li>
<li><code>cy</code> 的变化是一个函数性的变换，先变大再不断的变小；<code>//TODO 待更新分析</code></li>
<li><code>radius</code> 半径的变化是逐渐靠近 <code>baseRadius</code>；</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="爆炸动画"><a href="#爆炸动画" class="headerlink" title="爆炸动画"></a>爆炸动画</h3><p>爆炸动画 <code>ExplosionAnimator</code>继承于 <code>ValueAnimator</code> ，在动画开始的时候去刷新 <code>ExplosionField</code> 的绘制，也就是调用了 <code>ExplosionField.onDraw(Canvas)</code> ，在 <code>onDraw(Canvas)</code> 中又调用了 <code>ExplosionAnimator.draw(canvas)</code> ，而在 <code>ExplosionAnimator.draw(canvas)</code> 中进行爆炸颗粒 <code>Particle</code> 的变换，比如位置、颜色、大小等，然后调用 <code>ExplosionField.invalidate()</code> 触发了 <code>ExplosionAnimator.draw(canvas)</code> ，就这样不停的来回调用，直到动画结束。</p>
<h3 id="颗粒"><a href="#颗粒" class="headerlink" title="颗粒"></a>颗粒</h3><p>代码一个有 15*15 个颗粒，但是每个颗粒的高度和宽度都是以 17*17 个计算得来的，实际上在处理的时候是放弃掉了周围一圈的颗粒。下图中的实心部分是没有算进去的颗粒。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ○ ●</span><br><span class="line">● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ●</span><br></pre></td></tr></table></figure>
<p>每个颗粒有一个 <code>life</code> 和 <code>overflow</code> 变量，当动画的比例值没有超过 <code>life</code> 则不显示出来，若超过了 <code>overflow</code> 也不显示出来，这里就导致了每个颗粒出现时间点不一样。其次，开始的时候每个颗粒的启始位置都是在中心位置的上下左右偏移 10dp 的范围内。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ExplosionField </tag>
            
            <tag> 源码 </tag>
            
            <tag> 粒子爆炸 </tag>
            
            <tag> 自定义控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ElasticScrollView源码解析]]></title>
      <url>/2016/03/27/elasticscrollview-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/Kitdroid/ElasticScrollView" target="_blank" rel="external">ElasticScrollView</a>      分析版本：<a href="https://github.com/Kitdroid/ElasticScrollView/tree/c673507527a2220f04dd74cca48b607113398d03" target="_blank" rel="external">c673507</a></p>
</blockquote>
<p>网上有很多下拉放大 <code>HeaderView</code> 的 <code>ListView</code> 或者 <code>ScrollView</code> ，这里将分析一下下拉放大的 <code>ScrollView</code> –  <strong>ElasticScrollView</strong> 。</p>
<a id="more"></a>
<h2 id="ElasticScrollView"><a href="#ElasticScrollView" class="headerlink" title="ElasticScrollView"></a>ElasticScrollView</h2><p><code>ElasticScrollView</code> 是一个比较简洁的下拉放大 <code>HeaderView</code> 的自定义 <code>ScrollView</code> ，先看效果图：</p>
<p><img src="http://yydcdut.github.io/img/elasticscrollview_sample.gif" alt="ElasticScrollView"></p>
<p>展示效果分两种情况，一种是放大 <code>HeaderView</code> ，一种是整体都往下拉，另外还可以发现一个 <code>Damk</code> 的参数，功能是设置阻力，当值越大的时候下拉效果越“吃力”。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>直接在 layout布局中使用便可，该布局便是上面 gif 中展示出来的布局：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">org.kitdroid.widget.ElasticScrollView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/sv"</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">"@android:color/transparent"</span></span><br><span class="line">    <span class="attribute">app:elasticId</span>=<span class="value">"@+id/iv"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_margin</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">        <span class="attribute">android:background</span>=<span class="value">"#ffffff"</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/iv"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"300dp"</span></span><br><span class="line">            <span class="attribute">android:scaleType</span>=<span class="value">"centerCrop"</span></span><br><span class="line">            <span class="attribute">android:src</span>=<span class="value">"@drawable/bg_md_0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/text_elastic_type"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_margin</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Elastic Type: ALL"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Damk"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">SeekBar</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/seekBar1"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">org.kitdroid.widget.ElasticScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>分析自定义控件，我们先从构造函数入手：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> elasticId;<span class="comment">//弹性View的Id</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ElasticScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        readStyleAttributes(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElasticScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        readStyleAttributes(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readStyleAttributes</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.elastic_scroll, <span class="number">0</span>, defStyle);</span><br><span class="line">        elasticId = a.getResourceId(R.styleable.elastic_scroll_elasticId, <span class="number">0</span>);</span><br><span class="line">        a.recycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数中主要将弹性 View 的 id 值从 <code>AttributeSet</code> 中取出，那么取出这个 id 之后应该去找这个 id 在哪个地方被 <code>findViewById()</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> View mInnerView;<span class="comment">//ScrollView里面的View(ViewGroup)</span></span><br><span class="line">    <span class="keyword">private</span> View elasticView;<span class="comment">//弹性View</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> originHeight;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onFinishInflate();</span><br><span class="line">        <span class="keyword">if</span> (getChildCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mInnerView = getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (elasticId != <span class="number">0</span>) &#123;</span><br><span class="line">            View viewById = findViewById(elasticId);</span><br><span class="line">            setElasticView(viewById);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * 设置弹性View</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> view</span><br><span class="line">     */</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setElasticView</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        refreshOriginHeight(view);</span><br><span class="line">        elasticView = view;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span><br><span class="line">     * 更新弹性View的高度</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshOriginHeight</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elasticView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            android.view.ViewGroup.LayoutParams layoutParams = elasticView.getLayoutParams();</span><br><span class="line">            layoutParams.height = originHeight;</span><br><span class="line">            elasticView.setLayoutParams(layoutParams);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != view) &#123;</span><br><span class="line">            originHeight = view.getLayoutParams().height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>mInnerView</code> 是 <code>ScrollView</code> 的子 View ，因为 <code>ScrollView</code> 只能有一个子 View，所以这里的 <code>mInnerView</code> 就是 layout 布局中的 <code>LinearLayout</code> 。接下来如果 <code>elasticId</code> 不为0，也就是在 layout 布局中设置了的话，那么就去 <code>findViewById()</code> ，之后将找到的 View 赋值给成员变量 <code>elasticView</code> ，并且得到当前的高度，高度的获取是通过 <code>LayoutParams.height</code> 获取的。</p>
<p>那么初始化的流程看完了，就看主要关心的手势事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHAKE_THRESHOLD_VALUE = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startY;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = ev.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">                startY = ev.getY();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">                <span class="keyword">float</span> currentY = ev.getY();</span><br><span class="line">                <span class="keyword">float</span> scrollY = currentY - startY;</span><br><span class="line">                <span class="keyword">return</span> Math.abs(scrollY) &gt; SHAKE_THRESHOLD_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInnerView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            computeMove(ev);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先看 <code>onInterceptTouchEvent()</code> 方法，该方法若是返回 <code>true</code> ，则表明拦截事件，直接进到 <code>onTouchEvent</code> 里面，如果返回 <code>false</code> 的话，继续将事件传递给子 View 。那么在 <code>ACTION_DOWN</code> 的时候记录下当前的 Y 坐标赋值给 <code>startY</code> ，在 <code>ACTION_MOVE</code> 的时候得到当前的 Y 坐标，与 <code>startY</code> 比对判断手势在 Y 轴上是否超过了 <code>SHAKE_THRESHOLD_VALUE</code> 的值，如果超过了则 <code>onInterceptTouchEvent</code> 返回 <code>true</code> ，说明手势应该是在滑动 <code>ScrollView</code> ，如果不是的话说明应该要去操作 <code>ScrollView</code> 中的子 View 事件。再看 <code>onTouchEvent</code> 方法，如果该控件有子 View 的话，进行 <code>computeMove</code> 操作。</p>
<p>好了，这个 <code>computeMove</code> 便是这个自定义控件的关键了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Rect normalRect = <span class="keyword">new</span> Rect();</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DAMP_COEFFICIENT = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> damk = DAMP_COEFFICIENT;<span class="comment">//阻力</span></span><br><span class="line">  </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOP_Y = <span class="number">0</span>;</span><br><span class="line">  	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeMove</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">                doReset();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">                doMove(event);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doMove</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> deltaY = computeDeltaY(event);<span class="comment">//计算出手势在Y轴上的距离</span></span><br><span class="line">        <span class="keyword">if</span> (!isNeedMove(deltaY)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        refreshNormalRect();</span><br><span class="line">        <span class="keyword">if</span> (elasticView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            moveElasticView(deltaY);<span class="comment">//移动弹性View</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            moveInnerView(deltaY);<span class="comment">//移动整个子View</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 保存正常的布局位置，给InnerView用的</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshNormalRect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!normalRect.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        normalRect.set(mInnerView.getLeft(), mInnerView.getTop(), mInnerView.getRight(), mInnerView.getBottom());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 计算Y轴上面的差值</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> event</span><br><span class="line">     * <span class="doctag">@return</span> deltaY &lt; 0 ScrollView往上滑动，deltaY &gt; 0 ScrollView往下滑动</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">computeDeltaY</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> currentY = event.getY();</span><br><span class="line">        <span class="keyword">int</span> deltaY = (<span class="keyword">int</span>) ((startY - currentY) / damk);<span class="comment">//计算出差值，真正的差值除以阻力</span></span><br><span class="line">        startY = currentY;</span><br><span class="line">        <span class="keyword">return</span> deltaY;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 是否需要移动布局</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> deltaY deltaY &lt; 0 ScrollView往上滑动，deltaY &gt; 0 ScrollView往下滑动</span><br><span class="line">     * <span class="doctag">@return</span> </span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNeedMove</span><span class="params">(<span class="keyword">int</span> deltaY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deltaY == <span class="number">0</span> ? <span class="keyword">false</span> : (deltaY &lt; <span class="number">0</span> ? isTop() : isBottom());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 通过getScrollY()来判断是否到顶部了</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> true 到顶部了</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> scrollY = getScrollY();</span><br><span class="line">        <span class="keyword">return</span> (scrollY == TOP_Y);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 判断是否在底部了</span><br><span class="line">     * 当innerView有marginBottom的时候这个永远返回false，因为mInnerView.getMeasuredHeight() + marginBottom == getHeight()</span><br><span class="line">     * 但是当没有的时候在滑动到最下面的时候再往下滑，弹性View会改变</span><br><span class="line">     * 当ScrollView的内容没有充满整个屏幕的时候，这个很好看，但是充满了，尤其是弹性View已经看不见了，个人觉得也就没有必要再做这个操作了</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBottom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> offset = mInnerView.getMeasuredHeight() - getHeight();</span><br><span class="line">        offset = (offset &lt; <span class="number">0</span>) ? <span class="number">0</span> : offset;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> scrollY = getScrollY();</span><br><span class="line">        <span class="keyword">return</span> (scrollY == offset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>doMove</code> 方法中分了情况，一种是有弹性 View 的时候去改变弹性 View，一种是没有设置弹性 View 的时候去改变 InnerView ，那么我们分开来看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 移动弹性View，就是改变弹性View的高度</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> deltaY deltaY &lt; 0 ScrollView往上滑动，deltaY &gt; 0 ScrollView往下滑动</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveElasticView</span><span class="params">(<span class="keyword">int</span> deltaY)</span> </span>&#123;</span><br><span class="line">        android.view.ViewGroup.LayoutParams layoutParams = elasticView.getLayoutParams();</span><br><span class="line">        layoutParams.height = Math.max(<span class="number">0</span>, layoutParams.height - deltaY);</span><br><span class="line">        elasticView.setLayoutParams(layoutParams);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过修改 <code>elasticView</code> 的高度，使之变大变小。当 <code>ScrollView</code> 往上滑动，也就是 <code>deltaY</code> 为负值的时候，<code>height</code> 会越来越大，当 <code>ScrollView</code> 往下滑动，也就是 <code>deltaY</code> 为正值的时候，<code>height</code> 会越来越小，最小的时候为 0 。</p>
<p><strong>注意：demo 里面的 <code>elasticView</code> 是一个 <code>ImageView</code> ，而这个 <code>ImageView</code> 的 <code>scaleType</code> 为 <code>centerCrop</code> 。</strong></p>
<p>现在来看看滑动 <code>InnerView</code> 的情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 移动ScrollView中的View(ViewGroup)</span><br><span class="line">     * 就是改变位置</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> deltaY</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveInnerView</span><span class="params">(<span class="keyword">int</span> deltaY)</span> </span>&#123;</span><br><span class="line">        mInnerView.layout(mInnerView.getLeft(), mInnerView.getTop() - deltaY, mInnerView.getRight(), mInnerView.getBottom() - deltaY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>InnerView</code> 的 <code>layout</code> 去改变位置。</p>
<p>到此下拉放大的功能分析完了，那么看下拉放大之后放手缩回去的过程是怎么样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 复原</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> needReset = isNeedReset();</span><br><span class="line">        <span class="keyword">if</span> (!needReset) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (elasticView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resetElasticView();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resetInnerView();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/**</span><br><span class="line">     * 是否需要还原</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNeedReset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elasticView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> !normalRect.isEmpty();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> originHeight != elasticView.getLayoutParams().height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样在还原的时候也要分情况，那么先看有 <code>elasticView</code> 的情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELASTIC_DELAY = <span class="number">500</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> resetDelay = ELASTIC_DELAY;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetElasticView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueAnimator animator = ObjectAnimator.ofInt(elasticView.getLayoutParams().height, originHeight);<span class="comment">//从当前的elasticView.getLayoutParams().height 变到 原来的originHeight 高度</span></span><br><span class="line">        animator.setDuration(resetDelay);</span><br><span class="line">        animator.setInterpolator(<span class="keyword">new</span> OvershootInterpolator());<span class="comment">//使用OvershootInterpolator插值器，有一种回弹效果</span></span><br><span class="line">        animator.addUpdateListener(<span class="keyword">new</span> AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">              	<span class="comment">//将值拿到之后赋值给elasticView的height</span></span><br><span class="line">                <span class="keyword">int</span> value = (Integer) animation.getAnimatedValue();</span><br><span class="line">                android.view.ViewGroup.LayoutParams layoutParams = elasticView.getLayoutParams();</span><br><span class="line">                layoutParams.height = value;</span><br><span class="line">                elasticView.setLayoutParams(layoutParams);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用的是 <code>NindOldAndroid</code> 动画库。再看看 <code>InnerView</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetInnerView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> moveY = mInnerView.getTop() - normalRect.top;<span class="comment">//计算差值</span></span><br><span class="line">        ValueAnimator animator = ObjectAnimator.ofInt(moveY, <span class="number">0</span>);<span class="comment">//将值从差值变为0</span></span><br><span class="line">        animator.setDuration(resetDelay);</span><br><span class="line">        animator.setInterpolator(<span class="keyword">new</span> OvershootInterpolator());</span><br><span class="line"></span><br><span class="line">        animator.addUpdateListener(<span class="keyword">new</span> AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">              	<span class="comment">//将值拿到之后重新layout</span></span><br><span class="line">                <span class="keyword">int</span> value = (Integer) animation.getAnimatedValue();</span><br><span class="line">                mInnerView.layout(normalRect.left, normalRect.top + value, normalRect.right, normalRect.bottom + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，<code>ElasticScrollView</code> 分析完了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>下拉变大的效果是 <code>elasticView</code> 的高度不断变大；</li>
<li><code>elasticView</code> 是 <code>ImageView</code> ，<code>scaleType</code> 为 <code>centerCrop</code> ；</li>
<li>当没有 <code>elasticView</code> 的时候，改变的是 <code>InnerView</code> 的位置；</li>
<li>当放手缩回原来大小的时候设置了一个插值器，所以有回弹效果；</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticScrollView </tag>
            
            <tag> 源码 </tag>
            
            <tag> 自定义控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Dex分包之旅]]></title>
      <url>/2016/03/20/split-dex/</url>
      <content type="html"><![CDATA[<p>当程序越来越大之后，出现了一个 dex 包装不下的情况，通过 <code>MultiDex</code> 的方法解决了这个问题，但是在底端机器上又出现了 <code>INSTALL_FAILED_DEXOPT</code> 的情况，那再解决这个问题吧。等解决完这个问题之后，发现需要填的坑越来越多了，文章讲的是我在分包处理中填的坑，比如 65536、LinearAlloc、NoClassDefFoundError等等。</p>
<a id="more"></a>
<h2 id="INSTALL-FAILED-DEXOPT"><a href="#INSTALL-FAILED-DEXOPT" class="headerlink" title="INSTALL_FAILED_DEXOPT"></a>INSTALL_FAILED_DEXOPT</h2><p>INSTALL_FAILED_DEXOPT 出现的原因大部分都是两种，一种是 65536 了，另外一种是 <code>LinearAlloc</code> 太小了。两者的限制不同，但是原因却是相似，那就是App太大了，导致没办法安装到手机上。</p>
<h3 id="65536"><a href="#65536" class="headerlink" title="65536"></a>65536</h3><blockquote>
<p>trouble writing output: Too many method references: 70048; max is 65536.</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>UNEXPECTED TOP-LEVEL EXCEPTION: java.lang.IllegalArgumentException: method ID not in [0, 0xffff]: 65536<br>​    at com.android.dx.merge.DexMerger$6.updateIndex(DexMerger.java:501)<br>​    at com.android.dx.merge.DexMerger$IdMerger.mergeSorted(DexMerger.java:276)<br>​    at com.android.dx.merge.DexMerger.mergeMethodIds(DexMerger.java:490)<br>​    at com.android.dx.merge.DexMerger.mergeDexes(DexMerger.java:167)<br>​    at com.android.dx.merge.DexMerger.merge(DexMerger.java:188)<br>​    at com.android.dx.command.dexer.Main.mergeLibraryDexBuffers(Main.java:439)<br>​    at com.android.dx.command.dexer.Main.runMonoDex(Main.java:287)<br>​    at com.android.dx.command.dexer.Main.run(Main.java:230)<br>​    at com.android.dx.command.dexer.Main.main(Main.java:199)<br>​    at com.android.dx.command.Main.main(Main.java:103):Derp:dexDerpDebug FAILED</p>
</blockquote>
<h4 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.3.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"24.0.0rc1"</span></span><br><span class="line">	<span class="comment">//....</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="为什么是65536"><a href="#为什么是65536" class="headerlink" title="为什么是65536"></a>为什么是65536</h4><p>根据  <a href="http://stackoverflow.com/questions/21490382/does-the-android-art-runtime-have-the-same-method-limit-limitations-as-dalvik/21492160#21492160" target="_blank" rel="external">StackOverFlow – Does the Android ART runtime have the same method limit limitations as Dalvik?</a> 上面的说法，是因为 Dalvik 的 invoke-kind 指令集中，method reference index 只留了 16 bits，最多能<strong>引用</strong> 65535 个方法。<a href="https://source.android.com/devices/tech/dalvik/dalvik-bytecode.html" target="_blank" rel="external">Dalvik bytecode</a> ：</p>
<blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">Op &amp; Format</th>
<th>Mnemonic / Syntax</th>
<th>Arguments</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">6e..72 35c</td>
<td>invoke-<em>kind</em> {vC, vD, vE, vF, vG}, meth@BBBB6e: invoke-virtual6f: invoke-super70: invoke-direct71: invoke-static72: invoke-interface</td>
<td><code>A:</code> argument word count (4 bits)<code>B:</code> method reference index (16 bits)<code>C..G:</code> argument registers (4 bits each)</td>
</tr>
</tbody>
</table>
</blockquote>
<p>即使 dex 里面的引用方法数超过了 65536，那也只有前面的 65536 得的到调用。所以这个不是 dex 的原因。其次，既然和 dex 没有关系，那在打包 dex 的时候为什么会报错。我们先定位 <code>Too many</code> 关键字，定位到了 <a href="https://github.com/yydcdut/platform_dalvik/blob/master/dx/src/com/android/dx/dex/file/MemberIdsSection.java" target="_blank" rel="external">MemberIdsSection</a> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberIdsSection</span> <span class="keyword">extends</span> <span class="title">UniformItemSection</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** &#123;<span class="doctag">@inheritDoc</span>&#125; */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">orderItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (items().size() &gt; DexFormat.MAX_MEMBER_IDX + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DexIndexOverflowException(getTooManyMembersMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object i : items()) &#123;</span><br><span class="line">            ((MemberIdItem) i).setIndex(idx);</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTooManyMembersMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, AtomicInteger&gt; membersByPackage = <span class="keyword">new</span> TreeMap&lt;String, AtomicInteger&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object member : items()) &#123;</span><br><span class="line">            String packageName = ((MemberIdItem) member).getDefiningClass().getPackageName();</span><br><span class="line">            AtomicInteger count = membersByPackage.get(packageName);</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">                count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">                membersByPackage.put(packageName, count);</span><br><span class="line">            &#125;</span><br><span class="line">            count.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Formatter formatter = <span class="keyword">new</span> Formatter();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String memberType = <span class="keyword">this</span> <span class="keyword">instanceof</span> MethodIdsSection ? <span class="string">"method"</span> : <span class="string">"field"</span>;</span><br><span class="line">            formatter.format(<span class="string">"Too many %s references: %d; max is %d.%n"</span> +</span><br><span class="line">                    Main.getTooManyIdsErrorMessage() + <span class="string">"%n"</span> +</span><br><span class="line">                    <span class="string">"References by package:"</span>,</span><br><span class="line">                    memberType, items().size(), DexFormat.MAX_MEMBER_IDX + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, AtomicInteger&gt; entry : membersByPackage.entrySet()) &#123;</span><br><span class="line">                formatter.format(<span class="string">"%n%6d %s"</span>, entry.getValue().get(), entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> formatter.toString();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            formatter.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>items().size() &gt; DexFormat.MAX_MEMBER_IDX + 1</code> ，那 <a href="https://github.com/yydcdut/android_libcore/blob/kitkat/dex/src/main/java/com/android/dex/DexFormat.java" target="_blank" rel="external">DexFormat</a> 的值是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFormat</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">     * Maximum addressable field or method index.</span><br><span class="line">     * The largest addressable member is 0xffff, in the "instruction formats" spec as field<span class="doctag">@CCCC</span> or</span><br><span class="line">     * meth<span class="doctag">@CCCC</span>.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_MEMBER_IDX = <span class="number">0xFFFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dx 在这里做了判断，当大于 65536 的时候就抛出异常了。所以在生成 dex 文件的过程中，当调用方法数不能超过 65535 。那我们再跟一跟代码，发现 <code>MemberIdsSection</code> 的一个子类叫  <a href="https://github.com/yydcdut/platform_dalvik/blob/master/dx/src/com/android/dx/dex/file/MethodIdsSection.java" target="_blank" rel="external">MethodidsSection</a> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodIdsSection</span> <span class="keyword">extends</span> <span class="title">MemberIdsSection</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>回过头来，看一下 <code>orderItems()</code> 方法在哪里被调用了，跟到了 <code>MemberIdsSection</code> 的父类 <a href="https://github.com/yydcdut/platform_dalvik/blob/master/dx/src/com/android/dx/dex/file/UniformItemSection.java" target="_blank" rel="external">UniformItemSection</a> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UniformItemSection</span> <span class="keyword">extends</span> <span class="title">Section</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepare0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DexFile file = getFile();</span><br><span class="line"></span><br><span class="line">        orderItems();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Item one : items()) &#123;</span><br><span class="line">            one.addContents(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">orderItems</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再跟一下 <code>prepare0</code> 在哪里被调用，查到了 <code>UniformItemSection</code> 父类 <a href="https://github.com/yydcdut/platform_dalvik/blob/master/dx/src/com/android/dx/dex/file/Section.java" target="_blank" rel="external">Section</a> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Section</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        throwIfPrepared();</span><br><span class="line">        prepare0();</span><br><span class="line">        prepared = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare0</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那现在再跟一下 <code>prepare()</code> ，查到 <a href="https://github.com/yydcdut/platform_dalvik/blob/master/dx/src/com/android/dx/dex/file/DexFile.java" target="_blank" rel="external">DexFile</a> 中有调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFile</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> ByteArrayAnnotatedOutput <span class="title">toDex0</span><span class="params">(<span class="keyword">boolean</span> annotate, <span class="keyword">boolean</span> verbose)</span> </span>&#123;</span><br><span class="line">        classDefs.prepare();</span><br><span class="line">        classData.prepare();</span><br><span class="line">        wordData.prepare();</span><br><span class="line">        byteData.prepare();</span><br><span class="line">        methodIds.prepare();</span><br><span class="line">        fieldIds.prepare();</span><br><span class="line">        protoIds.prepare();</span><br><span class="line">        typeLists.prepare();</span><br><span class="line">        typeIds.prepare();</span><br><span class="line">        stringIds.prepare();</span><br><span class="line">        stringData.prepare();</span><br><span class="line">        header.prepare();</span><br><span class="line">		<span class="comment">//blablabla......</span></span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那再看一下 <code>toDex0()</code> 吧，因为是 private 的，直接在类中找调用的地方就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFile</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">byte</span>[] toDex(Writer humanOut, <span class="keyword">boolean</span> verbose) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">boolean</span> annotate = (humanOut != <span class="keyword">null</span>);</span><br><span class="line">        ByteArrayAnnotatedOutput result = toDex0(annotate, verbose);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (annotate) &#123;</span><br><span class="line">            result.writeAnnotationsTo(humanOut);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.getArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(OutputStream out, Writer humanOut, <span class="keyword">boolean</span> verbose)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> annotate = (humanOut != <span class="keyword">null</span>);</span><br><span class="line">        ByteArrayAnnotatedOutput result = toDex0(annotate, verbose);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.write(result.getArray());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (annotate) &#123;</span><br><span class="line">            result.writeAnnotationsTo(humanOut);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先搜搜 <code>toDex()</code> 方法吧，最终发现在 <a href="https://github.com/yydcdut/platform_dalvik/blob/master/dx/src/com/android/dx/command/dexer/Main.java" target="_blank" rel="external">com.android.dx.command.dexer.Main</a> 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] writeDex(DexFile outputDex) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] outArray = <span class="keyword">null</span>;</span><br><span class="line">      	<span class="comment">//blablabla......</span></span><br><span class="line">		<span class="keyword">if</span> (args.methodToDump != <span class="keyword">null</span>) &#123;</span><br><span class="line">			outputDex.toDex(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            dumpMethod(outputDex, args.methodToDump, humanOutWriter);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			outArray = outputDex.toDex(humanOutWriter, args.verboseDump);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//blablabla......</span></span><br><span class="line">        <span class="keyword">return</span> outArray;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//调用writeDex的地方</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runMonoDex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  		<span class="comment">//blablabla......</span></span><br><span class="line">      	outArray = writeDex(outputDex);</span><br><span class="line">      	<span class="comment">//blablabla......</span></span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//调用runMonoDex的地方</span></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(Arguments arguments)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  		<span class="keyword">if</span> (args.multiDex) &#123;</span><br><span class="line">			<span class="keyword">return</span> runMultiDex();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runMonoDex();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>args.multiDex</code> 就是是否分包的参数，那么问题找着了，如果不选择分包的情况下，引用方法数超过了 65536 的话就会抛出异常。</p>
<p>同样分析第二种情况，根据错误信息可以具体定位到代码，但是很奇怪的是 <code>DexMerger</code> ，我们没有设置分包参数或者其他参数，为什么会有 <code>DexMerger</code> ，而且依赖工程最终不都是 aar 格式的吗？那我们还是来跟一跟代码吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] mergeLibraryDexBuffers(<span class="keyword">byte</span>[] outArray) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ArrayList&lt;Dex&gt; dexes = <span class="keyword">new</span> ArrayList&lt;Dex&gt;();</span><br><span class="line">        <span class="keyword">if</span> (outArray != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dexes.add(<span class="keyword">new</span> Dex(outArray));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span>[] libraryDex : libraryDexBuffers) &#123;</span><br><span class="line">            dexes.add(<span class="keyword">new</span> Dex(libraryDex));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dexes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Dex merged = <span class="keyword">new</span> DexMerger(dexes.toArray(<span class="keyword">new</span> Dex[dexes.size()]), CollisionPolicy.FAIL).merge();</span><br><span class="line">        <span class="keyword">return</span> merged.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以看到变量 <code>libraryDexBuffers</code> ，是一个 List 集合，那么我们看一下这个集合在哪里添加数据的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">processFileBytes</span><span class="params">(String name, <span class="keyword">long</span> lastModified, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">  		<span class="keyword">boolean</span> isClassesDex = name.equals(DexFormat.DEX_IN_JAR_NAME);</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isClassesDex) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (libraryDexBuffers) &#123;</span><br><span class="line">                libraryDexBuffers.add(bytes);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//调用processFileBytes的地方</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FileBytesConsumer</span> <span class="keyword">implements</span> <span class="title">ClassPathOpener</span>.<span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processFileBytes</span><span class="params">(String name, <span class="keyword">long</span> lastModified,</span><br><span class="line">                <span class="keyword">byte</span>[] bytes)</span>   </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Main.processFileBytes(name, lastModified, bytes);</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//调用FileBytesConsumer的地方</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processOne</span><span class="params">(String pathname, FileNameFilter filter)</span> </span>&#123;</span><br><span class="line">        ClassPathOpener opener;</span><br><span class="line"></span><br><span class="line">        opener = <span class="keyword">new</span> ClassPathOpener(pathname, <span class="keyword">true</span>, filter, <span class="keyword">new</span> FileBytesConsumer());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (opener.process()) &#123;</span><br><span class="line">          updateStatus(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//调用processOne的地方</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">processAllFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">  		<span class="comment">// forced in main dex</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fileNames.length; i++) &#123;</span><br><span class="line">			processOne(fileNames[i], mainPassFilter);</span><br><span class="line">		&#125;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//调用processAllFiles的地方</span></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runMonoDex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">  		<span class="keyword">if</span> (!processAllFiles()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟了一圈又跟回来了，但是注意一个变量：<code>fileNames[i]</code>，传进去这个变量，是个地址，最终在 <code>processFileBytes</code> 中处理后添加到 <code>libraryDexBuffers</code> 中，那跟一下这个变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">processAllFiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">  		String[] fileNames = args.fileNames;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">    	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(parser.isArg(INPUT_LIST_OPTION + <span class="string">"="</span>)) &#123;</span><br><span class="line">			File inputListFile = <span class="keyword">new</span> File(parser.getLastValue());</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				inputList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">                readPathsFromFile(inputListFile.getAbsolutePath(), inputList);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">				System.err.println(<span class="string">"Unable to read input list file: "</span> + inputListFile.getName());</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> UsageException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">//blablabla...</span></span><br><span class="line">  		fileNames = parser.getRemaining();</span><br><span class="line">		<span class="keyword">if</span>(inputList != <span class="keyword">null</span> &amp;&amp; !inputList.isEmpty()) &#123;</span><br><span class="line">            inputList.addAll(Arrays.asList(fileNames));</span><br><span class="line">            fileNames = inputList.toArray(<span class="keyword">new</span> String[inputList.size()]);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argArray)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Arguments arguments = <span class="keyword">new</span> Arguments();</span><br><span class="line">        arguments.parse(argArray);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = run(arguments);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            System.exit(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟到这里发现是传进来的参数，那我们再看看 gradle 里面传的是什么参数吧，查看 <a href="https://github.com/yydcdut/android_tools_base/blob/mm/build-system/gradle-core/src/main/groovy/com/android/build/gradle/tasks/Dex.groovy" target="_blank" rel="external">Dex</a> task :</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dex</span> <span class="keyword">extends</span> <span class="title">BaseTask</span> &#123;</span></span><br><span class="line">  	<span class="annotation">@InputFiles</span></span><br><span class="line">    Collection&lt;File&gt; libraries</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们把这个参数打印出来：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123;</span><br><span class="line">    tasks.matching &#123;</span><br><span class="line">        it.name.startsWith(<span class="string">'dex'</span>)</span><br><span class="line">    &#125;.each &#123; dx -&gt;</span><br><span class="line">        <span class="keyword">if</span> (dx.additionalParameters == <span class="literal">null</span>) &#123;</span><br><span class="line">            dx.additionalParameters = []</span><br><span class="line">        &#125;</span><br><span class="line">        println dx.libraries</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印出来发现是 <code>build/intermediates/pre-dexed/</code> 目录里面的 jar 文件，再把 jar 文件解压发现里面就是 dex 文件了。所以 <code>DexMerger</code> 的工作就是合并这里的 dex 。</p>
<h4 id="更改编译环境"><a href="#更改编译环境" class="headerlink" title="更改编译环境"></a>更改编译环境</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.1.0-alpha3'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将 gradle 设置为 2.1.0-alpha3 之后，在项目的 <code>build.gradle</code> 中即使没有设置 <code>multiDexEnabled true</code> 也能够编译通过，但是生成的 apk 包依旧是两个 dex ，我想的是可能为了设置 <code>instantRun</code> 。</p>
<h4 id="解决-65536"><a href="#解决-65536" class="headerlink" title="解决 65536"></a>解决 65536</h4><p>Google MultiDex 解决方案：</p>
<p>在 gradle 中添加 <code>MultiDex</code> 的依赖：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123; compile <span class="string">'com.android.support:MultiDex:1.0.0'</span> &#125;</span><br></pre></td></tr></table></figure>
<p>在 gradle 中配置 <code>MultiDexEnable</code> :</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">	buildToolsVersion <span class="string">"21.1.0"</span></span><br><span class="line">	defaultConfig &#123;</span><br><span class="line">        <span class="comment">// Enabling MultiDex support.</span></span><br><span class="line">        MultiDexEnabled <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 AndroidManifest.xml 的 application 中声明:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">application</span></span><br><span class="line">  <span class="attribute">android:name</span>=<span class="value">"android.support.multidex.MultiDexApplication"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">application</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果有自己的 Application 了，让其继承于 MultiDexApplication 。</p>
<p>如果继承了其他的 Application ，那么可以重写 <code>attachBaseContext(Context)</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">    MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LinearAlloc"><a href="#LinearAlloc" class="headerlink" title="LinearAlloc"></a>LinearAlloc</h3><blockquote>
<p>ERROR/dalvikvm(4620): LinearAlloc exceeded capacity (5242880), last=…</p>
</blockquote>
<h4 id="LinearAlloc-是什么"><a href="#LinearAlloc-是什么" class="headerlink" title="LinearAlloc 是什么"></a>LinearAlloc 是什么</h4><p>LinearAlloc 主要用来管理 Dalvik 中 class 加载时的内存，就是让 App 在执行时减少系统内存的占用。在 App 的安装过程中，系统会运行一个名为 dexopt 的程序为该应用在当前机型中运行做准备。dexopt 使用 LinearAlloc 来存储应用的方法信息。App 在执行前会将 class 读进 LinearAlloc 这个 buffer 中，这个 LinearAlloc 在 Android 2.3 之前是 4M 或 5M ，到 4.0 之后变为 8M 或 16M。因为 5M 实在是太小了，可能还没有 65536 就已经超过 5M 了，什么意思呢，就是只有一个包的情况下也有可能出现 INSTALL_FAILED_DEXOPT ，原因就在于 LinearAlloc。</p>
<h4 id="解决-LinearAlloc"><a href="#解决-LinearAlloc" class="headerlink" title="解决 LinearAlloc"></a>解决 LinearAlloc</h4><p>gradle：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123; </span><br><span class="line">  tasks.matching &#123; </span><br><span class="line">    it.name.startsWith(<span class="string">'dex'</span>) </span><br><span class="line">  &#125;.each &#123; dx -&gt; </span><br><span class="line">    <span class="keyword">if</span> (dx.additionalParameters == <span class="literal">null</span>) &#123; </span><br><span class="line">      dx.additionalParameters = []</span><br><span class="line">    &#125;  </span><br><span class="line">    dx.additionalParameters += <span class="string">'--set-max-idx-number=48000'</span> </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>--set-max-idx-number=</code> 用于控制每一个 dex 的最大方法个数。</p>
<p>这个参数在查看 dx.jar 找到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//blablabla...</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (parser.isArg(<span class="string">"--set-max-idx-number="</span>)) &#123; <span class="comment">// undocumented test option</span></span><br><span class="line">  maxNumberOfIdxPerDex = Integer.parseInt(parser.getLastValue());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(parser.isArg(INPUT_LIST_OPTION + <span class="string">"="</span>)) &#123;</span><br><span class="line"><span class="comment">//blablabla...</span></span><br></pre></td></tr></table></figure>
<p>更多细节可以查看源码：<a href="https://github.com/yydcdut/platform_dalvik/blob/master/dx/src/com/android/dx/command/dexer/Main.java" target="_blank" rel="external">Github – platform_dalvik/Main</a></p>
<p>FB 的工程师们曾经还想到过直接修改 LinearAlloc 的大小，比如从 5M 修改到 8M： <a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-dalvik-patch-for-facebook-for-android/10151345597798920" target="_blank" rel="external">Under the Hood: Dalvik patch for Facebook for Android</a> 。</p>
<h2 id="dexopt-amp-amp-dex2oat"><a href="#dexopt-amp-amp-dex2oat" class="headerlink" title="dexopt &amp;&amp; dex2oat"></a>dexopt &amp;&amp; dex2oat</h2><p><img src="http://yydcdut.github.io/img/dex_dexopt_dex2oat.png" alt="dexopt_dex2oat"></p>
<h3 id="dexopt"><a href="#dexopt" class="headerlink" title="dexopt"></a>dexopt</h3><p>当 Android 系统安装一个应用的时候，有一步是对 Dex 进行优化，这个过程有一个专门的工具来处理，叫 DexOpt。DexOpt 是在第一次加载 Dex 文件的时候执行的，将 dex 的依赖库文件和一些辅助数据打包成 odex 文件，即 Optimised Dex，存放在 cache/dalvik_cache 目录下。保存格式为 <code>apk路径 @ apk名 @ classes.dex</code> 。执行 ODEX 的效率会比直接执行 Dex 文件的效率要高很多。</p>
<p>更多可查看 <a href="http://www.netmite.com/android/mydroid/dalvik/docs/dexopt.html" target="_blank" rel="external">Dalvik Optimization and Verification With <em>dexopt</em></a> 。</p>
<h3 id="dex2oat"><a href="#dex2oat" class="headerlink" title="dex2oat"></a>dex2oat</h3><p>Android Runtime 的 dex2oat 是将 dex 文件编译成 oat 文件。而 oat 文件是 elf 文件，是可以在本地执行的文件，而 Android Runtime 替换掉了虚拟机读取的字节码转而用本地可执行代码，这就被叫做 AOT(ahead-of-time)。dex2oat 对所有 apk 进行编译并保存在 dalvik-cache 目录里。PackageManagerService 会持续扫描安装目录，如果有新的 App 安装则马上调用 dex2oat 进行编译。</p>
<p>更多可查看  <a href="http://blog.csdn.net/luoshengyang/article/details/39256813" target="_blank" rel="external">Android运行时ART简要介绍和学习计划</a> 。</p>
<h2 id="NoClassDefFoundError"><a href="#NoClassDefFoundError" class="headerlink" title="NoClassDefFoundError"></a>NoClassDefFoundError</h2><p>现在 INSTALL_FAILED_DEXOPT 问题是解决了，但是有时候编译完运行的时候一打开 App 就 crash 了，查看 log 发现是某个类找不到引用。</p>
<h3 id="Build-Tool-是如何分包的"><a href="#Build-Tool-是如何分包的" class="headerlink" title="Build Tool 是如何分包的"></a>Build Tool 是如何分包的</h3><p>为什么会这样呢？是因为 build-tool 在分包的时候只判断了直接引用类。什么是直接引用类呢？举个栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        DirectReferenceClass test = <span class="keyword">new</span> DirectReferenceClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectReferenceClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirectReferenceClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InDirectReferenceClass test = <span class="keyword">new</span> InDirectReferenceClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InDirectReferenceClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InDirectReferenceClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面有 MainActivity、DirectReferenceClass 、InDirectReferenceClass 三个类，其中 DirectReferenceClass 是 MainActivity 的直接引用类，InDirectReferenceClass 是 DirectReferenceClass 的直接引用类。而 InDirectReferenceClass 是 MainActivity 的间接引用类(即直接引用类的所有直接引用类)。</p>
<p>如果我们代码是这样写的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMultiDexApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        DirectReferenceClass test = <span class="keyword">new</span> DirectReferenceClass();</span><br><span class="line">        MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样直接就 crash 了。同理还要单例模式中拿到单例之后直接调用某个方法返回的是另外一个对象，并非单例对象。</p>
<p>build tool 的分包操作可以查看 sdk 中 build-tools 文件夹下的 <code>mainDexClasses</code> 脚本，同时还发现了 <code>mainDexClasses.rules</code> 文件，该文件是主 dex 的匹配规则。该脚本要求输入一个文件组（包含编译后的目录或jar包），然后分析文件组中的类并写入到–output所指定的文件中。实现原理也不复杂，主要分为三步：</p>
<ol>
<li>环境检查，包括传入参数合法性检查，路径检查以及proguard环境检测等。</li>
<li>使用mainDexClasses.rules规则，通过Proguard的shrink功能，裁剪无关类，生成一个tmp.jar包。</li>
<li>通过生成的tmp jar包，调用MainDexListBuilder类生成主dex的文件列表。</li>
</ol>
<p>更多细节可以查看源码：<a href="https://github.com/yydcdut/platform_dalvik/blob/0be69b5268823139b04411f6a8e15cb58f54ddae/dx/src/com/android/multidex/MainDexListBuilder.java" target="_blank" rel="external">Github – platform_dalvik/MainDexListBuilder</a></p>
<h3 id="Gradle-打包流程中是如何分包的"><a href="#Gradle-打包流程中是如何分包的" class="headerlink" title="Gradle 打包流程中是如何分包的"></a>Gradle 打包流程中是如何分包的</h3><p>在项目中，可以直接运行 gradle 的 task 。</p>
<ul>
<li><code>collect{flavor}{buildType}MultiDexComponents</code> Task 。这个 task 是获取 AndroidManifest.xml 中 Application 、Activity 、Service 、 Receiver 、 Provider 等相关类，以及 Annotation ，之后将内容写到 <code>build/intermediates/multi-dex/{flavor}/{buildType}/maindexlist.txt</code> 文件中去。</li>
</ul>
<ul>
<li><code>packageAll{flavor}DebugClassesForMultiDex</code> Task 。该 task 是将所有类打包成 jar 文件存在 <code>build/intermediates/multi-dex/{flavor}/debug/allclasses.jar</code> 。 当 BuildType 为 Release 的时候，执行的是 <code>proguard{flavor}Release</code> Task，该 task 将 proguard 混淆后的类打包成 jar 文件存在 <code>build/intermediates/classes-proguard/{flavor}/release/classes.jar</code></li>
<li><code>shrink{flavor}{buildType}MultiDexComponents</code> Task 。该 task 会根据 maindexlist.txt 生成  componentClasses.jar ，该 jar 包里面就只有 maindexlist.txt 里面的类，该 jar 包的位置在 <code>build/intermediates/multi-dex/{flavor}/{buildType}/componentClasses.jar</code></li>
<li><code>create{flavor}{buildType}MainDexClassList</code> Task 。该 task 会根据生成的 componentClasses.jar 去找这里面的所有的 class 中直接依赖的 class ，然后将内容写到 <code>build/intermediates/multi-dex/{flavor}/{buildType}/maindexlist.txt</code> 中。最终这个文件里面列出来的类都会被分配到第一个 dex 里面。</li>
</ul>
<p>更多细节可以查看源码：<a href="https://github.com/yydcdut/android_tools_base/blob/mm/build-system/gradle-core/src/main/groovy/com/android/build/gradle/internal/tasks/multidex/CreateManifestKeepList.groovy" target="_blank" rel="external">Github – android_tools_base</a> 。</p>
<h3 id="解决-NoClassDefFoundError"><a href="#解决-NoClassDefFoundError" class="headerlink" title="解决 NoClassDefFoundError"></a>解决 NoClassDefFoundError</h3><p>gradle :</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123; </span><br><span class="line">  tasks.matching &#123; </span><br><span class="line">    it.name.startsWith(<span class="string">'dex'</span>) </span><br><span class="line">  &#125;.each &#123; dx -&gt; </span><br><span class="line">    <span class="keyword">if</span> (dx.additionalParameters == <span class="literal">null</span>) &#123; </span><br><span class="line">      dx.additionalParameters = []</span><br><span class="line">    &#125;  </span><br><span class="line">    dx.additionalParameters += <span class="string">'--set-max-idx-number=48000'</span> </span><br><span class="line">    dx.additionalParameters += <span class="string">"--main-dex-list=$projectDir/multidex.keep"</span>.toString()</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>--main-dex-list=</code> 参数是一个类列表的文件，在该文件中的类会被打包在第一个 dex 中。</p>
<p>multidex.keep 里面列上需要打包到第一个 dex 的 class 文件，注意，如果需要混淆的话需要写混淆之后的 class 。</p>
<h2 id="Application-Not-Responding"><a href="#Application-Not-Responding" class="headerlink" title="Application Not Responding"></a>Application Not Responding</h2><p>因为第一次运行（包括清除数据之后）的时候需要 dexopt ，然而 dexopt 是一个比较耗时的操作，同时 <code>MultiDex.install()</code> 操作是在 <code>Application.attachBaseContext()</code> 中进行的，占用的是UI线程。那么问题来了，当我的第二个包、第三个包很大的时候，程序就阻塞在 <code>MultiDex.install()</code> 这个地方了，一旦超过规定时间，那就 ANR 了。那怎么办？放子线程？如果 Application 有一些初始化操作，到初始化操作的地方的时候都还没有完成 install + dexopt 的话，那不是又 NoClassDefFoundError 了吗？同时 ClassLoader 放在哪个线程都让主线程挂起。好了，那在 multidex.keep 的加上相关的所有的类吧。好像这样成了，但是第一个 dex 又大起来了，而且如果用户操作快，还没完成 install + dexopt 但是已经把 App 所以界面都打开了一遍。。。虽然这不现实。。</p>
<h3 id="微信加载方案"><a href="#微信加载方案" class="headerlink" title="微信加载方案"></a>微信加载方案</h3><p>首次加载在地球中页中, 并用线程去加载（但是 5.0 之前加载 dex 时还是会挂起主线程一段时间（不是全程都挂起））。</p>
<ul>
<li><p>dex 形式</p>
<p>微信是将包放在 <code>assets</code> 目录下的，在加载 Dex 的代码时，实际上传进去的是 zip，在加载前需要验证 MD5，确保所加载的 Dex 没有被篡改。</p>
</li>
<li><p>dex 类分包规则</p>
<p>分包规则即将所有 Application、ContentProvider 以及所有 export 的 Activity、Service 、Receiver 的间接依赖集都必须放在主 dex。</p>
</li>
<li><p>加载 dex 的方式</p>
<p>加载逻辑这边主要判断是否已经 dexopt，若已经 dexopt，即放在 attachBaseContext 加载，反之放于地球中用线程加载。怎么判断？因为在微信中，若判断 revision 改变，即将 dex 以及 dexopt 目录清空。只需简单判断两个目录 dex 名称、数量是否与配置文件的一致。</p>
</li>
</ul>
<p>总的来说，这种方案用户体验较好，缺点在于太过复杂，每次都需重新扫描依赖集，而且使用的是比较大的间接依赖集。</p>
<h3 id="Facebook-加载方案"><a href="#Facebook-加载方案" class="headerlink" title="Facebook 加载方案"></a>Facebook 加载方案</h3><p>Facebook的思路是将 <code>MultiDex.install()</code> 操作放在另外一个经常进行的。</p>
<ul>
<li><p>dex 形式</p>
<p>与微信相同。</p>
</li>
<li><p>dex 类分包规则</p>
<p>Facebook 将加载 dex 的逻辑单独放于一个单独的 nodex 进程中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> </span><br><span class="line"><span class="attribute">android:exported</span>=<span class="value">"false"</span></span><br><span class="line"><span class="attribute">android:process</span>=<span class="value">":nodex"</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">"com.facebook.nodex.startup.splashscreen.NodexSplashActivity"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所有的依赖集为 Application、NodexSplashActivity 的间接依赖集即可。</p>
</li>
<li><p>加载 dex 的方式</p>
<p>因为 <code>NodexSplashActivity</code> 的 intent-filter 指定为 <code>Main</code> 和 <code>LAUNCHER</code> ，所以一打开 App 首先拉起 nodex 进程，然后打开 <code>NodexSplashActivity</code> 进行 <code>MultiDex.install()</code> 。如果已经进行了 dexpot 操作的话就直接跳转主界面，没有的话就等待 dexpot 操作完成再跳转主界面。</p>
</li>
</ul>
<p>这种方式好处在于依赖集非常简单，同时首次加载 dex 时也不会卡死。但是它的缺点也很明显，即每次启动主进程时，都需先启动 nodex 进程。尽管 nodex 进程逻辑非常简单，这也需100ms以上。</p>
<h3 id="美团加载方案"><a href="#美团加载方案" class="headerlink" title="美团加载方案"></a>美团加载方案</h3><ul>
<li><p>dex 形式</p>
<p>在 gradle 生成 dex 文件的这步中，自定义一个 task 来干预 dex 的生产过程，从而产生多个 dex 。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tasks.whenTaskAdded &#123; task -&gt;</span><br><span class="line">    <span class="keyword">if</span> (task.name.startsWith(<span class="string">'proguard'</span>) &amp;&amp; (task.name.endsWith(<span class="string">'Debug'</span>) || task.name.endsWith(<span class="string">'Release'</span>))) &#123;</span><br><span class="line">        task.doLast &#123;</span><br><span class="line">            makeDexFileAfterProguardJar();</span><br><span class="line">        &#125;</span><br><span class="line">        task.doFirst &#123;</span><br><span class="line">            delete <span class="string">"$&#123;project.buildDir&#125;/intermediates/classes-proguard"</span>;</span><br><span class="line"></span><br><span class="line">            String flavor = task.name.substring(<span class="string">'proguard'</span>.length(), task.name.lastIndexOf(task.name.endsWith(<span class="string">'Debug'</span>) ? "Debug" : <span class="string">"Release"</span>));</span><br><span class="line">            generateMainIndexKeepList(flavor.toLowerCase());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (task.name.startsWith(<span class="string">'zipalign'</span>) &amp;&amp; (task.name.endsWith(<span class="string">'Debug'</span>) || task.name.endsWith(<span class="string">'Release'</span>))) &#123;</span><br><span class="line">        task.doFirst &#123;</span><br><span class="line">            ensureMultiDexInApk();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>dex 类分包规则</p>
<p>把 Service、Receiver、Provider 涉及到的代码都放到主 dex 中，而把 Activity 涉及到的代码进行了一定的拆分，把首页 Activity、Laucher Activity 、欢迎页的 Activity 、城市列表页 Activity 等所依赖的 class 放到了主 dex 中，把二级、三级页面的 Activity 以及业务频道的代码放到了第二个  dex 中，为了减少人工分析 class 的依赖所带了的不可维护性和高风险性，美团编写了一个能够自动分析 class 依赖的脚本， 从而能够保证主 dex 包含 class 以及他们所依赖的所有 class 都在其内，这样这个脚本就会在打包之前自动分析出启动到主 dex 所涉及的所有代码，保证主 dex 运行正常。</p>
</li>
<li><p>加载 dex 的方式</p>
<p>通过分析 Activity 的启动过程，发现 Activity 是由 ActivityThread 通过 Instrumentation 来启动的，那么是否可以在 Instrumentation 中做一定的手脚呢？通过分析代码 ActivityThread 和 Instrumentation 发现，Instrumentation 有关 Activity 启动相关的方法大概有：execStartActivity、 newActivity 等等，这样就可以在这些方法中添加代码逻辑进行判断这个 class 是否加载了，如果加载则直接启动这个 Activity，如果没有加载完成则启动一个等待的 Activity 显示给用户，然后在这个 Activity 中等待后台第二个 dex 加载完成，完成后自动跳转到用户实际要跳转的 Activity；这样在代码充分解耦合，以及每个业务代码能够做到颗粒化的前提下，就做到第二个 dex 的按需加载了。</p>
</li>
</ul>
<p>美团的这种方式对主 dex 的要求非常高，因为第二个 dex 是等到需要的时候再去加载。重写Instrumentation 的 execStartActivity 方法，hook 跳转 Activity 的总入口做判断，如果当前第二个 dex 还没有加载完成，就弹一个 loading Activity等待加载完成。</p>
<h3 id="综合加载方案"><a href="#综合加载方案" class="headerlink" title="综合加载方案"></a>综合加载方案</h3><p>微信的方案需要将 dex 放于 <code>assets</code> 目录下，在打包的时候太过负责；Facebook 的方案每次进入都是开启一个 nodex 进程，而我们希望节省资源的同时快速打开 App；美团的方案确实很 hack，但是对于项目已经很庞大，耦合度又比较高的情况下并不适合。所以这里尝试结合三个方案，针对自己的项目来进行优化。</p>
<ul>
<li><p>dex 形式</p>
<p>第一，为了能够继续支持 Android 2.x 的机型，我们将每个包的方法数控制在 48000 个，这样最后分出来 dex 包大约在 5M 左右；第二，为了防止 NoClassDefFoundError 的情况，我们找出来启动页、引导页、首页比较在意的一些类，比如 Fragment 等（因为在生成 maindexlist.txt 的时候只会找 Activity 的直接引用，比如首页 Activity 直接引用 AFragemnt，但是 AFragment 的引用并没有去找）。</p>
</li>
<li><p>dex 类分包规则</p>
<p>第一个包放 Application、Android四大组件以及启动页、引导页、首页的直接引用的 Fragment 的引用类，还放了推送消息过来点击 Notification 之后要展示的 Activity 中的 Fragment 的引用类。</p>
<p>Fragment 的引用类是写了一个脚本，输入需要找的类然后将这些引用类写到 multidex.keep 文件中，如果是 debug 的就直接在生成的 jar 里面找，如果是 release 的话就通过 mapping.txt 找，找不到的话再去 jar 里面找，所以在 gradle 打包的过程中我们人为干扰一下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tasks.whenTaskAdded &#123; task -&gt;</span><br><span class="line">    <span class="keyword">if</span> (task.name.startsWith(<span class="string">"create"</span>) &amp;&amp; task.name.endsWith(<span class="string">"MainDexClassList"</span>)) &#123;</span><br><span class="line">        task.doLast &#123;</span><br><span class="line">            <span class="keyword">def</span> flavorAndBuildType = task.name.substring(<span class="string">"create"</span>.length(), task.name.length() - <span class="string">"MainDexClassList"</span>.length())</span><br><span class="line">            autoSplitDex.configure &#123;</span><br><span class="line">                description = flavorAndBuildType</span><br><span class="line">            &#125;</span><br><span class="line">            autoSplitDex.execute()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>详细代码可见：<a href="https://github.com/yydcdut/PhotoNoter/blob/master/app/build.gradle" target="_blank" rel="external">Github — PhotoNoter/gradle</a></p>
</li>
<li><p>加载 dex 的方式</p>
<p>在防止 ANR 方面，我们采用了 Facebook 的思路。但是稍微有一点区别，差别在于我们并不在一开启 App 的时候就去起进程，而是一开启 App 的时候在主进程里面判断是否 dexopt 过没，没有的话再去起另外的进程的 Activity 专门做 dexopt 操作 。一旦拉起了去做 dexopt 的进程，那么让主进程进入一个死循环，一直等到 dexopt 进程结束再结束死循环往下走。那么问题来了，第一，主进程进入死循环会 ANR 吗？第二，如何判断是否 dexopt 过；第三，为了界面友好，dexopt 的进程该怎么做；第四，主进程怎么知道 dexopt 进程结束了，也就是怎么去做进程间通信。</p>
<p>一个一个问题的解决，先第一个：因为当拉起 dexopt 进程之后，我们在 dexopt 进程的 Activity 中进行 <code>MultiDex.install()</code> 操作，此时主进程不再是前台进程了，所以不会 ANR 。</p>
<p>第二个问题：因为第一次启动是什么数据都没有的，那么我们就建立一个 <code>SharedPreference</code> ，启动的时候先去从这里获取数据，如果没有数据那么也就是没有 dexopt 过，如果有数据那么肯定是 dexopt 过的，但是这个 <code>SharedPreference</code> 我们得保证我们的程序只有这个地方可以修改，其他地方不能修改。</p>
<p>第三个问题：因为 App 的启动也是一张图片，所以在 dexopt 的 Activity 的 layout 中，我们就把这张图片设置上去就好了，当关闭 dexopt 的 Activity 的时候，我们得关闭 Activity 的动画。同时为了不让 dexopt 进程发生 ANR ，我们将 <code>MultiDex.install()</code> 过程放在了子线程中进行。</p>
<p>第四个问题：Linux 的进程间通信的方式有很多，Android 中还有 Binder 等，那么我们这里采用哪种方式比较好呢？首先想到的是既然 dexopt 进程结束了自然在主进程的死循环中去判断 dexopt 进程是否存在。但是在实际操作中发现，dexopt 虽然已经退出了，但是进程并没有马上被回收掉，所以这个方法走不通。那么用 Broadcast 广播可以吗？可是可以，但是增加了 Application 的负担，在拉起 dexopt 进程前还得注册一个动态广播，接收到广播之后还得注销掉，所以这个也没有采用。那么最终采用的方式是判断文件是否存在，在拉起 dexopt 进程前在某个安全的地方建立一个临时文件，然后死循环判断这个文件是否存在，在 dexopt 进程结束的时候删除这个临时文件，那么在主进程的死循环中发现此文件不存在了，就直接跳出循环，继续 Application 初始化操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">        <span class="comment">//开启dex进程的话也会进入application</span></span><br><span class="line">        <span class="keyword">if</span> (isDexProcess()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        doInstallBeforeLollipop();</span><br><span class="line">        MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">if</span> (isDexProcess()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//其他初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInstallBeforeLollipop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//满足3个条件，1.第一次安装开启，2.主进程，3.API&lt;21(因为21之后ART的速度比dalvik快接近10倍(毕竟5.0之后的手机性能也要好很多))</span></span><br><span class="line">        <span class="keyword">if</span> (isAppFirstInstall() &amp;&amp; !isDexProcessOrOtherProcesses() &amp;&amp; Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                createTempFile();</span><br><span class="line">                startDexProcess();</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (existTempFile()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        setAppNoteFirstInstall();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>详细代码可见：<a href="https://github.com/yydcdut/PhotoNoter/blob/master/app/src/main/java/com/yydcdut/note/NoteApplication.java" target="_blank" rel="external">Github — PhotoNoter/NoteApplication</a></p>
<p>​</p>
</li>
</ul>
<p>总的来说，这种方式好处在于依赖集非常简单，同时它的集成方式也是非常简单，我们无须去修改与加载无关的代码。但是当没有启动过 App 的时候，被推送全家桶唤醒或者收到了广播，虽然这里都是没有界面的过程，但是运用了这种加载方式的话会弹出 dexopt 进程的 Activity，用户看到会一脸懵比的。</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><h3 id="Too-many-classes-in-–main-dex-list"><a href="#Too-many-classes-in-–main-dex-list" class="headerlink" title="Too many classes in –main-dex-list"></a>Too many classes in –main-dex-list</h3><blockquote>
<p>UNEXPECTED TOP-LEVEL EXCEPTION:com.android.dex.DexException: Too many classes in –main-dex-list, main dex capacity exceeded  at com.android.dx.command.dexer.Main.processAllFiles(Main.java:494)  at com.android.dx.command.dexer.Main.runMultiDex(Main.java:332)  at com.android.dx.command.dexer.Main.run(Main.java:243)  at com.android.dx.command.dexer.Main.main(Main.java:214)  at com.android.dx.command.Main.main(Main.java:106)</p>
</blockquote>
<p>通过 sdk 的 <code>mainDexClasses.rules</code> 知道主 dex 里面会有 Application、Activity、Service、Receiver、Provider、Instrumentation、BackupAgent 和 Annotation。当这些类以及直接引用类比较多的时候，都要塞进主 dex ，就引发了 main dex capacity exceeded build error 。</p>
<p>为了解决这个问题，当执行 <code>Create{flavor}{buildType}ManifestKeepList</code> task 之前将其中的 <code>activity</code> 去掉，之后会发现 /build/intermediates/multi_dex/{flavor}/{buildType}/manifest_keep.txt 文件中已经没有 Activity 相关的类了。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> patchKeepSpecs() &#123;</span><br><span class="line">    <span class="keyword">def</span> taskClass = <span class="string">"com.android.build.gradle.internal.tasks.multidex.CreateManifestKeepList"</span>;</span><br><span class="line">    <span class="keyword">def</span> clazz = <span class="keyword">this</span>.<span class="keyword">class</span>.classLoader.loadClass(taskClass)</span><br><span class="line">    <span class="keyword">def</span> keepSpecsField = clazz.getDeclaredField(<span class="string">"KEEP_SPECS"</span>)</span><br><span class="line">    keepSpecsField.setAccessible(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">def</span> keepSpecsMap = (Map) keepSpecsField.get(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">if</span> (keepSpecsMap.remove(<span class="string">"activity"</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        println <span class="string">"KEEP_SPECS patched: removed 'activity' root"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println <span class="string">"Failed to patch KEEP_SPECS: no 'activity' root found"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">patchKeepSpecs()</span><br></pre></td></tr></table></figure>
<p>详细可以看 <code>CreateManifestKeepList</code> 的源码：<a href="https://github.com/yydcdut/android_tools_base/blob/mm/build-system/gradle-core/src/main/groovy/com/android/build/gradle/internal/tasks/multidex/CreateManifestKeepList.groovy" target="_blank" rel="external">Github – CreateManifestKeepList</a></p>
<h3 id="Too-many-classes-in-–main-dex-list-1"><a href="#Too-many-classes-in-–main-dex-list-1" class="headerlink" title="Too many classes in –main-dex-list"></a>Too many classes in –main-dex-list</h3><p>没错，还是 Too many classes in –main-dex-list 的错误。在美团的自动拆包中讲到：</p>
<blockquote>
<p>实际应用中我们还遇到另外一个比较棘手的问题， 就是Field的过多的问题，Field过多是由我们目前采用的代码组织结构引入的，我们为了方便多业务线、多团队并发协作的情况下开发，我们采用的aar的方式进行开发，并同时在aar依赖链的最底层引入了一个通用业务aar，而这个通用业务aar中包含了很多资源，而ADT14以及更高的版本中对Library资源处理时，Library的R资源不再是static final的了，<a href="http://tools.android.com/tips/non-constant-fields" target="_blank" rel="external">详情请查看google官方说明</a>，这样在最终打包时Library中的R没法做到内联，这样带来了R field过多的情况，导致需要拆分多个Secondary DEX，为了解决这个问题我们采用的是在打包过程中利用脚本把Libray中R field（例如ID、Layout、Drawable等）的引用替换成常量，然后删去Library中R.class中的相应Field。</p>
</blockquote>
<p>同样，hu关于这个问题可以参考这篇大神的文章：<a href="http://jiajixin.cn/2015/10/21/field-65535/" target="_blank" rel="external">当Field邂逅65535</a> 。</p>
<h3 id="DexException-Library-dex-files-are-not-supported-in-multi-dex-mode"><a href="#DexException-Library-dex-files-are-not-supported-in-multi-dex-mode" class="headerlink" title="DexException: Library dex files are not supported in multi-dex mode"></a>DexException: Library dex files are not supported in multi-dex mode</h3><blockquote>
<p>com.android.dex.DexException: Library dex files are not supported in multi-dex mode<br>​ at com.android.dx.command.dexer.Main.runMultiDex(Main.java:322)<br>​ at com.android.dx.command.dexer.Main.run(Main.java:228)<br>​ at com.android.dx.command.dexer.Main.main(Main.java:199)<br>​ at com.android.dx.command.Main.main(Main.java:103)</p>
</blockquote>
<p>解决：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    dexOptions &#123;</span><br><span class="line">        preDexLibraries = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="OutOfMemoryError-Java-heap-space"><a href="#OutOfMemoryError-Java-heap-space" class="headerlink" title="OutOfMemoryError: Java heap space"></a>OutOfMemoryError: Java heap space</h3><blockquote>
<p>UNEXPECTED TOP-LEVEL ERROR:<br>​  java.lang.OutOfMemoryError: Java heap space</p>
</blockquote>
<p>解决：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    dexOptions &#123;</span><br><span class="line">        javaMaxHeapSize <span class="string">"2g"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MultiDex-install-Context"><a href="#MultiDex-install-Context" class="headerlink" title="MultiDex.install(Context)"></a>MultiDex.install(Context)</h2><p>回过头来我们看看 <code>MultiDex.install()</code> 做了一些什么：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//secondary-dexes的位置：/code_cache/secondary-dexes</span></span><br><span class="line">        SECONDARY_FOLDER_NAME = <span class="string">"code_cache"</span> + File.separator + <span class="string">"secondary-dexes"</span>;</span><br><span class="line">        installedApk = <span class="keyword">new</span> HashSet();</span><br><span class="line">        IS_VM_MULTIDEX_CAPABLE = isVMMultidexCapable(System.getProperty(<span class="string">"java.vm.version"</span>));</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MultiDex"</span>, <span class="string">"install"</span>);</span><br><span class="line">        <span class="keyword">if</span>(IS_VM_MULTIDEX_CAPABLE) &#123;<span class="comment">//针对ART</span></span><br><span class="line">            Log.i(<span class="string">"MultiDex"</span>, <span class="string">"VM has multidex support, MultiDex support library is disabled."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(VERSION.SDK_INT &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Multi dex installation failed. SDK "</span> + VERSION.SDK_INT + <span class="string">" is unsupported. Min SDK version is "</span> + <span class="number">4</span> + <span class="string">"."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ApplicationInfo e = getApplicationInfo(context);</span><br><span class="line">                <span class="keyword">if</span>(e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Set var2 = installedApk;</span><br><span class="line">                <span class="keyword">synchronized</span>(installedApk) &#123;</span><br><span class="line">                    String apkPath = e.sourceDir;</span><br><span class="line">                    <span class="comment">//installedApk的类型是：Set&lt;String&gt;，如果这个apk已经安装，则不重复安装   </span></span><br><span class="line">                    <span class="keyword">if</span>(installedApk.contains(apkPath)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    installedApk.add(apkPath);</span><br><span class="line">                    <span class="keyword">if</span>(VERSION.SDK_INT &gt; <span class="number">20</span>) &#123;</span><br><span class="line">                        Log.w(<span class="string">"MultiDex"</span>, <span class="string">"MultiDex is not guaranteed to work in SDK version "</span> + VERSION.SDK_INT + <span class="string">": SDK version higher than "</span> + <span class="number">20</span> + <span class="string">" should be backed by "</span> + <span class="string">"runtime with built-in multidex capabilty but it\'s not the "</span> + <span class="string">"case here: java.vm.version=\""</span> + System.getProperty(<span class="string">"java.vm.version"</span>) + <span class="string">"\""</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">          <span class="comment">//类加载器，PathClassLoader</span></span><br><span class="line">                    ClassLoader loader;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        loader = context.getClassLoader();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException var9) &#123;</span><br><span class="line">                        Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Failure while trying to obtain Context class loader. Must be running in test mode. Skip patching."</span>, var9);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(loader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Log.e(<span class="string">"MultiDex"</span>, <span class="string">"Context class loader is null. Must be running in test mode. Skip patching."</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//删除以前的dex</span></span><br><span class="line">                        clearOldDexDir(context);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">                        Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Something went wrong when trying to clear old MultiDex extraction, continuing without cleaning."</span>, var8);</span><br><span class="line">                    &#125;</span><br><span class="line">          <span class="comment">//dex将会输出到/data/data/&#123;packagename&#125;/code_cache/secondary-dexes目录。  </span></span><br><span class="line">                    File dexDir = <span class="keyword">new</span> File(e.dataDir, SECONDARY_FOLDER_NAME);</span><br><span class="line">                    List files = MultiDexExtractor.load(context, e, dexDir, <span class="keyword">false</span>);</span><br><span class="line">                  <span class="comment">//blablabla......</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                Log.e(<span class="string">"MultiDex"</span>, <span class="string">"Multidex installation failure"</span>, var11);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Multi dex installation failed ("</span> + var11.getMessage() + <span class="string">")."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Log.i(<span class="string">"MultiDex"</span>, <span class="string">"install done"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前都是准备工作，然后进入 <code>MultiDexExtractor.load()</code> 看一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDexExtractor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> List&lt;File&gt; <span class="title">load</span><span class="params">(Context context, ApplicationInfo applicationInfo, File dexDir, <span class="keyword">boolean</span> forceReload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//dexDir地址是/data/data/&#123;packagename&#125;/code_cache/secondary-dexes</span></span><br><span class="line">        Log.i(<span class="string">"MultiDex"</span>, <span class="string">"MultiDexExtractor.load("</span> + applicationInfo.sourceDir + <span class="string">", "</span> + forceReload + <span class="string">")"</span>);</span><br><span class="line">        <span class="comment">//applicationInfo.sourceDir地址是/data/app/&#123;packagename&#125;-1.apk</span></span><br><span class="line">        File sourceApk = <span class="keyword">new</span> File(applicationInfo.sourceDir);</span><br><span class="line">        <span class="comment">//Crc校验</span></span><br><span class="line">        <span class="keyword">long</span> currentCrc = getZipCrc(sourceApk);</span><br><span class="line">        List files;</span><br><span class="line">        <span class="comment">//isModified()判断apk是否被修改过</span></span><br><span class="line">        <span class="keyword">if</span>(!forceReload &amp;&amp; !isModified(context, sourceApk, currentCrc)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 加载已经存在的文件，如果有的文件不存在，或者不是zip文件，则会抛出异常  </span></span><br><span class="line">                files = loadExistingExtractions(context, sourceApk, dexDir);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var9) &#123;</span><br><span class="line">                Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Failed to reload existing extracted secondary dex files, falling back to fresh extraction"</span>, var9);</span><br><span class="line">                <span class="comment">// 从apk中提取出多dex，然后将这些dex逐个打包为zip文件，最终返回提取出来的zip文件列表</span></span><br><span class="line">                files = performExtractions(sourceApk, dexDir);</span><br><span class="line">        <span class="comment">// getTimeStamp方法中调用的是sourceApk.lastModified()方法  </span></span><br><span class="line">                <span class="comment">// putStoredApkInfo方法存储apk的信息：时间戳、crc值、apk中dex的总个数  </span></span><br><span class="line">                putStoredApkInfo(context, getTimeStamp(sourceApk), currentCrc, files.size() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.i(<span class="string">"MultiDex"</span>, <span class="string">"Detected that extraction must be performed."</span>);</span><br><span class="line">            files = performExtractions(sourceApk, dexDir);</span><br><span class="line">            putStoredApkInfo(context, getTimeStamp(sourceApk), currentCrc, files.size() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.i(<span class="string">"MultiDex"</span>, <span class="string">"load found "</span> + files.size() + <span class="string">" secondary dex files"</span>);</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isModified</span><span class="params">(Context context, File archive, <span class="keyword">long</span> currentCrc)</span> </span>&#123;</span><br><span class="line">        SharedPreferences prefs = getMultiDexPreferences(context);</span><br><span class="line">        <span class="keyword">return</span> prefs.getLong(<span class="string">"timestamp"</span>, -<span class="number">1L</span>) != getTimeStamp(archive) || prefs.getLong(<span class="string">"crc"</span>, -<span class="number">1L</span>) != currentCrc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看一下 <code>performExtractions()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDexExtractor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title">performExtractions</span><span class="params">(File sourceApk, File dexDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//extractedFilePrefix的内容是&#123;packagename&#125;-1.apk.classes</span></span><br><span class="line">        String extractedFilePrefix = sourceApk.getName() + <span class="string">".classes"</span>;</span><br><span class="line">        <span class="comment">//准备文件夹</span></span><br><span class="line">        prepareDexDir(dexDir, extractedFilePrefix);</span><br><span class="line">        ArrayList files = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ZipFile apk = <span class="keyword">new</span> ZipFile(sourceApk);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> e = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(ZipEntry dexFile = apk.getEntry(<span class="string">"classes"</span> + e + <span class="string">".dex"</span>); dexFile != <span class="keyword">null</span>; dexFile = apk.getEntry(<span class="string">"classes"</span> + e + <span class="string">".dex"</span>)) &#123;<span class="comment">//那第e个dex</span></span><br><span class="line">                <span class="comment">//&#123;packagename&#125;-1.apk.classes2.zip</span></span><br><span class="line">                String fileName = extractedFilePrefix + e + <span class="string">".zip"</span>;</span><br><span class="line">                <span class="comment">//extractedFile地址是/data/data/&#123;packagename&#125;/code_cache/secondary-dexes/com.yydcdut.note-1.apk.classes2.zip</span></span><br><span class="line">                File extractedFile = <span class="keyword">new</span> File(dexDir, fileName);</span><br><span class="line">                files.add(extractedFile);</span><br><span class="line">                Log.i(<span class="string">"MultiDex"</span>, <span class="string">"Extraction is needed for file "</span> + extractedFile);</span><br><span class="line">                <span class="keyword">int</span> numAttempts = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">boolean</span> isExtractionSuccessful = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(numAttempts &lt; <span class="number">3</span> &amp;&amp; !isExtractionSuccessful) &#123;</span><br><span class="line">                    ++numAttempts;</span><br><span class="line">                    <span class="comment">//提取apk中的dex文件，然后打包成一个zip文</span></span><br><span class="line">                    extract(apk, dexFile, extractedFile, extractedFilePrefix);</span><br><span class="line">                    <span class="comment">//验证提取的文件是否是一个zip文件。  </span></span><br><span class="line">                    isExtractionSuccessful = verifyZipFile(extractedFile);</span><br><span class="line">                    Log.i(<span class="string">"MultiDex"</span>, <span class="string">"Extraction "</span> + (isExtractionSuccessful?<span class="string">"success"</span>:<span class="string">"failed"</span>) + <span class="string">" - length "</span> + extractedFile.getAbsolutePath() + <span class="string">": "</span> + extractedFile.length());</span><br><span class="line">                    <span class="keyword">if</span>(!isExtractionSuccessful) &#123;</span><br><span class="line">                        extractedFile.delete();</span><br><span class="line">                        <span class="keyword">if</span>(extractedFile.exists()) &#123;</span><br><span class="line">                            Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Failed to delete corrupted secondary dex \'"</span> + extractedFile.getPath() + <span class="string">"\'"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(!isExtractionSuccessful) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Could not create zip file "</span> + extractedFile.getAbsolutePath() + <span class="string">" for secondary dex ("</span> + e + <span class="string">")"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ++e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                apk.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var16) &#123;</span><br><span class="line">                Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Failed to close resource"</span>, var16);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareDexDir</span><span class="params">(File dexDir, <span class="keyword">final</span> String extractedFilePrefix)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//dexDir的地址是：/data/data/&#123;packagename&#125;/code_cache/secondary-dexes</span></span><br><span class="line">        <span class="comment">//extractedFilePrefix的内容是data/app/&#123;packagename&#125;-1.apk.classes</span></span><br><span class="line">        File cache = dexDir.getParentFile();</span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        mkdirChecked(cache);</span><br><span class="line">        mkdirChecked(dexDir);</span><br><span class="line">        FileFilter filter = <span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> !pathname.getName().startsWith(extractedFilePrefix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        File[] files = dexDir.listFiles(filter);</span><br><span class="line">        <span class="keyword">if</span>(files == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Failed to list secondary dex dir content ("</span> + dexDir.getPath() + <span class="string">")."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            File[] arr$ = files;</span><br><span class="line">            <span class="keyword">int</span> len$ = files.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i$ = <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">                File oldFile = arr$[i$];</span><br><span class="line">                Log.i(<span class="string">"MultiDex"</span>, <span class="string">"Trying to delete old file "</span> + oldFile.getPath() + <span class="string">" of size "</span> + oldFile.length());</span><br><span class="line">                <span class="keyword">if</span>(!oldFile.delete()) &#123;</span><br><span class="line">                    Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Failed to delete old file "</span> + oldFile.getPath());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.i(<span class="string">"MultiDex"</span>, <span class="string">"Deleted old file "</span> + oldFile.getPath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自习看一下 <code>extract()</code> 做的事：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDexExtractor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">extract</span><span class="params">(ZipFile apk, ZipEntry dexFile, File extractTo, String extractedFilePrefix)</span> <span class="keyword">throws</span> IOException, FileNotFoundException </span>&#123;</span><br><span class="line">        InputStream in = apk.getInputStream(dexFile);</span><br><span class="line">        ZipOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建临时文件，地址/data/data/&#123;packagename&#125;/code_cache/secondary-dexes/&#123;packagename&#125;-1.apk.classes941893003.zip</span></span><br><span class="line">        File tmp = File.createTempFile(extractedFilePrefix, <span class="string">".zip"</span>, extractTo.getParentFile());</span><br><span class="line">        Log.i(<span class="string">"MultiDex"</span>, <span class="string">"Extracting "</span> + tmp.getPath());</span><br><span class="line">    <span class="comment">//变zip</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> ZipOutputStream(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(tmp)));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ZipEntry classesDex = <span class="keyword">new</span> ZipEntry(<span class="string">"classes.dex"</span>);</span><br><span class="line">                classesDex.setTime(dexFile.getTime());</span><br><span class="line">                out.putNextEntry(classesDex);</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16384</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> length = in.read(buffer); length != -<span class="number">1</span>; length = in.read(buffer)) &#123;</span><br><span class="line">                    out.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                out.closeEntry();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">      <span class="comment">//extractTo的地址是 /data/data/&#123;packagename&#125;/code_cache/secondary-dexes/&#123;packagename&#125;-1.apk.classes2.zip</span></span><br><span class="line">            Log.i(<span class="string">"MultiDex"</span>, <span class="string">"Renaming to "</span> + extractTo.getPath());</span><br><span class="line">            <span class="comment">//重明明</span></span><br><span class="line">            <span class="keyword">if</span>(!tmp.renameTo(extractTo)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to rename \""</span> + tmp.getAbsolutePath() + <span class="string">"\" to \""</span> + extractTo.getAbsolutePath() + <span class="string">"\""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeQuietly(in);</span><br><span class="line">            tmp.delete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行完这里，<code>List files = MultiDexExtractor.load(context, e, dexDir, false);</code> 也就执行完了，继续看 <code>MultiDex.install()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"MultiDex"</span>, <span class="string">"install"</span>);</span><br><span class="line">        <span class="keyword">if</span>(IS_VM_MULTIDEX_CAPABLE) &#123;<span class="comment">//针对ART</span></span><br><span class="line">            Log.i(<span class="string">"MultiDex"</span>, <span class="string">"VM has multidex support, MultiDex support library is disabled."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(VERSION.SDK_INT &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Multi dex installation failed. SDK "</span> + VERSION.SDK_INT + <span class="string">" is unsupported. Min SDK version is "</span> + <span class="number">4</span> + <span class="string">"."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">//blablabla......</span></span><br><span class="line">          <span class="comment">//dex将会输出到/data/data/&#123;packagename&#125;/code_cache/secondary-dexes目录。  </span></span><br><span class="line">                    File dexDir = <span class="keyword">new</span> File(e.dataDir, SECONDARY_FOLDER_NAME);</span><br><span class="line">                    List files = MultiDexExtractor.load(context, e, dexDir, <span class="keyword">false</span>);</span><br><span class="line">          <span class="comment">//校验这些zip文件是否合法  </span></span><br><span class="line">                    <span class="keyword">if</span>(checkValidZipFiles(files)) &#123;</span><br><span class="line">                        <span class="comment">//安装提取出来的zip文件  </span></span><br><span class="line">                        installSecondaryDexes(loader, dexDir, files);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">//不合法的情况下强制load一遍</span></span><br><span class="line">                        Log.w(<span class="string">"MultiDex"</span>, <span class="string">"Files were not valid zip files.  Forcing a reload."</span>);</span><br><span class="line">                         <span class="comment">//最后一个参数是true，代表强制加载</span></span><br><span class="line">                        files = MultiDexExtractor.load(context, e, dexDir, <span class="keyword">true</span>);</span><br><span class="line">                        <span class="comment">//还是不合法的就抛异常</span></span><br><span class="line">                        <span class="keyword">if</span>(!checkValidZipFiles(files)) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Zip files were not valid."</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">            <span class="comment">//终于合法了，安装zip文件</span></span><br><span class="line">                        installSecondaryDexes(loader, dexDir, files);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                Log.e(<span class="string">"MultiDex"</span>, <span class="string">"Multidex installation failure"</span>, var11);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Multi dex installation failed ("</span> + var11.getMessage() + <span class="string">")."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Log.i(<span class="string">"MultiDex"</span>, <span class="string">"install done"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>installSecondaryDexes(loader, dexDir, files)</code> 比较重要，在这个方法里面进行将第二个 dex 的代码加载到程序中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDex</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">installSecondaryDexes</span><span class="params">(ClassLoader loader, File dexDir, List&lt;File&gt; files)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException, NoSuchFieldException, InvocationTargetException, NoSuchMethodException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//分版本加载</span></span><br><span class="line">        <span class="keyword">if</span>(!files.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(VERSION.SDK_INT &gt;= <span class="number">19</span>) &#123;</span><br><span class="line">                MultiDex.V19.install(loader, files, dexDir);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(VERSION.SDK_INT &gt;= <span class="number">14</span>) &#123;</span><br><span class="line">                MultiDex.V14.install(loader, files, dexDir);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                MultiDex.V4.install(loader, files);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看看 <code>MultiDex.V14.install(loader, files, dexDir);</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">V14</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">(ClassLoader loader, List&lt;File&gt; additionalClassPathEntries, File optimizedDirectory)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException, NoSuchFieldException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">            <span class="comment">//optimizedDirectory地址是/data/data/&#123;packagename&#125;/code_cache/secondary-dexes</span></span><br><span class="line">            <span class="comment">//反射找到PathClassLoader的pathList属性，是DexPathList类，这个属性是父类 BaseDexClassLoader</span></span><br><span class="line">            Field pathListField = MultiDex.findField(loader, <span class="string">"pathList"</span>);</span><br><span class="line">            Object dexPathList = pathListField.get(loader);</span><br><span class="line">            <span class="comment">//dexElements为dexPathList的一个属性，是Element数组</span></span><br><span class="line">            MultiDex.expandFieldArray(dexPathList, <span class="string">"dexElements"</span>, makeDexElements(dexPathList, <span class="keyword">new</span> ArrayList(additionalClassPathEntries), optimizedDirectory));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object[] makeDexElements(Object dexPathList, ArrayList&lt;File&gt; files, File optimizedDirectory) <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException &#123;</span><br><span class="line">          <span class="comment">//反射拿到dexPathList的方法makeDexElements，private static Element[] makeDexElements(ArrayList&lt;File&gt; files, File optimizedDirectory, ArrayList&lt;IOException&gt; suppressedExceptions)</span></span><br><span class="line">            Method makeDexElements = MultiDex.findMethod(dexPathList, <span class="string">"makeDexElements"</span>, <span class="keyword">new</span> Class[]&#123;ArrayList.class, File.class&#125;);</span><br><span class="line">            <span class="comment">//调用方法，该方法的作用是通过传入的files去加载jar或者zip，封装成DexFile，在封装成Element返回</span></span><br><span class="line">            <span class="keyword">return</span> (Object[])((Object[])makeDexElements.invoke(dexPathList, <span class="keyword">new</span> Object[]&#123;files, optimizedDirectory&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">expandFieldArray</span><span class="params">(Object instance, String fieldName, Object[] extraElements)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//找到dexElements这个属性</span></span><br><span class="line">        Field jlrField = findField(instance, fieldName);</span><br><span class="line">        <span class="comment">//classloader中原始的dexElements</span></span><br><span class="line">        Object[] original = (Object[])((Object[])jlrField.get(instance));</span><br><span class="line">        <span class="comment">//new一个新的出来</span></span><br><span class="line">        Object[] combined = (Object[])((Object[])Array.newInstance(original.getClass().getComponentType(), original.length + extraElements.length));</span><br><span class="line">        <span class="comment">//将原有的复制到新的里面去</span></span><br><span class="line">        System.arraycopy(original, <span class="number">0</span>, combined, <span class="number">0</span>, original.length);</span><br><span class="line">        <span class="comment">//将第二个dex的复制到新的里面去</span></span><br><span class="line">        System.arraycopy(extraElements, <span class="number">0</span>, combined, original.length, extraElements.length);</span><br><span class="line">        <span class="comment">//再塞回去</span></span><br><span class="line">        jlrField.set(instance, combined);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，<code>MultiDex.install()</code> 分析完了，这里只讲一下V14的，在 Java 层的主要流程将第二个 dex 取出（现在只考虑两个 dex 的情况），整成 Zip 形式的，然后通过反射将 zip 的地址等参数封装起来再塞给 PathClassLoader 。为什么是 Zip ，因为在 BaseDexClassLoader 中 <code>DexFile.loadDex()</code> 只接受 jar 或者 zip。</p>
<p>更多的可以参考：Github – <a href="https://github.com/yydcdut/android_libcore/blob/kitkat/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java" target="_blank" rel="external">BaseDexClassLoader</a> <a href="https://github.com/yydcdut/android_libcore/blob/kitkat/dalvik/src/main/java/dalvik/system/DexFile.java" target="_blank" rel="external">DexFile</a> <a href="https://github.com/yydcdut/android_libcore/blob/kitkat/dalvik/src/main/java/dalvik/system/DexPathList.java" target="_blank" rel="external">DexPathList</a></p>
<h2 id="Jack"><a href="#Jack" class="headerlink" title="Jack"></a>Jack</h2><p>通过 <a href="http://tools.android.com/tech-docs/jackandjill" target="_blank" rel="external">Experimental New Android Tool Chain - Jack and Jill</a> 查看到 build tools 21.1.1 开始就支持 <code>Jack</code> 了。</p>
<p>那么我们直接使用文章给出的 jack 在 gradle 中的用法使用编译工程吧：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.1.0-alpha3'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">android &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    buildToolsVersion <span class="string">'21.1.2'</span></span><br><span class="line">  	minSdkVersion <span class="number">21</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">    <span class="comment">// Enable the experimental Jack build tools.</span></span><br><span class="line">    useJack = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  compileOptions &#123;</span><br><span class="line">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在实际编译过程中出现了问题：</p>
<blockquote>
<p>Error:Execution failed for task ‘:app:jillDebugPackagedLibraries’.<br> Jack requires Build Tools 24.0.0 or later</p>
</blockquote>
<p>那么把 build tool 更新到 <code>24.0.0rc1</code> 再试试吧：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildToolsVersion <span class="string">'24.0.0rc1'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新编译，然后当 gradle 运行到 <code>compileDebugJavaWithJack</code> 的时候：</p>
<blockquote>
<p>ERROR: Dex writing phase: classes.dex has too many IDs. Try using multi-dex<br>com.android.jack.api.v01.CompilationException: Dex writing phase: classes.dex has too many IDs. Try using multi-dex<br>​    at com.android.jack.api.v01.impl.Api01ConfigImpl$Api01CompilationTaskImpl.run(Api01ConfigImpl.java:113)<br>​    at com.android.builder.core.AndroidBuilder.convertByteCodeUsingJackApis(AndroidBuilder.java:1904)<br>​    at com.android.build.gradle.tasks.JackTask.doMinification(JackTask.java:148)<br>​    at com.android.build.gradle.tasks.JackTask.access$000(JackTask.java:73)<br>​    at com.android.build.gradle.tasks.JackTask$1.run(JackTask.java:112)<br>​    at com.android.builder.tasks.Job.runTask(Job.java:51)<br>​    at com.android.build.gradle.tasks.SimpleWorkQueue$EmptyThreadContext.runTask(SimpleWorkQueue.java:41)<br>​    at com.android.builder.tasks.WorkQueue.run(WorkQueue.java:223)<br>​    at java.lang.Thread.run(Thread.java:745)<br>Caused by: com.android.jack.JackAbortException: Dex writing phase: classes.dex has too many IDs. Try using multi-dex<br>​    at com.android.jack.backend.dex.DexFileWriter.run(DexFileWriter.java:90)<br>​    at com.android.jack.backend.dex.DexFileWriter.run(DexFileWriter.java:41)<br>​    at com.android.sched.scheduler.ScheduleInstance.runWithLog(ScheduleInstance.java:161)<br>​    at com.android.sched.scheduler.MultiWorkersScheduleInstance$SequentialTask.process(MultiWorkersScheduleInstance.java:442)<br>​    at com.android.sched.scheduler.MultiWorkersScheduleInstance$Worker.run(MultiWorkersScheduleInstance.java:162)<br>Caused by: com.android.jack.backend.dex.DexWritingException: Dex writing phase: classes.dex has too many IDs. Try using multi-dex<br>​    at com.android.jack.backend.dex.SingleDexWritingTool.write(SingleDexWritingTool.java:64)<br>​    at com.android.jack.backend.dex.DexFileWriter.run(DexFileWriter.java:87)<br>​    … 4 more<br>Caused by: com.android.jack.backend.dex.SingleDexOverflowException: classes.dex has too many IDs. Try using multi-dex<br>​    … 6 more<br>Caused by: com.android.jack.tools.merger.MethodIdOverflowException: Method ID overflow when trying to merge dex files<br>​    at com.android.jack.tools.merger.ConstantManager.addDexFile(ConstantManager.java:177)<br>​    at com.android.jack.tools.merger.JackMerger.addDexFile(JackMerger.java:69)<br>​    at com.android.jack.backend.dex.DexWritingTool.mergeDex(DexWritingTool.java:107)<br>​    at com.android.jack.backend.dex.SingleDexWritingTool.write(SingleDexWritingTool.java:62)<br>​    … 5 more</p>
</blockquote>
<p>还是得使用 multidex 。jack 不支持 <code>instantRun</code> ，同样 gradle 是 <code>2.1.0-alpha3</code> ，这里就需要 multidex 了。 65536 的根本问题并不在于  jack 身上，而在于指令集身上，jack 也是采用的 multidex 来解决这个问题的。</p>
<p>更多 jack 的资料：</p>
<ul>
<li><a href="http://tools.android.com/tech-docs/jackandjill" target="_blank" rel="external">Experimental New Android Tool Chain - Jack and Jill</a></li>
<li><a href="https://source.android.com/source/jack.html" target="_blank" rel="external">Jack (Java Android Compiler Kit)</a></li>
<li><a href="http://developer.android.com/intl/zh-tw/preview/j8-jack.html" target="_blank" rel="external">Java 8 Language Features</a></li>
<li><a href="https://www.guardsquare.com/blog/the_upcoming_jack_and_jill_compilers_in_android" target="_blank" rel="external">The upcoming Jack &amp; Jill compilers in Android</a></li>
<li><a href="http://www.i-programmer.info/news/193-android/8072-the-new-android-compilers-meet-jack-and-jill.html" target="_blank" rel="external">The New <strong>Android</strong> Compilers - Meet <strong>Jack</strong> And Jill</a></li>
<li><a href="android-developers.blogspot.co.uk/2014/12/hello-world-meet-our-new-experimental.html">Hello World, meet our new experimental toolchain, Jack and Jill | Android Developers Blog</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团Android DEX自动拆包及动态加载简介</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207151651&amp;idx=1&amp;sn=9eab282711f4eb2b4daf2fbae5a5ca9a&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd" target="_blank" rel="external">Android拆分与加载Dex的多种方案对比</a></li>
<li><a href="http://blog.zongwu233.com/the-touble-of-multidex" target="_blank" rel="external">其实你不知道MultiDex到底有多坑</a></li>
<li><a href="http://blog.osom.info/2014/12/too-many-methods-in-main-dex.html" target="_blank" rel="external">Alex Lipov @ osom.info: Too many methods in main-dex?</a></li>
<li><a href="https://github.com/casidiablo/multidex" target="_blank" rel="external">casidiablo/multidex</a></li>
<li><a href="http://jayfeng.com/2016/03/10/%E7%94%B1Android-65K%E6%96%B9%E6%B3%95%E6%95%B0%E9%99%90%E5%88%B6%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="external">由Android 65K方法数限制引发的思考</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Dex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Volley源码解析]]></title>
      <url>/2016/03/13/volley-code-analyse/</url>
      <content type="html"><![CDATA[<p>在2013年 Google I/O 大会上推出了一个网络通信框架 —— Volley ，基于 Android 系统中主要提供了两种方式来进行 HTTP 通信，HttpURLConnection 和 HttpClient (Android M 之后已经删除了 HttpClient )。</p>
<a id="more"></a>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Volley的用法非常简单。</p>
<h3 id="StringRequest"><a href="#StringRequest" class="headerlink" title="StringRequest"></a>StringRequest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestQueue queue = Volley.newRequestQueue(context);</span><br></pre></td></tr></table></figure>
<p>这里拿到的 <code>RequestQueue</code> 是一个请求队列对象，它可以缓存所有的HTTP请求，然后按照一定的算法并发地发出这些请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(<span class="string">"http://yydcdut.com"</span>,  </span><br><span class="line">                        <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;  </span><br><span class="line">                            <span class="annotation">@Override</span>  </span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span> </span>&#123;   </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;  </span><br><span class="line">                            <span class="annotation">@Override</span>  </span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;  </span><br><span class="line">                            &#125;  </span><br><span class="line">                        &#125;);</span><br></pre></td></tr></table></figure>
<p><code>StringRequest</code> 的构造函数需要传入三个参数，第一个参数就是目标服务器的 <strong>URL 地址</strong>，第二个参数是<strong>服务器响应成功的回调</strong>，第三个参数是<strong>服务器响应失败的回调</strong>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.add(stringRequest);</span><br></pre></td></tr></table></figure>
<p>将这个 <code>StringRequest</code> 对象添加到 <code>RequestQueue</code>。</p>
<p>同时注意，要访问网络需要访问网络的权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果还设置了缓存到 SD 卡上的话，还要加 SD 卡的读写权限。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>创建一个RequestQueue对象。</li>
<li>创建一个StringRequest对象。</li>
<li>将StringRequest对象添加到RequestQueue里面。</li>
</ol>
<h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(Method.POST, url,  listener, errorListener) &#123;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, String&gt; getParams() <span class="keyword">throws</span> AuthFailureError &#123;  </span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();  </span><br><span class="line">        map.put(<span class="string">"params1"</span>, <span class="string">"value1"</span>);  </span><br><span class="line">        map.put(<span class="string">"params2"</span>, <span class="string">"value2"</span>);  </span><br><span class="line">        <span class="keyword">return</span> map;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Http-Header"><a href="#Http-Header" class="headerlink" title="Http Header"></a>Http Header</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(Method.POST, url,  listener, errorListener) &#123;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">     <span class="keyword">public</span> Map&lt;String, String&gt; getHeaders() <span class="keyword">throws</span> AuthFailureError &#123;  </span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();  </span><br><span class="line">        map.put(<span class="string">"header1"</span>, <span class="string">"value1"</span>);  </span><br><span class="line">        map.put(<span class="string">"header2"</span>, <span class="string">"value2"</span>);  </span><br><span class="line">        <span class="keyword">return</span> map;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="JsonRequest"><a href="#JsonRequest" class="headerlink" title="JsonRequest"></a>JsonRequest</h3><p>类似于 <code>StringRequest</code> ，<code>JsonRequest</code> 也是继承自 <code>Request</code> ，但是一个抽象类，有两个直接的子类，<code>JsonObjectRequest</code> 和 <code>JsonArrayRequest</code> 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">JsonObjectRequest jsonObjectRequest = <span class="keyword">new</span> JsonObjectRequest(<span class="string">"url"</span>, <span class="keyword">null</span>,  </span><br><span class="line">        <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;    </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="ImageRequest"><a href="#ImageRequest" class="headerlink" title="ImageRequest"></a>ImageRequest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ImageRequest imageRequest = <span class="keyword">new</span> ImageRequest(<span class="string">"http://yydcdut.com/img/avatar.png"</span>,  </span><br><span class="line">        <span class="keyword">new</span> Response.Listener&lt;Bitmap&gt;() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap response)</span> </span>&#123;  </span><br><span class="line">                imageView.setImageBitmap(response);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">0</span>, Config.RGB_565, <span class="keyword">new</span> Response.ErrorListener() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;  </span><br><span class="line">                imageView.setImageResource(R.drawable.default_image);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p><code>ImageRequest</code> 的构造函数接收六个参数，第一个参数就是<strong>图片的URL地址</strong>。第二个参数是<strong>图片请求成功的回调</strong>。第三第四个参数分别用于指定<strong>允许图片最大的宽度和高度</strong>，如果指定的网络图片的宽度或高度大于这里的最大值，则会对图片进行压缩，指定成0的话就表示不管图片有多大，都不会进行压缩。第五个参数用于指定图片的颜色属性，<code>Bitmap.Config</code> 下的几个常量都可以在这里使用。第六个参数是<strong>图片请求失败的回调</strong>。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码的讲解还是按照上文<code>使用</code>的流程来分析。</p>
<h3 id="RequestQueue"><a href="#RequestQueue" class="headerlink" title="RequestQueue"></a>RequestQueue</h3><p>从 <code>Volley.newRequestQueue(context);</code> 开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CACHE_DIR = <span class="string">"volley"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestQueue <span class="title">newRequestQueue</span><span class="params">(Context context, HttpStack stack)</span> </span>&#123;</span><br><span class="line">	File cacheDir = <span class="keyword">new</span> File(context.getCacheDir(), DEFAULT_CACHE_DIR);</span><br><span class="line">  	<span class="comment">//Volley 会将请求头中的 User-Agent 字段设置为 App 的 &#123;packageName&#125;/&#123;versionCode&#125;，如果异常则使用 "volley/0"</span></span><br><span class="line">	String userAgent = <span class="string">"volley/0"</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		String packageName = context.getPackageName();</span><br><span class="line">        PackageInfo info = context.getPackageManager().getPackageInfo(packageName, <span class="number">0</span>);</span><br><span class="line">        userAgent = packageName + <span class="string">"/"</span> + info.versionCode;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">if</span> (stack == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">			stack = <span class="keyword">new</span> HurlStack();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			stack = <span class="keyword">new</span> HttpClientStack(AndroidHttpClient.newInstance(userAgent));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	Network network = <span class="keyword">new</span> BasicNetwork(stack);</span><br><span class="line"></span><br><span class="line">	RequestQueue queue = <span class="keyword">new</span> RequestQueue(<span class="keyword">new</span> DiskBasedCache(cacheDir), network);</span><br><span class="line">	queue.start();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestQueue <span class="title">newRequestQueue</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> newRequestQueue(context, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在判断 <code>HttpStack</code> 是否为空的时候进行了 Android 版本的判断，如果大于等于9，则使用 <code>HurlStack</code> ，否则使用 <code>HttpClientStack</code> ，两者均继承于接口 <code>HttpStack</code> ，但 <code>HurlStack</code> 的实现是基于 <code>HttpUrlConnection</code> 的，<code>HttpClientStack</code> 的实现是基于 <code>HttpClient</code> 的，之所以在这里进行了版本判断，是因为在小于9的 Android 版本中，<code>HttpUrlConnection</code> 存在着一些 bug，比如对一个可读的 <code>InputStream</code> 调用 <code>close()</code> 方法时，就有可能会导致连接池失效了。但是在 Android 2.3 版本之后，<code>HttpUrlConnection</code> 进行了很大的修正和优化，比如默认 GZip 、Https 方面的改进、增加缓存机制等。</p>
<p>创建好了 <code>HttpStack</code> 之后，接下来又创建了一个 <code>Network</code> 对象，它是用于根据传入的 <code>HttpStack</code> 对象来处理网络请求的，紧接着 new 出一个 <code>RequestQueue</code> 对象，并调用它的 <code>start()</code>方法进行启动，然后将 <code>RequestQueue</code> 返回。</p>
<p>那么分别来看看 <code>BasicNetwork</code> 、 <code>RequestQueue</code> 、和 <code>queue.start();</code> 做了那些事：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicNetwork</span> <span class="keyword">implements</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_POOL_SIZE = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> HttpStack mHttpStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ByteArrayPool mPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicNetwork</span><span class="params">(HttpStack httpStack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(httpStack, <span class="keyword">new</span> ByteArrayPool(DEFAULT_POOL_SIZE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasicNetwork</span><span class="params">(HttpStack httpStack, ByteArrayPool pool)</span> </span>&#123;</span><br><span class="line">        mHttpStack = httpStack;</span><br><span class="line">        mPool = pool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>BasicNetwork</code> 中有一个 byte[] 复用池。目的在于不要频繁创建生命周期比较短的 byte[] 对象会使堆频繁分配位置以及在 Android 垃圾回收导致的延时。</p>
<blockquote>
<p>Simply creating and disposing such buffers in the conventional manner can considerable heap churn and garbage collection delays on Android, which lacks good management of  short-lived heap objects. It may be advantageous to trade off some memory in the form of a permanently allocated pool of buffers in order to gain heap performance improvements.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Number of network request dispatcher threads to start. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_NETWORK_THREAD_POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache interface for retrieving and storing respones. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache mCache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Network interface for performing requests. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Network mNetwork;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Response delivery mechanism. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResponseDelivery mDelivery;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The network dispatchers. */</span></span><br><span class="line">    <span class="keyword">private</span> NetworkDispatcher[] mDispatchers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestQueue</span><span class="params">(Cache cache, Network network, <span class="keyword">int</span> threadPoolSize,</span><br><span class="line">            ResponseDelivery delivery)</span> </span>&#123;</span><br><span class="line">        mCache = cache;</span><br><span class="line">        mNetwork = network;</span><br><span class="line">        mDispatchers = <span class="keyword">new</span> NetworkDispatcher[threadPoolSize];</span><br><span class="line">        mDelivery = delivery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestQueue</span><span class="params">(Cache cache, Network network, <span class="keyword">int</span> threadPoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cache, network, threadPoolSize,</span><br><span class="line">                <span class="keyword">new</span> ExecutorDelivery(<span class="keyword">new</span> Handler(Looper.getMainLooper())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestQueue</span><span class="params">(Cache cache, Network network)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(cache, network, DEFAULT_NETWORK_THREAD_POOL_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">  	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cache 传入的是 <code>DiskBasedCache</code> ，继承 <code>Cache</code> 类，基于 Disk 的缓存实现类。 <code>ExecutorDelivery</code>  为请求结果传输类，其父类为 <code>ResponseDelivery</code>，在 Handler 对应线程中传输缓存调度线程或者网络调度线程中产生的请求结果或请求错误，会在请求成功的情况下调用 <code>Request.deliverResponse()</code> 函数，失败时调用 <code>Request.deliverError()</code> 函数。<code>NetworkDispatcher</code> 继承于 <code>Thread</code> ，用于调度处理请求。启动后会不断从网络请求队列中取请求处理，队列为空则等待，请求处理结束则将结果传递给 <code>ResponseDelivery</code> ，去执行后续处理，并判断结果是否要进行缓存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The queue of requests that are actually going out to the network. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityBlockingQueue&lt;Request&gt; mNetworkQueue =</span><br><span class="line">        <span class="keyword">new</span> PriorityBlockingQueue&lt;Request&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stop();  <span class="comment">// 停止所有dispatchers</span></span><br><span class="line">        <span class="comment">// 创建cache dispatcher并启动</span></span><br><span class="line">        mCacheDispatcher = <span class="keyword">new</span> CacheDispatcher(mCacheQueue, mNetworkQueue, mCache, mDelivery);</span><br><span class="line">        mCacheDispatcher.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 network dispatchers</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDispatchers.length; i++) &#123;</span><br><span class="line">            NetworkDispatcher networkDispatcher = <span class="keyword">new</span> NetworkDispatcher(mNetworkQueue, mNetwork,</span><br><span class="line">                    mCache, mDelivery);</span><br><span class="line">            mDispatchers[i] = networkDispatcher;</span><br><span class="line">            networkDispatcher.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mCacheDispatcher != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCacheDispatcher.quit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDispatchers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mDispatchers[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mDispatchers[i].quit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CacheDispatcher</code> 和 <code>NetworkDispatcher</code> 均继承于 <code>Thread</code> ，那么一旦 <code>Volley.newRequestQueue(context);</code> 开始，就有五个线程再后台运行着，而 <code>CacheDispatcher</code> 是缓存线程，<code>NetworkDispatcher</code> 是网络访问线程。</p>
<p><a href="./#Volley-newRequestQueue-context">查看 Volley.newRequestQueue(context) 图</a></p>
<h4 id="NetworkDispatcher"><a href="#NetworkDispatcher" class="headerlink" title="NetworkDispatcher"></a>NetworkDispatcher</h4><p>那么我们先来看看 <code>NetworkDispatcher</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkDispatcher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The queue of requests to service. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Request&gt; mQueue;</span><br><span class="line">    <span class="comment">/** The network interface for processing requests. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Network mNetwork;</span><br><span class="line">    <span class="comment">/** The cache to write to. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache mCache;</span><br><span class="line">    <span class="comment">/** For posting responses and errors. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResponseDelivery mDelivery;</span><br><span class="line">    <span class="comment">/** Used for telling us to die. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> mQuit = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetworkDispatcher</span><span class="params">(BlockingQueue&lt;Request&gt; queue,</span><br><span class="line">            Network network, Cache cache,</span><br><span class="line">            ResponseDelivery delivery)</span> </span>&#123;</span><br><span class="line">        mQueue = queue;</span><br><span class="line">        mNetwork = network;</span><br><span class="line">        mCache = cache;</span><br><span class="line">        mDelivery = delivery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mQuit = <span class="keyword">true</span>;</span><br><span class="line">        interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//设置线程优先级为后台，这样当多个线程并发后很多无关紧要的线程分配的CPU时间将会减少，有利于主线程的处理</span></span><br><span class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">        Request request;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//从queue中取出request，因为mQueue是BlockingQueue，那么当队列中没有数据的时候会一直阻塞在这里</span></span><br><span class="line">                request = mQueue.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// We may have been interrupted because it was time to quit.</span></span><br><span class="line">                <span class="keyword">if</span> (mQuit) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                request.addMarker(<span class="string">"network-queue-take"</span>);<span class="comment">//用于log</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (request.isCanceled()) &#123;</span><br><span class="line">                    request.finish(<span class="string">"network-discard-cancelled"</span>);<span class="comment">//从requestQueue中移除，然后log</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//流量统计</span></span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH) &#123;</span><br><span class="line">                    TrafficStats.setThreadStatsTag(request.getTrafficStatsTag());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//走网络访问，然后返回networkResponse</span></span><br><span class="line">                NetworkResponse networkResponse = mNetwork.performRequest(request);</span><br><span class="line">                request.addMarker(<span class="string">"network-http-complete"</span>);<span class="comment">//用于log</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果服务器返回304并且我们已经访问过了,结束</span></span><br><span class="line">                <span class="keyword">if</span> (networkResponse.notModified &amp;&amp; request.hasHadResponseDelivered()) &#123;</span><br><span class="line">                    request.finish(<span class="string">"not-modified"</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把networkResponse解析成response</span></span><br><span class="line">                Response&lt;?&gt; response = request.parseNetworkResponse(networkResponse);</span><br><span class="line">                request.addMarker(<span class="string">"network-parse-complete"</span>);<span class="comment">//用于log</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断建立的request中是否需要缓存，默认开启，同时response.cacheEntry的实际内容是返回的header中的Cache-Control参数信息</span></span><br><span class="line">                <span class="keyword">if</span> (request.shouldCache() &amp;&amp; response.cacheEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mCache.put(request.getCacheKey(), response.cacheEntry);</span><br><span class="line">                    request.addMarker(<span class="string">"network-cache-written"</span>);<span class="comment">//用于log</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//标记已经发送过了</span></span><br><span class="line">                request.markDelivered();</span><br><span class="line">              	<span class="comment">//传递结构出去</span></span><br><span class="line">                mDelivery.postResponse(request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (VolleyError volleyError) &#123;</span><br><span class="line">                parseAndDeliverNetworkError(request, volleyError);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                VolleyLog.e(e, <span class="string">"Unhandled exception %s"</span>, e.toString());</span><br><span class="line">                mDelivery.postError(request, <span class="keyword">new</span> VolleyError(e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseAndDeliverNetworkError</span><span class="params">(Request&lt;?&gt; request, VolleyError error)</span> </span>&#123;</span><br><span class="line">        error = request.parseNetworkError(error);</span><br><span class="line">        mDelivery.postError(request, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上走网络访问请求还是在 <code>Network.performRequest</code> 中进行的，网络访问请求完成之后会返回 <code>NetworkResponse</code> ，再通过 <code>Request.parseNetworkResponse</code> 解析成 <code>Response</code> ，再将 <code>Request</code> 和 <code>Response</code> 通过 <code>Delivery.postResponse</code> 传递出去。</p>
<p>所以这里的流程是：</p>
<ol>
<li>从 <code>mQueue</code> 中获取 <code>Request</code>，没有数据一直堵塞在那</li>
<li>拿到 <code>Request</code> 之后通过 <code>Network.performRequest</code> 进行网络访问，返回 <code>NetworkResponse</code></li>
<li>如果状态码是304则不继续下面操作</li>
<li>通过 <code>Request.parseNetworkResponse</code> 将 <code>NetworkResponse</code> 解析成 <code>Response</code></li>
<li><code>Delivery.postResponse</code> 将 <code>Request</code> 和 <code>Response</code> 传递出去</li>
</ol>
<p><a href="./#NetworkDispatcher流程图">查看 NetworkDispatcher 流程图</a></p>
<h5 id="Network-performRequest"><a href="#Network-performRequest" class="headerlink" title="Network.performRequest"></a>Network.performRequest</h5><p>那么再来看一下访问网络的 <code>BasicNetwork</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicNetwork</span> <span class="keyword">implements</span> <span class="title">Network</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NetworkResponse <span class="title">performRequest</span><span class="params">(Request&lt;?&gt; request)</span> <span class="keyword">throws</span> VolleyError </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> requestStart = SystemClock.elapsedRealtime();<span class="comment">//开始时间</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            HttpResponse httpResponse = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] responseContents = <span class="keyword">null</span>;</span><br><span class="line">            Map&lt;String, String&gt; responseHeaders = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Gather headers.</span></span><br><span class="line">                Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">              	<span class="comment">//加入缓存信息的header</span></span><br><span class="line">                addCacheHeaders(headers, request.getCacheEntry());</span><br><span class="line">              	<span class="comment">//httpStack走请求网络访问</span></span><br><span class="line">                httpResponse = mHttpStack.performRequest(request, headers);</span><br><span class="line">              	<span class="comment">//得到http code</span></span><br><span class="line">                StatusLine statusLine = httpResponse.getStatusLine();</span><br><span class="line">                <span class="keyword">int</span> statusCode = statusLine.getStatusCode();</span><br><span class="line"></span><br><span class="line">              	<span class="comment">//将header[] 转成 map 形式</span></span><br><span class="line">                responseHeaders = convertHeaders(httpResponse.getAllHeaders());</span><br><span class="line">                <span class="comment">// 304</span></span><br><span class="line">                <span class="keyword">if</span> (statusCode == HttpStatus.SC_NOT_MODIFIED) &#123;</span><br><span class="line">                  	<span class="comment">//直接返回304的NetworkResponse</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> NetworkResponse(HttpStatus.SC_NOT_MODIFIED,</span><br><span class="line">                            request.getCacheEntry().data, responseHeaders, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 像204这种可能没有返回内容，需要判断一下</span></span><br><span class="line">                <span class="keyword">if</span> (httpResponse.getEntity() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="comment">//将entity内容转换成byte[]</span></span><br><span class="line">                  responseContents = entityToBytes(httpResponse.getEntity());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//如果是没有内容的，就返回byte[0]</span></span><br><span class="line">                  responseContents = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断时间，如果花费事件很长的话，log出来</span></span><br><span class="line">                <span class="keyword">long</span> requestLifetime = SystemClock.elapsedRealtime() - requestStart;</span><br><span class="line">                logSlowRequests(requestLifetime, request, responseContents, statusLine);</span><br><span class="line">				<span class="comment">//小于200或者大于299的抛出异常</span></span><br><span class="line">                <span class="keyword">if</span> (statusCode &lt; <span class="number">200</span> || statusCode &gt; <span class="number">299</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> NetworkResponse(statusCode, responseContents, responseHeaders, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SocketTimeoutException e) &#123;</span><br><span class="line">                attemptRetryOnException(<span class="string">"socket"</span>, request, <span class="keyword">new</span> TimeoutError());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ConnectTimeoutException e) &#123;</span><br><span class="line">                attemptRetryOnException(<span class="string">"connection"</span>, request, <span class="keyword">new</span> TimeoutError());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Bad URL "</span> + request.getUrl(), e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">int</span> statusCode = <span class="number">0</span>;</span><br><span class="line">                NetworkResponse networkResponse = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (httpResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    statusCode = httpResponse.getStatusLine().getStatusCode();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoConnectionError(e);</span><br><span class="line">                &#125;</span><br><span class="line">                VolleyLog.e(<span class="string">"Unexpected response code %d for %s"</span>, statusCode, request.getUrl());</span><br><span class="line">                <span class="keyword">if</span> (responseContents != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    networkResponse = <span class="keyword">new</span> NetworkResponse(statusCode, responseContents,</span><br><span class="line">                            responseHeaders, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (statusCode == HttpStatus.SC_UNAUTHORIZED ||</span><br><span class="line">                            statusCode == HttpStatus.SC_FORBIDDEN) &#123;</span><br><span class="line">                        attemptRetryOnException(<span class="string">"auth"</span>,</span><br><span class="line">                                request, <span class="keyword">new</span> AuthFailureError(networkResponse));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> Only throw ServerError for 5xx status codes.</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ServerError(networkResponse);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NetworkError(networkResponse);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addCacheHeaders</span><span class="params">(Map&lt;String, String&gt; headers, Cache.Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If there's no cache entry, we're done.</span></span><br><span class="line">        <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entry.etag != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headers.put(<span class="string">"If-None-Match"</span>, entry.etag);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entry.serverDate &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Date refTime = <span class="keyword">new</span> Date(entry.serverDate);</span><br><span class="line">            headers.put(<span class="string">"If-Modified-Since"</span>, DateUtils.formatDate(refTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; convertHeaders(Header[] headers) &#123;</span><br><span class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.length; i++) &#123;</span><br><span class="line">            result.put(headers[i].getName(), headers[i].getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">byte</span>[] entityToBytes(HttpEntity entity) <span class="keyword">throws</span> IOException, ServerError &#123;</span><br><span class="line">      	<span class="comment">//结合了ByteArrayPool复用池的ByteArrayOutputStream</span></span><br><span class="line">        PoolingByteArrayOutputStream bytes =</span><br><span class="line">                <span class="keyword">new</span> PoolingByteArrayOutputStream(mPool, (<span class="keyword">int</span>) entity.getContentLength());</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = entity.getContent();</span><br><span class="line">            <span class="keyword">if</span> (in == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServerError();</span><br><span class="line">            &#125;</span><br><span class="line">            buffer = mPool.getBuf(<span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">int</span> count;</span><br><span class="line">            <span class="keyword">while</span> ((count = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bytes.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bytes.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                entity.consumeContent();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                VolleyLog.v(<span class="string">"Error occured when calling consumingContent"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mPool.returnBuf(buffer);</span><br><span class="line">            bytes.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>BasicNetwork</code> 中真正走网络访问的实际上是 <code>mHttpStack.performRequest()</code> ，而 <code>mHttpStack</code> 这里是接口，面对抽象编程，在 Volley 中实现是 <code>HurlStack</code> 和 <code>HttpClientStack</code> ，那么来看一下这两个类中对方法 <code>performRequest()</code> 的实现：</p>
<h6 id="HurlStack-performRequest"><a href="#HurlStack-performRequest" class="headerlink" title="HurlStack.performRequest"></a>HurlStack.performRequest</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HurlStack</span> <span class="keyword">implements</span> <span class="title">HttpStack</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpResponse <span class="title">performRequest</span><span class="params">(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</span> <span class="keyword">throws</span> IOException, AuthFailureError </span>&#123;</span><br><span class="line">      	<span class="comment">//得到url</span></span><br><span class="line">        String url = request.getUrl();</span><br><span class="line">      	<span class="comment">//准备header</span></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        map.putAll(request.getHeaders());</span><br><span class="line">        map.putAll(additionalHeaders);</span><br><span class="line">      	<span class="comment">//UrlRewriter是一个接口，request中的mUrl属性是final，UrlRewriter通过hUrlStack的构造函数中传入，UrlRewriter.rewriteUrl(originalUrl)，通过这个方法进行对原始url判断是否进行更换</span></span><br><span class="line">        <span class="keyword">if</span> (mUrlRewriter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String rewritten = mUrlRewriter.rewriteUrl(url);</span><br><span class="line">            <span class="keyword">if</span> (rewritten == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"URL blocked by rewriter: "</span> + url);</span><br><span class="line">            &#125;</span><br><span class="line">            url = rewritten;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//HttpUrlConnection的流程</span></span><br><span class="line">        URL parsedUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">        HttpURLConnection connection = openConnection(parsedUrl, request);</span><br><span class="line">        <span class="keyword">for</span> (String headerName : map.keySet()) &#123;</span><br><span class="line">            connection.addRequestProperty(headerName, map.get(headerName));</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//设置Post还是Get等</span></span><br><span class="line">        setConnectionParametersForRequest(connection, request);</span><br><span class="line">        <span class="comment">// http1.1</span></span><br><span class="line">        ProtocolVersion protocolVersion = <span class="keyword">new</span> ProtocolVersion(<span class="string">"HTTP"</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> responseCode = connection.getResponseCode();</span><br><span class="line">        <span class="keyword">if</span> (responseCode == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Could not retrieve response code from HttpUrlConnection."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StatusLine responseStatus = <span class="keyword">new</span> BasicStatusLine(protocolVersion,</span><br><span class="line">                connection.getResponseCode(), connection.getResponseMessage());</span><br><span class="line">        BasicHttpResponse response = <span class="keyword">new</span> BasicHttpResponse(responseStatus);</span><br><span class="line">      	<span class="comment">//得到服务器返回的数据，并设置到response中</span></span><br><span class="line">        response.setEntity(entityFromConnection(connection));</span><br><span class="line">      	<span class="comment">//设置header</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, List&lt;String&gt;&gt; header : connection.getHeaderFields().entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (header.getKey() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Header h = <span class="keyword">new</span> BasicHeader(header.getKey(), header.getValue().get(<span class="number">0</span>));</span><br><span class="line">                response.addHeader(h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setConnectionParametersForRequest</span><span class="params">(HttpURLConnection connection, Request&lt;?&gt; request)</span> <span class="keyword">throws</span> IOException, AuthFailureError </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (request.getMethod()) &#123;</span><br><span class="line">            <span class="keyword">case</span> Method.DEPRECATED_GET_OR_POST:</span><br><span class="line">           		<span class="comment">//设置要发送的数据</span></span><br><span class="line">                <span class="keyword">byte</span>[] postBody = request.getPostBody();</span><br><span class="line">                <span class="keyword">if</span> (postBody != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">                    connection.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">                    connection.addRequestProperty(HEADER_CONTENT_TYPE,</span><br><span class="line">                            request.getPostBodyContentType());</span><br><span class="line">                    DataOutputStream out = <span class="keyword">new</span> DataOutputStream(connection.getOutputStream());</span><br><span class="line">                    out.write(postBody);</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Method.GET:</span><br><span class="line">                connection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Method.DELETE:</span><br><span class="line">                connection.setRequestMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Method.POST:</span><br><span class="line">                connection.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">                addBodyIfExists(connection, request);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Method.PUT:</span><br><span class="line">                connection.setRequestMethod(<span class="string">"PUT"</span>);</span><br><span class="line">                addBodyIfExists(connection, request);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown method type."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addBodyIfExists</span><span class="params">(HttpURLConnection connection, Request&lt;?&gt; request)</span> <span class="keyword">throws</span> IOException, AuthFailureError </span>&#123;</span><br><span class="line">      	<span class="comment">//设置要发送的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] body = request.getBody();</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            connection.addRequestProperty(HEADER_CONTENT_TYPE, request.getBodyContentType());</span><br><span class="line">            DataOutputStream out = <span class="keyword">new</span> DataOutputStream(connection.getOutputStream());</span><br><span class="line">            out.write(body);</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HttpEntity <span class="title">entityFromConnection</span><span class="params">(HttpURLConnection connection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//得到数据</span></span><br><span class="line">      	BasicHttpEntity entity = <span class="keyword">new</span> BasicHttpEntity();</span><br><span class="line">        InputStream inputStream;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = connection.getInputStream();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            inputStream = connection.getErrorStream();</span><br><span class="line">        &#125;</span><br><span class="line">        entity.setContent(inputStream);</span><br><span class="line">        entity.setContentLength(connection.getContentLength());</span><br><span class="line">        entity.setContentEncoding(connection.getContentEncoding());</span><br><span class="line">        entity.setContentType(connection.getContentType());</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个网络访问请求也就是正常的 <code>HttpUrlConnection</code> 的操作。</p>
<h6 id="HttpClientStack-performRequest"><a href="#HttpClientStack-performRequest" class="headerlink" title="HttpClientStack.performRequest"></a>HttpClientStack.performRequest</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientStack</span> <span class="keyword">implements</span> <span class="title">HttpStack</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpResponse <span class="title">performRequest</span><span class="params">(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</span> <span class="keyword">throws</span> IOException, AuthFailureError </span>&#123;</span><br><span class="line">      	<span class="comment">//得到封装好了的HttpUriRequest</span></span><br><span class="line">        HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);</span><br><span class="line">      	<span class="comment">//添加header</span></span><br><span class="line">        addHeaders(httpRequest, additionalHeaders);</span><br><span class="line">        addHeaders(httpRequest, request.getHeaders());</span><br><span class="line">        onPrepareRequest(httpRequest);</span><br><span class="line">      	<span class="comment">//走HttpClient的流程</span></span><br><span class="line">        HttpParams httpParams = httpRequest.getParams();</span><br><span class="line">        <span class="keyword">int</span> timeoutMs = request.getTimeoutMs();</span><br><span class="line">        HttpConnectionParams.setConnectionTimeout(httpParams, <span class="number">5000</span>);</span><br><span class="line">        HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);</span><br><span class="line">        <span class="keyword">return</span> mClient.execute(httpRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> HttpUriRequest <span class="title">createHttpRequest</span><span class="params">(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</span> <span class="keyword">throws</span> AuthFailureError </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (request.getMethod()) &#123;</span><br><span class="line">            <span class="keyword">case</span> Method.DEPRECATED_GET_OR_POST: &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] postBody = request.getPostBody();</span><br><span class="line">                <span class="keyword">if</span> (postBody != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  	<span class="comment">//如果是Post则返回HttpPost</span></span><br><span class="line">                    HttpPost postRequest = <span class="keyword">new</span> HttpPost(request.getUrl());</span><br><span class="line">                    postRequest.addHeader(HEADER_CONTENT_TYPE, request.getPostBodyContentType());</span><br><span class="line">                    HttpEntity entity;</span><br><span class="line">                    entity = <span class="keyword">new</span> ByteArrayEntity(postBody);</span><br><span class="line">                    postRequest.setEntity(entity);</span><br><span class="line">                    <span class="keyword">return</span> postRequest;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//Get方式的话返回HttpGet</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> HttpGet(request.getUrl());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> Method.GET:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HttpGet(request.getUrl());</span><br><span class="line">            <span class="keyword">case</span> Method.DELETE:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HttpDelete(request.getUrl());</span><br><span class="line">            <span class="keyword">case</span> Method.POST: &#123;</span><br><span class="line">                HttpPost postRequest = <span class="keyword">new</span> HttpPost(request.getUrl());</span><br><span class="line">                postRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());</span><br><span class="line">                setEntityIfNonEmptyBody(postRequest, request);</span><br><span class="line">                <span class="keyword">return</span> postRequest;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> Method.PUT: &#123;</span><br><span class="line">                HttpPut putRequest = <span class="keyword">new</span> HttpPut(request.getUrl());</span><br><span class="line">                putRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());</span><br><span class="line">                setEntityIfNonEmptyBody(putRequest, request);</span><br><span class="line">                <span class="keyword">return</span> putRequest;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown request method."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个网络访问请求也就是正常的 <code>HttpClient</code> 的操作。</p>
<h5 id="Request-parseNetworkResponse"><a href="#Request-parseNetworkResponse" class="headerlink" title="Request.parseNetworkResponse"></a>Request.parseNetworkResponse</h5><p>这里我们用 <code>StringRequest</code> 举栗：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRequest</span> <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;String&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        String parsed;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data, HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns a successful response containing the parsed result. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Response&lt;T&gt; <span class="title">success</span><span class="params">(T result, Cache.Entry cacheEntry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response&lt;T&gt;(result, cacheEntry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Parsed response, or null in the case of error. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> T result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache metadata for this response, or null in the case of error. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Cache.Entry cacheEntry;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Response</span><span class="params">(T result, Cache.Entry cacheEntry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">        <span class="keyword">this</span>.cacheEntry = cacheEntry;</span><br><span class="line">        <span class="keyword">this</span>.error = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再举个 <code>JsonObjectRequest</code> 的栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonObjectRequest</span> <span class="keyword">extends</span> <span class="title">JsonRequest</span>&lt;<span class="title">JSONObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;JSONObject&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String jsonString =</span><br><span class="line">                <span class="keyword">new</span> String(response.data, HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">return</span> Response.success(<span class="keyword">new</span> JSONObject(jsonString),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException je) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(je));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="ResponseDelivery-postResponse"><a href="#ResponseDelivery-postResponse" class="headerlink" title="ResponseDelivery.postResponse"></a>ResponseDelivery.postResponse</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorDelivery</span> <span class="keyword">implements</span> <span class="title">ResponseDelivery</span> </span>&#123;</span><br><span class="line"> 	 <span class="function"><span class="keyword">public</span> <span class="title">ExecutorDelivery</span><span class="params">(<span class="keyword">final</span> Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Make an Executor that just wraps the handler.</span></span><br><span class="line">        mResponsePoster = <span class="keyword">new</span> Executor() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">                handler.post(command);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postResponse</span><span class="params">(Request&lt;?&gt; request, Response&lt;?&gt; response)</span> </span>&#123;</span><br><span class="line">        postResponse(request, response, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postResponse</span><span class="params">(Request&lt;?&gt; request, Response&lt;?&gt; response, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        request.markDelivered();</span><br><span class="line">        request.addMarker(<span class="string">"post-response"</span>);</span><br><span class="line">        mResponsePoster.execute(<span class="keyword">new</span> ResponseDeliveryRunnable(request, response, runnable));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDeliveryRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Request mRequest;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Response mResponse;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Runnable mRunnable;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ResponseDeliveryRunnable</span><span class="params">(Request request, Response response, Runnable runnable)</span> </span>&#123;</span><br><span class="line">            mRequest = request;</span><br><span class="line">            mResponse = response;</span><br><span class="line">            mRunnable = runnable;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// If this request has canceled, finish it and don't deliver.</span></span><br><span class="line">            <span class="keyword">if</span> (mRequest.isCanceled()) &#123;</span><br><span class="line">                mRequest.finish(<span class="string">"canceled-at-delivery"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Deliver a normal response or error, depending.</span></span><br><span class="line">            <span class="keyword">if</span> (mResponse.isSuccess()) &#123;</span><br><span class="line">                mRequest.deliverResponse(mResponse.result);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mRequest.deliverError(mResponse.error);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If this is an intermediate response, add a marker, otherwise we're done</span></span><br><span class="line">            <span class="comment">// and the request can be finished.</span></span><br><span class="line">            <span class="keyword">if</span> (mResponse.intermediate) &#123;</span><br><span class="line">                mRequest.addMarker(<span class="string">"intermediate-response"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mRequest.finish(<span class="string">"done"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If we have been provided a post-delivery runnable, run it.</span></span><br><span class="line">            <span class="keyword">if</span> (mRunnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mRunnable.run();</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>ResponseDeliveryRunnable</code> 的 <code>mRequest.deliverResponse(mResponse.result)</code> 中将结果传递出去，来看一下<code>StringRequest</code> 的 <code>deliverResponse()</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRequest</span> <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="title">StringRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Listener&lt;String&gt; listener,</span><br><span class="line">            ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">        mListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">        mListener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里，也就是返回给我们数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(<span class="string">"http://yydcdut.com"</span>,</span><br><span class="line">                <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>转一圈就这么转回来了。</p>
<p><a href="./#ResponseDelivery流程图">查看 ResponseDelivery 流程图</a></p>
<p>说完 <code>NetworkDispatcher</code> 就该说一下 <code>CacheDispatcher</code> :</p>
<h4 id="CacheDispatcher"><a href="#CacheDispatcher" class="headerlink" title="CacheDispatcher"></a>CacheDispatcher</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheDispatcher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) VolleyLog.v(<span class="string">"start new dispatcher"</span>);</span><br><span class="line">      	<span class="comment">//设置线程优先级为后台</span></span><br><span class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cache的初始化，比如DiskBasedCache的话初始化中判断文件夹是否存在，不存在的话创建文件夹</span></span><br><span class="line">        mCache.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//从队列中获取Request，没获取到的话一直阻塞在这个地方</span></span><br><span class="line">                <span class="keyword">final</span> Request request = mCacheQueue.take();</span><br><span class="line">                request.addMarker(<span class="string">"cache-queue-take"</span>);<span class="comment">//log</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the request has been canceled, don't bother dispatching it.</span></span><br><span class="line">                <span class="keyword">if</span> (request.isCanceled()) &#123;</span><br><span class="line">                    request.finish(<span class="string">"cache-discard-canceled"</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//从缓存中找到这个</span></span><br><span class="line">                Cache.Entry entry = mCache.get(request.getCacheKey());</span><br><span class="line">                <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    request.addMarker(<span class="string">"cache-miss"</span>);</span><br><span class="line">                    <span class="comment">//cache中没有的话，加到network dispatcher中</span></span><br><span class="line">                    mNetworkQueue.put(request);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果过期了，加到network dispatcher中</span></span><br><span class="line">                <span class="keyword">if</span> (entry.isExpired()) &#123;</span><br><span class="line">                    request.addMarker(<span class="string">"cache-hit-expired"</span>);</span><br><span class="line">                    request.setCacheEntry(entry);</span><br><span class="line">                    mNetworkQueue.put(request);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果有缓存，解析后通过mDelivery传递出去</span></span><br><span class="line">                request.addMarker(<span class="string">"cache-hit"</span>);</span><br><span class="line">                Response&lt;?&gt; response = request.parseNetworkResponse(</span><br><span class="line">                        <span class="keyword">new</span> NetworkResponse(entry.data, entry.responseHeaders));</span><br><span class="line">                request.addMarker(<span class="string">"cache-hit-parsed"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!entry.refreshNeeded()) &#123;</span><br><span class="line">                    <span class="comment">// Completely unexpired cache hit. Just deliver the response.</span></span><br><span class="line">                    mDelivery.postResponse(request, response);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 需要refresh，先将response传递出去，再通过network dispatcher去refresh</span></span><br><span class="line">                    request.addMarker(<span class="string">"cache-hit-refresh-needed"</span>);</span><br><span class="line">                    request.setCacheEntry(entry);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Mark the response as intermediate.</span></span><br><span class="line">                    response.intermediate = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                    mDelivery.postResponse(request, response, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="annotation">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                mNetworkQueue.put(request);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mQuit) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动后会不断从缓存请求队列中取请求处理，队列为空则等待，请求处理结束则将结果传递给<code>ResponseDelivery</code> 去执行后续处理。当结果未缓存过、缓存失效或缓存需要刷新的情况下，该请求都需要重新进入<code>NetworkDispatcher</code> 去调度处理。</p>
<p><a href="./#CacheDispatcher流程图">查看 CacheDispatcher 流程图</a></p>
<h3 id="StringRequest-1"><a href="#StringRequest-1" class="headerlink" title="StringRequest"></a>StringRequest</h3><p>介绍完了 <code>Volley.newRequestQueue(context);</code> 这部分，那么讲解一些准备 <code>Request</code> ，这部分拿 <code>StringRequest</code> 开导举栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRequest</span> <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;String&gt; mListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Listener&lt;String&gt; listener,</span><br><span class="line">            ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">        mListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringRequest</span><span class="params">(String url, Listener&lt;String&gt; listener, ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Method.GET, url, listener, errorListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//回调出去</span></span><br><span class="line">        mListener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;String&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        String parsed;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data, HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data);</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//回调出去</span></span><br><span class="line">        <span class="keyword">return</span> Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实 <code>StringRequest</code> 一看就明白了。</p>
<h3 id="RequestQueue-1"><a href="#RequestQueue-1" class="headerlink" title="RequestQueue"></a>RequestQueue</h3><p>准备好 <code>Request</code> 之后，就将 <code>Request</code> 通过 <code>queue.add(stringRequest);</code> 添加到 <code>RequesrQueue</code> 中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestQueue</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//用来为Request生成计数</span></span><br><span class="line">  	<span class="keyword">private</span> AtomicInteger mSequenceGenerator = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">	<span class="comment">//存储当前添加进来的Request，包括正在执行的</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Request&gt; mCurrentRequests = <span class="keyword">new</span> HashSet&lt;Request&gt;();</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Queue&lt;Request&gt;&gt; mWaitingRequests = <span class="keyword">new</span> HashMap&lt;String, Queue&lt;Request&gt;&gt;();</span><br><span class="line"></span><br><span class="line">  	<span class="function"><span class="keyword">public</span> Request <span class="title">add</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将RequestQueue设置给Request</span></span><br><span class="line">        request.setRequestQueue(<span class="keyword">this</span>);</span><br><span class="line">      	<span class="comment">//添加到mCurrentRequests中</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mCurrentRequests) &#123;</span><br><span class="line">            mCurrentRequests.add(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置计数</span></span><br><span class="line">        request.setSequence(getSequenceNumber());</span><br><span class="line">        request.addMarker(<span class="string">"add-to-queue"</span>);<span class="comment">//log</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不能缓存，直接加到network队列后返回，NetworkDispatcher的队列中有数据了就开始进行网络访问</span></span><br><span class="line">        <span class="keyword">if</span> (!request.shouldCache()) &#123;</span><br><span class="line">            mNetworkQueue.add(request);</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在mWaitingRequests中找找</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mWaitingRequests) &#123;</span><br><span class="line">          	<span class="comment">//这个cacheKey就是传入request的URL</span></span><br><span class="line">            String cacheKey = request.getCacheKey();</span><br><span class="line">            <span class="keyword">if</span> (mWaitingRequests.containsKey(cacheKey)) &#123;</span><br><span class="line">                <span class="comment">//如果之前就缓存过</span></span><br><span class="line">                Queue&lt;Request&gt; stagedRequests = mWaitingRequests.get(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (stagedRequests == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stagedRequests = <span class="keyword">new</span> LinkedList&lt;Request&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                stagedRequests.add(request);</span><br><span class="line">                mWaitingRequests.put(cacheKey, stagedRequests);</span><br><span class="line">                <span class="keyword">if</span> (VolleyLog.DEBUG) &#123;</span><br><span class="line">                    VolleyLog.v(<span class="string">"Request for cacheKey=%s is in flight, putting on hold."</span>, cacheKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果之前没有缓存过，添加到mWaitingRequests和mCacheQueue</span></span><br><span class="line">                mWaitingRequests.put(cacheKey, <span class="keyword">null</span>);</span><br><span class="line">              	<span class="comment">//CacheDispatcher的队列中有数据了，进行缓存判断，有缓存直接返回，没缓存再访问网络</span></span><br><span class="line">                mCacheQueue.add(request);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先会会判断当前的 <code>Request</code> 是否可以缓存，如果不能缓存则在直接加入网络请求队列，可以缓存的话则在加入缓存队列。在默认情况下，每个 <code>Request</code> 都是可以缓存的，当然我们也可以调用 <code>Request.setShouldCache(false)</code> 设置成不可缓存。这里会发现，如果 <code>mWaitingRequests</code> 中有 <code>cacheKey</code> 这个 Key 的话，似乎没有加到 NetworkQueue 或者 CacheQueue 中，是怎么回事呢？</p>
<p>答案：如果一个 <code>Request</code> 完成之后，会调用 <code>Request.finish()</code> ，而正好 <code>Request</code> 的成员变量中有 <code>RequestQueue</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Request</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">finish</span><span class="params">(<span class="keyword">final</span> String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRequestQueue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mRequestQueue.finish(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">//blablabla......</span></span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看看 <code>RequestQueue.finish()</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestQueue</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">finish</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从mCurrentRequests中remove掉</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mCurrentRequests) &#123;</span><br><span class="line">            mCurrentRequests.remove(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (request.shouldCache()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mWaitingRequests) &#123;</span><br><span class="line">              	<span class="comment">//如果能缓存的话，从mWaitingRequests中remove掉</span></span><br><span class="line">                String cacheKey = request.getCacheKey();</span><br><span class="line">                Queue&lt;Request&gt; waitingRequests = mWaitingRequests.remove(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (waitingRequests != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (VolleyLog.DEBUG) &#123;</span><br><span class="line">                        VolleyLog.v(<span class="string">"Releasing %d waiting requests for cacheKey=%s."</span>, waitingRequests.size(), cacheKey);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//再将同样cacheKey的加入到缓存队列中</span></span><br><span class="line">                    mCacheQueue.addAll(waitingRequests);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就解决了上面那个问题，是因为目前已经有相同 cacheKey 的 <code>Request</code> 在 dispatcher 了，所以加到了等待列表中。</p>
<p><a href="./#RequestQueue-add-request">查看 RequestQueue.add(request) 流程图</a></p>
<p>至此，<code>Volley</code> 的解析就结束了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="总体框架流程图"><a href="#总体框架流程图" class="headerlink" title="总体框架流程图"></a>总体框架流程图</h3><p><img src="http://yydcdut.github.io/img/o_volley_framework_flow.jpg" alt="总体框架流程图"></p>
<h3 id="Volley-newRequestQueue-context"><a href="#Volley-newRequestQueue-context" class="headerlink" title="Volley.newRequestQueue(context)"></a>Volley.newRequestQueue(context)</h3><p><img src="http://yydcdut.github.io/img/volley_requestqueue.jpg" alt="Volley.newRequestQueue(context)"></p>
<h3 id="NetworkDispatcher流程图"><a href="#NetworkDispatcher流程图" class="headerlink" title="NetworkDispatcher流程图"></a>NetworkDispatcher流程图</h3><p><img src="http://yydcdut.github.io/img/volley_networkdispacher_flow.jpg" alt="NetworkDispatcher"></p>
<h3 id="CacheDispatcher流程图"><a href="#CacheDispatcher流程图" class="headerlink" title="CacheDispatcher流程图"></a>CacheDispatcher流程图</h3><p><img src="http://yydcdut.github.io/img/volley_cacheddispatcher_flow.jpg" alt="CacheDispatcher"></p>
<h3 id="ResponseDelivery流程图"><a href="#ResponseDelivery流程图" class="headerlink" title="ResponseDelivery流程图"></a>ResponseDelivery流程图</h3><p><img src="http://yydcdut.github.io/img/volley_delivery_flow.jpg" alt="ResponseDelivery"></p>
<h3 id="RequestQueue-add-request"><a href="#RequestQueue-add-request" class="headerlink" title="RequestQueue.add(request)"></a>RequestQueue.add(request)</h3><p><img src="http://yydcdut.github.io/img/volley_requestqueue_add.jpg" alt="RequestQueue.add(Request)"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Volley 源码解析</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/17656437" target="_blank" rel="external">Android Volley完全解析(四)，带你从源码的角度理解Volley</a></li>
<li><a href="http://www.cnblogs.com/cpacm/p/4211719.html" target="_blank" rel="external">Volley框架的流程图分析</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Volley </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EventBus3.0源码解析]]></title>
      <url>/2016/03/07/eventbus3-code-analyse/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Github: <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>      分析版本：<a href="https://github.com/greenrobot/EventBus/tree/8a943efc7303eecba9abda04cee93324899169b5" target="_blank" rel="external">8a943ef</a></p>
</blockquote>
<p>EventBus3 与之前的相比，其主要差别在于订阅方法可以不再以 <em>onEvent</em> 开头了，改为用<strong>注解</strong>。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a> 是Android上的以发布\订阅事件为核心的库。事件 (<code>event</code>) 通过 <code>post()</code> 发送到总线，然后再分发到匹配事件类型的订阅者 (<code>subscribers</code>) 。订阅者只有在总线中注册 (<code>register</code>) 了才能收到事件，注销 (<code>unrigister</code>) 之后就收不到任何事件了。事件方法必须带有 <code>Subscribe</code> 的注解，必须是 <code>public</code> ，没有返回类型 <code>void</code> 并且只能有一个参数。</p>
<blockquote>
<p>EventBus is a central publish/subscribe event system for Android. Events are posted ({@link #post(Object)}) to the bus, which delivers it to subscribers that have a matching handler method for the event type. To receive events, subscribers must register themselves to the bus using {@link #register(Object)}. Once registered, subscribers receive events until {@link #unregister(Object)} is called. Event handling methods must be annotated by {@link Subscribe}, must be public, return nothing (void), and have exactly one parameter (the event).</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加依赖到 <code>Gradle</code>：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.greenrobot:eventbus:3.0.0'</span></span><br></pre></td></tr></table></figure>
<h3 id="Step1-定义事件"><a href="#Step1-定义事件" class="headerlink" title="Step1: 定义事件"></a>Step1: 定义事件</h3><p>对事件的定义没有任何要求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageEvent</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Step2-准备订阅者"><a href="#Step2-准备订阅者" class="headerlink" title="Step2: 准备订阅者"></a>Step2: 准备订阅者</h3><p>订阅者在定义的时候需要带有 <strong><code>@Subcribe</code></strong> 的注解，EventBus3之后订阅者的方法名可以随意（之前是要以onEvent开头）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This method will be called when a MessageEvent is posted</span></span><br><span class="line"><span class="annotation">@Subscribe</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageEvent</span><span class="params">(MessageEvent event)</span></span>&#123;</span><br><span class="line">    Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when a SomeOtherEvent is posted</span></span><br><span class="line"><span class="annotation">@Subscribe</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSomethingElse</span><span class="params">(SomeOtherEvent event)</span></span>&#123;</span><br><span class="line">    doSomethingWith(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>订阅者同时需要在总线上注册和注销自己。只有当订阅者注册了才能接收到事件。在Android中，通常与 <code>Activity</code> 和 <code>Fragment</code> 的生命周期绑定在一起。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Step3-发送事件"><a href="#Step3-发送事件" class="headerlink" title="Step3: 发送事件"></a>Step3: 发送事件</h3><p>可以从代码的任何地方发送事件，此时注册了的且匹配事件的订阅者能够接收到事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(<span class="keyword">new</span> MessageEvent(<span class="string">"Hello everyone!"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码的讲解会按照上文<code>使用</code>的流程分析。</p>
<h3 id="创建EventBus对象"><a href="#创建EventBus对象" class="headerlink" title="创建EventBus对象"></a>创建EventBus对象</h3><p>先看看 <code>getDefault()</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> EventBus defaultInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">			<span class="keyword">if</span> (defaultInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">				defaultInstance = <span class="keyword">new</span> EventBus();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> defaultInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单例设计模式，用到了double check。再看看 <code>EventBus</code> 的构造方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>(DEFAULT_BUILDER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>什么，既然是单例模式构造函数还 <code>public</code> ？？没错，这样的设计是因为不仅仅可以只有一条总线，还可以有其他的线 (bus) ，订阅者可以注册到不同的线上的 <code>EventBus</code>，通过不同的 <code>EventBus</code> 实例来发送数据，不同的 <code>EventBus</code> 是相互隔离开的，订阅者都只会收到注册到该线上事件。</p>
<blockquote>
<p>Creates a new EventBus instance; each instance is a separate scope in which events are delivered. To use a central bus, consider {@link #getDefault()}.</p>
</blockquote>
<p>再看看这个 <code>this(DEFAULT_BUILDER)</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventBus(EventBusBuilder builder) &#123;</span><br><span class="line">	<span class="comment">//blablabla...       </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里运用到了builder设计模式，那么来看看这个 <code>Builder</code> 中有哪些参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusBuilder</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();</span><br><span class="line">	<span class="comment">//当调用事件处理函数异常时是否打印异常信息</span></span><br><span class="line">    <span class="keyword">boolean</span> logSubscriberExceptions = <span class="keyword">true</span>;</span><br><span class="line">  	<span class="comment">//当没有订阅者订阅该事件时是否打印日志</span></span><br><span class="line">    <span class="keyword">boolean</span> logNoSubscriberMessages = <span class="keyword">true</span>;</span><br><span class="line">  	<span class="comment">//当调用事件处理函数异常时是否发送 SubscriberExceptionEvent 事件</span></span><br><span class="line">    <span class="keyword">boolean</span> sendSubscriberExceptionEvent = <span class="keyword">true</span>;</span><br><span class="line">  	<span class="comment">//当没有事件处理函数对事件处理时是否发送 NoSubscriberEvent 事件</span></span><br><span class="line">    <span class="keyword">boolean</span> sendNoSubscriberEvent = <span class="keyword">true</span>;</span><br><span class="line">  	<span class="comment">//是否要抛出异常，建议debug开启</span></span><br><span class="line">    <span class="keyword">boolean</span> throwSubscriberException;</span><br><span class="line">  	<span class="comment">//与event有继承关系的是否需要发送</span></span><br><span class="line">    <span class="keyword">boolean</span> eventInheritance = <span class="keyword">true</span>;</span><br><span class="line">  	<span class="comment">//是否忽略生成的索引(SubscriberInfoIndex)</span></span><br><span class="line">    <span class="keyword">boolean</span> ignoreGeneratedIndex;</span><br><span class="line">  	<span class="comment">//是否严格的方法名校验</span></span><br><span class="line">    <span class="keyword">boolean</span> strictMethodVerification;</span><br><span class="line">  	<span class="comment">//线程池，async 和 background 的事件会用到</span></span><br><span class="line">    ExecutorService executorService = DEFAULT_EXECUTOR_SERVICE;</span><br><span class="line">  	<span class="comment">//当注册的时候会进行方法名的校验(EventBus3之前方法名必须以onEvent开头)，而这个列表是不参加校验的类的列表(EventBus3之后就没用这个参数了)</span></span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; skipMethodVerificationForClasses;</span><br><span class="line">  	<span class="comment">//维护着由EventBus生成的索引(SubscriberInfoIndex)</span></span><br><span class="line">    List&lt;SubscriberInfoIndex&gt; subscriberInfoIndexes;</span><br><span class="line"></span><br><span class="line">	EventBusBuilder() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">//赋值buidler(可用户自定义的)给单例的EventBus，如果单例的EventBus不为null了，则抛出异常</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> EventBus <span class="title">installDefaultEventBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (EventBus.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EventBus.defaultInstance != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Default instance already exists."</span> +</span><br><span class="line">                        <span class="string">" It may be only set once before it's used the first time to ensure consistent behavior."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            EventBus.defaultInstance = build();</span><br><span class="line">            <span class="keyword">return</span> EventBus.defaultInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventBus <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EventBus(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回到 <code>EventBus</code> 的构造方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">EventBus(EventBusBuilder builder) &#123;</span><br><span class="line">	subscriptionsByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//key为event，value为subscriber列表，这个map就是这个事件有多少的订阅者，也就是事件对应的订阅者</span></span><br><span class="line">	typesBySubscriber = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//key为subscriber，value为event列表，这个map就是这个订阅者有多少的事件，也就是订阅者订阅的事件列表</span></span><br><span class="line">	stickyEvents = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();<span class="comment">//粘性事件</span></span><br><span class="line">	mainThreadPoster = <span class="keyword">new</span> HandlerPoster(<span class="keyword">this</span>, Looper.getMainLooper(), <span class="number">10</span>);<span class="comment">//MainThread的poster</span></span><br><span class="line">	backgroundPoster = <span class="keyword">new</span> BackgroundPoster(<span class="keyword">this</span>);<span class="comment">//Backgroud的poster</span></span><br><span class="line">	asyncPoster = <span class="keyword">new</span> AsyncPoster(<span class="keyword">this</span>);<span class="comment">//Async的poster</span></span><br><span class="line">  	<span class="comment">//订阅者方法寻找类，默认情况下参数是(null, false, false)</span></span><br><span class="line">    subscriberMethodFinder = <span class="keyword">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</span><br><span class="line">                builder.strictMethodVerification, builder.ignoreGeneratedIndex);</span><br><span class="line">	<span class="comment">//builder中的赋值</span></span><br><span class="line">  	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先说一下这三个 <code>HasMap</code>。<code>subscriptionsByEventType</code> 是以 <code>event</code> 为 <em>key</em>，<code>subscriber列表</code> 为 <em>value</em>，当发送 <code>event</code> 的时候，都是去这里找对应的订阅者。<code>typesBySubscriber</code> 是以 <code>subscriber</code> 为 <em>key</em>，<code>event列表</code> 为 <em>value</em>，当 <code>register()</code> 和 <code>unregister()</code> 的时候都是操作这个map，同时对 <code>subscriptionsByEventType</code> 进行对用操作。<code>stickyEvents</code> 维护的是粘性事件，粘性事件也就是当 <code>event</code> 发送出去之后再注册粘性事件的话，该粘性事件也能收到之前发送出去的 <code>event</code>。</p>
<h3 id="Poster"><a href="#Poster" class="headerlink" title="Poster"></a>Poster</h3><p>构造函数中同时还创建了 3 个 poster ，<strong>这 3 个 poster 负责线程间调度</strong>。</p>
<h4 id="HandlerPoster"><a href="#HandlerPoster" class="headerlink" title="HandlerPoster"></a>HandlerPoster</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerPoster</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">	<span class="comment">//队列，即将执行的Post</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingPostQueue queue;</span><br><span class="line">  	<span class="comment">//一个Post最大的在HandleMessage中的时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxMillisInsideHandleMessage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventBus eventBus;</span><br><span class="line">  	<span class="comment">//handler是否运行起来了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> handlerActive;</span><br><span class="line"></span><br><span class="line">    HandlerPoster(EventBus eventBus, Looper looper, <span class="keyword">int</span> maxMillisInsideHandleMessage) &#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">        <span class="keyword">this</span>.eventBus = eventBus;</span><br><span class="line">        <span class="keyword">this</span>.maxMillisInsideHandleMessage = maxMillisInsideHandleMessage;</span><br><span class="line">        queue = <span class="keyword">new</span> PendingPostQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//PendingPost维护了一个可以复用PendingPost对象的复用池</span></span><br><span class="line">        PendingPost pendingPost = PendingPost.obtainPendingPost(subscription, event);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">          	<span class="comment">//加入到队列中</span></span><br><span class="line">            queue.enqueue(pendingPost);</span><br><span class="line">          	<span class="comment">//如果handleMessage没有运行起来</span></span><br><span class="line">            <span class="keyword">if</span> (!handlerActive) &#123;</span><br><span class="line">                handlerActive = <span class="keyword">true</span>;</span><br><span class="line">              	<span class="comment">//发送一个空消息，让handleMessage运行起来</span></span><br><span class="line">                <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> rescheduled = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> started = SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">              	<span class="comment">//从队列中取出PendingPost</span></span><br><span class="line">                PendingPost pendingPost = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                        <span class="comment">// Check again, this time in synchronized</span></span><br><span class="line">                        pendingPost = queue.poll();</span><br><span class="line">                        <span class="keyword">if</span> (pendingPost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            handlerActive = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              	<span class="comment">//调用eventBus的方法，分发消息</span></span><br><span class="line">                eventBus.invokeSubscriber(pendingPost);</span><br><span class="line">                <span class="keyword">long</span> timeInMethod = SystemClock.uptimeMillis() - started;</span><br><span class="line">              	<span class="comment">//如果再一定时间内都还没有将队列排空，则退出</span></span><br><span class="line">                <span class="keyword">if</span> (timeInMethod &gt;= maxMillisInsideHandleMessage) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!sendMessage(obtainMessage())) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Could not send handler message"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    rescheduled = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            handlerActive = rescheduled;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>PendingPost</code> 的数据结构是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingPost</span> </span>&#123;</span><br><span class="line">	Object event;<span class="comment">//事件</span></span><br><span class="line">    Subscription subscription;<span class="comment">//订阅</span></span><br><span class="line">    PendingPost next;<span class="comment">//与队列的数据结构有关，指向下一个节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>PendingPost</code> 维护着一个可以复用PendingPost对象的复用池，通过 <code>obtainPendingPost(Subscription, Object)</code> 方法复用，通过 <code>releasePendingPost(PendingPost )</code> 方法回收。</p>
<p><code>handleMessage()</code> 中有一个死循环，这个死循环不停的从队列中拿数据，然后通过 <code>EventBus.invokeSubscriber()</code> 分发出去。每分发完一次比对一下时间，如果超过了 <code>maxMillisInsideHandleMessage</code> ，那么发送空 <code>message</code> 再次进入到 <code>handlerMessage</code> 中且退出本次循环。<strong>这样做的原因是不要阻塞的UI线程？？</strong></p>
<h4 id="BackgroundPoster"><a href="#BackgroundPoster" class="headerlink" title="BackgroundPoster"></a>BackgroundPoster</h4><p>同理 <code>BackgroundPoster</code> ，只不过 <code>HandlerPoster</code> 是在 <code>handlerMessage</code> 中进行分发操作，而 <code>BackgroundPoster</code> 是在 <code>Runnable</code> 的 <code>run</code> 方法中将所有队列中的消息取出进行分发，直到取完为止。</p>
<h4 id="AsyncPoster"><a href="#AsyncPoster" class="headerlink" title="AsyncPoster"></a>AsyncPoster</h4><p>而 <code>AsyncPoster</code> 虽然也是在 <code>Runnable</code> 的 <code>run</code> 方法中取出队列中的消息，但是只取一个。</p>
<h3 id="准备订阅者"><a href="#准备订阅者" class="headerlink" title="准备订阅者"></a>准备订阅者</h3><p>关于注解，可以查看一下这篇文章：<a href="http://www.cnblogs.com/yydcdut/p/4646454.html" target="_blank" rel="external">《Android –  Annotation》</a></p>
<p>了解了注解，那么来看一看 <code>Subscribe</code> 的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Documented</span></span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> Subscribe &#123;</span><br><span class="line">  	<span class="comment">//线程模式，订阅者在哪个线程接收到事件</span></span><br><span class="line">    <span class="function">ThreadMode <span class="title">threadMode</span><span class="params">()</span> <span class="keyword">default</span> ThreadMode.POSTING</span>;</span><br><span class="line">	<span class="comment">//是否是粘性事件</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">sticky</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">	<span class="comment">//优先级，默认为0</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ThreadMode</code> 是枚举：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ThreadMode &#123;</span><br><span class="line">    POSTING,<span class="comment">//post的时候是哪个线程订阅者就在哪个线程接收到事件</span></span><br><span class="line">    MAIN,<span class="comment">//订阅者在主线程接收到事件</span></span><br><span class="line">    BACKGROUND,<span class="comment">//订阅者在主线程接收到消息，如果post的时候不是在主线程的话，那么订阅者会在post的时候那个线程接收到事件。适合密集或者耗时少的事件。</span></span><br><span class="line">    ASYNC<span class="comment">//订阅者会在不同的子线程中收到事件。适合操作耗时的事件。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全部参数全部上阵的样子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Subscribe</span>(threadMode = ThreadMode.MAIN, sticky = <span class="keyword">false</span>, priority = <span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSomethingElse</span><span class="params">(SomeOtherEvent event)</span></span>&#123; </span><br><span class="line">	doSomethingWith(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注册订阅者"><a href="#注册订阅者" class="headerlink" title="注册订阅者"></a>注册订阅者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//拿到订阅者的class</span></span><br><span class="line">	Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class="line">  	<span class="comment">//通过class去找到订阅方法</span></span><br><span class="line">	List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class="line">	<span class="comment">//blablabla...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SubscriberMethodFinder"><a href="#SubscriberMethodFinder" class="headerlink" title="SubscriberMethodFinder"></a>SubscriberMethodFinder</h4><p>先看看 <code>subscriberMethodFinder.findSubscriberMethods()</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;SubscriberMethod&gt; <span class="title">findSubscriberMethods</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//先从METHOD_CACHE中查看是否已经有这个订阅者了</span></span><br><span class="line">  	List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</span><br><span class="line">  	<span class="comment">//有了的话直接把订阅者的方法返回</span></span><br><span class="line">	<span class="keyword">if</span> (subscriberMethods != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> subscriberMethods;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//ignoreGeneratedIndex默认是false</span></span><br><span class="line">	<span class="keyword">if</span> (ignoreGeneratedIndex) &#123;</span><br><span class="line">		subscriberMethods = findUsingReflection(subscriberClass);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		subscriberMethods = findUsingInfo(subscriberClass);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (subscriberMethods.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriberClass</span><br><span class="line">                    + <span class="string">" and its super classes have no public methods with the @Subscribe annotation"</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">//放到缓存当中</span></span><br><span class="line">		METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br><span class="line">		<span class="keyword">return</span> subscriberMethods;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用 <code>EventBus.getDefault()</code> 时用的是默认的 builder ，而当使用 <code>EventBusBuilder.installDefaultEventBus()</code> 时是设置自己可配置的 builder 。这里我们先讨论默认情况下的。所以应该走到 <code>findUsingInfo(subscriberClass)</code> 方法来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1.得到一个FindState对象</span></span><br><span class="line">  	FindState findState = prepareFindState();</span><br><span class="line">	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别看一下 <code>prepareFindState</code> 和 <code>FindState</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FindState复用池大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> POOL_SIZE = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//FindState复用池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> FindState[] FIND_STATE_POOL = <span class="keyword">new</span> FindState[POOL_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> FindState <span class="title">prepareFindState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">synchronized</span> (FIND_STATE_POOL) &#123;</span><br><span class="line">      	<span class="comment">//遍历复用池</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++) &#123;</span><br><span class="line">			FindState state = FIND_STATE_POOL[i];</span><br><span class="line">          	<span class="comment">//如果找到可复用state，将该位置清空，返回state</span></span><br><span class="line">			<span class="keyword">if</span> (state != <span class="keyword">null</span>) &#123;</span><br><span class="line">				FIND_STATE_POOL[i] = <span class="keyword">null</span>;</span><br><span class="line">				<span class="keyword">return</span> state;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//没找到的话自己new一个</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> FindState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>prepareFindState</code> 主要是得到一个<code>FindState</code>，那么看一下 <code>FindState</code> 类的结构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FindState</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//订阅者的方法的列表</span></span><br><span class="line">	<span class="keyword">final</span> List&lt;SubscriberMethod&gt; subscriberMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  	<span class="comment">//以EventType为key，method为value</span></span><br><span class="line">	<span class="keyword">final</span> Map&lt;Class, Object&gt; anyMethodByEventType = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	<span class="comment">//以method的名字生成一个methodKey为key，该method的类(订阅者)为value</span></span><br><span class="line">  	<span class="keyword">final</span> Map&lt;String, Class&gt; subscriberClassByMethodKey = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  	<span class="comment">//构建methodKey的StringBuilder</span></span><br><span class="line">	<span class="keyword">final</span> StringBuilder methodKeyBuilder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line">	<span class="comment">//订阅者</span></span><br><span class="line">	Class&lt;?&gt; subscriberClass;</span><br><span class="line">  	<span class="comment">//当前类</span></span><br><span class="line">	Class&lt;?&gt; clazz;</span><br><span class="line">  	<span class="comment">//是否跳过父类</span></span><br><span class="line">	<span class="keyword">boolean</span> skipSuperClasses;</span><br><span class="line">  	<span class="comment">//SubscriberInfo</span></span><br><span class="line">	SubscriberInfo subscriberInfo;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">initForSubscriber</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">//clazz为当前类</span></span><br><span class="line">		<span class="keyword">this</span>.subscriberClass = clazz = subscriberClass;</span><br><span class="line">		skipSuperClasses = <span class="keyword">false</span>;</span><br><span class="line">		subscriberInfo = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续 <code>findUsingInfo(subscriberClass)</code> 的流程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1.得到一个FindState对象</span></span><br><span class="line">  	FindState findState = prepareFindState();</span><br><span class="line">  	<span class="comment">//2.subscriberClass赋值给findState</span></span><br><span class="line">	findState.initForSubscriber(subscriberClass);</span><br><span class="line">  	<span class="comment">//2.findState的当前class不为null</span></span><br><span class="line">	<span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">      	<span class="comment">//2.默认情况下，getSubscriberInfo()返回的是null</span></span><br><span class="line">		findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class="line">      	<span class="comment">//2.那么这个if判断就跳过了</span></span><br><span class="line">		<span class="keyword">if</span> (findState.subscriberInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">			SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class="line">			<span class="keyword">for</span> (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class="line">				<span class="keyword">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class="line">					findState.subscriberMethods.add(subscriberMethod);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">//2.来到了这里</span></span><br><span class="line">			findUsingReflectionInSingleClass(findState);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//blablabla......</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>findUsingReflectionInSingleClass()</code> 很重要，在这个方法中找到了哪些是订阅者订阅的方法和事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在较新的类文件，编译器可能会添加方法。那些被称为BRIDGE或SYNTHETIC方法。EventBus必须忽略两者。有修饰符没有公开，但在Java类文件中有格式定义</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BRIDGE = <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNTHETIC = <span class="number">0x1000</span>;</span><br><span class="line"><span class="comment">//需要忽略的修饰符</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findUsingReflectionInSingleClass</span><span class="params">(FindState findState)</span> </span>&#123;</span><br><span class="line">	Method[] methods;</span><br><span class="line">  	<span class="comment">//通过反射，获取到订阅者的所有方法</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span></span><br><span class="line">		methods = findState.clazz.getDeclaredMethods();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">		<span class="comment">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span></span><br><span class="line">		methods = findState.clazz.getMethods();</span><br><span class="line">        findState.skipSuperClasses = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">		<span class="comment">//拿到修饰符</span></span><br><span class="line">      	<span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line">      	<span class="comment">//判断是否是public，是否有需要忽略修饰符</span></span><br><span class="line">		<span class="keyword">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class="number">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class="number">0</span>) &#123;</span><br><span class="line">          	<span class="comment">//获得方法的参数 </span></span><br><span class="line">			Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">          	<span class="comment">//EventBus只允许订阅方法后面的订阅事件是一个</span></span><br><span class="line">			<span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">              	<span class="comment">//判断该方法是不是被Subcribe的注解修饰着的</span></span><br><span class="line">				Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</span><br><span class="line">				<span class="keyword">if</span> (subscribeAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  	<span class="comment">//确定这是一个订阅方法</span></span><br><span class="line">					Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">if</span> (findState.checkAdd(method, eventType)) &#123;</span><br><span class="line">                      	<span class="comment">//通过Annotation去拿一些数据</span></span><br><span class="line">						ThreadMode threadMode = subscribeAnnotation.threadMode();</span><br><span class="line">                        <span class="comment">//添加到subscriberMethods中</span></span><br><span class="line">                      	findState.subscriberMethods.add(<span class="keyword">new</span> SubscriberMethod(method, eventType, threadMode, ubscribeAnnotation.priority(), subscribeAnnotation.sticky()));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">				String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"@Subscribe method "</span> + methodName + <span class="string">"must have exactly 1 parameter but has "</span> + parameterTypes.length);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</span><br><span class="line">			String methodName = method.getDeclaringClass().getName() + <span class="string">"."</span> + method.getName();</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(methodName + <span class="string">" is a illegal @Subscribe method: must be public, non-static, and non-abstract"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于 <code>BRIDGE</code> 和 <code>SYNTHETIC</code> ，注释写道：</p>
<blockquote>
<p>In newer class files, compilers may add methods. Those are called bridge or synthetic methods. EventBus must ignore both. There modifiers are not public but defined in the Java class file format: <a href="http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1" target="_blank" rel="external">http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1</a></p>
</blockquote>
<p>在较新的类文件，编译器可能会添加方法。那些被称为 BRIDGE 或 SYNTHETIC 方法。EventBus 必须忽略两者。有修饰符没有公开，但在 Java 类文件中有格式定义。</p>
<p>该方法流程是：</p>
<ol>
<li>拿到当前 class 的所有方法</li>
<li>过滤掉不是 public 和是 abstract、static、bridge、synthetic 的方法</li>
<li>过滤出方法参数只有一个的方法</li>
<li>过滤出被Subscribe注解修饰的方法</li>
<li>将 method 方法和 event 事件添加到 <code>findState</code> 中</li>
<li>将 EventBus 关心的 method 方法、event 事件、threadMode、priority、sticky 封装成 <code>SubscriberMethod</code> 对象添加到 <code>findState.subscriberMethods</code> 列表中</li>
</ol>
<p>那么，先来看看 <code>findState.checkAdd()</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkAdd</span><span class="params">(Method method, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 2 level check: 1st level with event type only (fast), 2nd level with complete signature when required.</span></span><br><span class="line">	<span class="comment">// Usually a subscriber doesn't have methods listening to the same event type.</span></span><br><span class="line">    Object existing = anyMethodByEventType.put(eventType, method);</span><br><span class="line">    <span class="keyword">if</span> (existing == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (existing <span class="keyword">instanceof</span> Method) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!checkAddWithMethodSignature((Method) existing, eventType)) &#123;</span><br><span class="line">				<span class="comment">// Paranoia check</span></span><br><span class="line">              	<span class="comment">// 此时的情况是已经在缓存中有这个method和eventType的，发生情况是子类和父类都是相同事件，相同方法名，切超过3层继承关系</span></span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Put any non-Method object to "consume" the existing Method</span></span><br><span class="line">			anyMethodByEventType.put(eventType, <span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> checkAddWithMethodSignature(method, eventType);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>checkAdd</code> 分为两个层级的 check ，第一层级只判断 event type，这样速度快一些；第二层级是多方面判断。<code>anyMethodByEventType</code> 是一个 HashMap ，<code>HashMap.put()</code> 方法返回的是之前的 value ，如果之前没有 value 的话返回的是 null ，通常一个订阅者（包括继承关系）不会有多个相同方法接收同一事件，但是可能会出现子类订阅这个事件的同时父类也订阅了此事件的情况，那么 <code>checkAddWithMenthodSignature()</code> 就排上了用场：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkAddWithMethodSignature</span><span class="params">(Method method, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">	methodKeyBuilder.setLength(<span class="number">0</span>);</span><br><span class="line">	methodKeyBuilder.append(method.getName());</span><br><span class="line">	methodKeyBuilder.append(<span class="string">'&gt;'</span>).append(eventType.getName());</span><br><span class="line"></span><br><span class="line">	String methodKey = methodKeyBuilder.toString();</span><br><span class="line">	Class&lt;?&gt; methodClass = method.getDeclaringClass();</span><br><span class="line"> 	<span class="comment">//存储到以methodKey为Key，method的类为value的map中，返回之前methodKey存储的值</span></span><br><span class="line">	Class&lt;?&gt; methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);</span><br><span class="line">  	<span class="comment">//如果这个值不存在或者这个值是method的类的父类的话，返回true</span></span><br><span class="line">	<span class="keyword">if</span> (methodClassOld == <span class="keyword">null</span> || methodClassOld.isAssignableFrom(methodClass)) &#123;</span><br><span class="line">		<span class="comment">// Only add if not already found in a sub class</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Revert the put, old class is further down the class hierarchy</span></span><br><span class="line">		subscriberClassByMethodKey.put(methodKey, methodClassOld);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的稍微逻辑有一些乱，但是其主要思想就是不要出现一个订阅者（主要是有继承关系的订阅者）有多个相同方法订阅的是同一事件。</p>
<p>现在回过头来看一下 <code>SubscriberMethod</code> 这个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriberMethod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">final</span> ThreadMode threadMode;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; eventType;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> priority;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> sticky;</span><br><span class="line">    <span class="comment">/** Used for efficient comparison */</span></span><br><span class="line">    String methodString;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubscriberMethod</span><span class="params">(Method method, Class&lt;?&gt; eventType, ThreadMode threadMode, <span class="keyword">int</span> priority, <span class="keyword">boolean</span> sticky)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.threadMode = threadMode;</span><br><span class="line">        <span class="keyword">this</span>.eventType = eventType;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">        <span class="keyword">this</span>.sticky = sticky;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SubscriberMethod</code> 类将EventBus所需要的全封装起来了。</p>
<p>再回到 <code>findUsingInfo(subscriberClass)</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;SubscriberMethod&gt; <span class="title">findUsingInfo</span><span class="params">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1.得到一个FindState对象</span></span><br><span class="line">  	FindState findState = prepareFindState();</span><br><span class="line">  	<span class="comment">//2.subscriberClass赋值给findState</span></span><br><span class="line">	findState.initForSubscriber(subscriberClass);</span><br><span class="line">  	<span class="comment">//2.findState的当前clazz不为null</span></span><br><span class="line">	<span class="keyword">while</span> (findState.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">      	<span class="comment">//2.默认情况下，getSubscriberInfo()返回的是null</span></span><br><span class="line">		findState.subscriberInfo = getSubscriberInfo(findState);</span><br><span class="line">      	<span class="comment">//2.那么这个if判断就跳过了</span></span><br><span class="line">		<span class="keyword">if</span> (findState.subscriberInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">			SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</span><br><span class="line">			<span class="keyword">for</span> (SubscriberMethod subscriberMethod : array) &#123;</span><br><span class="line">				<span class="keyword">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</span><br><span class="line">					findState.subscriberMethods.add(subscriberMethod);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;<span class="comment">//2.来到了这里</span></span><br><span class="line">			findUsingReflectionInSingleClass(findState);</span><br><span class="line">		&#125;</span><br><span class="line">      	<span class="comment">//3.将当前clazz变为该类的父类，然后再进行while循环的判断</span></span><br><span class="line">		findState.moveToSuperclass();.</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//3.将findState释放资源，放回复用池中，返回封装好的SubscriberMethod列表</span></span><br><span class="line">	<span class="keyword">return</span> getMethodsAndRelease(findState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结一下 <code>subscriberClass</code> 的流程：</p>
<ol>
<li><p>从复用池中或者 new 一个，得到 findState</p>
</li>
<li><p>将 subscriberClass 复制给 findState</p>
<ol>
<li><p>进入循环，判断当前 clazz 为不为null</p>
</li>
<li><p>不为 null 的话调用 <code>findUsingReflectionInSingleClass()</code> 方法得到该类的所有的 <code>SubscriberMethod</code></p>
</li>
<li><p>将 clazz 变为 clazz 的父类，再次进行循环的判断</p>
</li>
</ol>
</li>
<li>返回所有的 <code>SubscriberMethod</code></li>
</ol>
<p>现在一层层 return 返回到了 <code>findSubscriberMethods()</code> 方法中，将所有的 <code>SubscriberMethod</code> 存储到 <code>METHOD_CACHE</code> 当中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">METHOD_CACHE.put(subscriberClass, subscriberMethods);</span><br></pre></td></tr></table></figure>
<p>再一层层的 return 返回到 <code>EventBus.register()</code> 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//拿到订阅者的class</span></span><br><span class="line">	Class&lt;?&gt; subscriberClass = subscriber.getClass();</span><br><span class="line">  	<span class="comment">//通过class去找到订阅方法</span></span><br><span class="line">	List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      	<span class="comment">//遍历</span></span><br><span class="line">		<span class="keyword">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</span><br><span class="line">          	<span class="comment">//订阅</span></span><br><span class="line">			subscribe(subscriber, subscriberMethod);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="EventBus-subscribe"><a href="#EventBus-subscribe" class="headerlink" title="EventBus.subscribe"></a>EventBus.subscribe</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//拿到事件</span></span><br><span class="line">  	Class&lt;?&gt; eventType = subscriberMethod.eventType;</span><br><span class="line">  	<span class="comment">//封装一个Subscription出来，Subscription是将订阅者和订阅方法封装类(包括threadMode、sticky等)封装一起来了</span></span><br><span class="line">	Subscription newSubscription = <span class="keyword">new</span> Subscription(subscriber, subscriberMethod);</span><br><span class="line">	<span class="comment">//subscriptionsByEventType是以eventType为key，Subscription的ArrayList为value的HashMap，事件订阅者的保存队列，找到该事件所订阅的订阅者以及订阅者的方法、参数等</span></span><br><span class="line">  	CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">  	<span class="comment">//如果没有数据，说明此事件是还没有注册过的</span></span><br><span class="line">	<span class="keyword">if</span> (subscriptions == <span class="keyword">null</span>) &#123;</span><br><span class="line">		subscriptions = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        subscriptionsByEventType.put(eventType, subscriptions);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;<span class="comment">//说明此事件是已经有地方注册过了的</span></span><br><span class="line">		<span class="keyword">if</span> (subscriptions.contains(newSubscription)) &#123;<span class="comment">//说明该订阅者已经注册过了的</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Subscriber "</span> + subscriber.getClass() + <span class="string">" already registered to event "</span> + eventType);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">      	<span class="comment">//根据优先级添加到指定位置</span></span><br><span class="line">		<span class="keyword">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</span><br><span class="line">			subscriptions.add(i, newSubscription);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//typesBySubscriber以subscriber为key，eventType的ArrayList为value的HashMap，订阅者订阅的事件列表，找到改订阅者所订阅的所有事件</span></span><br><span class="line">	List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</span><br><span class="line">	<span class="keyword">if</span> (subscribedEvents == <span class="keyword">null</span>) &#123;</span><br><span class="line">		subscribedEvents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		typesBySubscriber.put(subscriber, subscribedEvents);</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//添加到该订阅者的所以订阅方法列表中</span></span><br><span class="line">	subscribedEvents.add(eventType);</span><br><span class="line">	<span class="comment">//如果是粘性事件</span></span><br><span class="line">	<span class="keyword">if</span> (subscriberMethod.sticky) &#123;</span><br><span class="line">      	<span class="comment">//是否支持继承关系，就是记录事件的父类(比如事件是ArrayList类型的，那么如果eventInheritance为true的话，会去找为List类型的事件。)</span></span><br><span class="line">		<span class="keyword">if</span> (eventInheritance) &#123;</span><br><span class="line">			<span class="comment">// Existing sticky events of all subclasses of eventType have to be considered.</span></span><br><span class="line">			<span class="comment">// Note: Iterating over all events may be inefficient with lots of sticky events,</span></span><br><span class="line">			<span class="comment">// thus data structure should be changed to allow a more efficient lookup</span></span><br><span class="line">			<span class="comment">// (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span></span><br><span class="line">          	<span class="comment">//stickyEvents以eventType为key，event为value的ConcurrentHashMap，Sticky事件保存队列</span></span><br><span class="line">			Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</span><br><span class="line">			<span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</span><br><span class="line">				Class&lt;?&gt; candidateEventType = entry.getKey();</span><br><span class="line">              	<span class="comment">//是否有继承关系</span></span><br><span class="line">				<span class="keyword">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</span><br><span class="line">					Object stickyEvent = entry.getValue();</span><br><span class="line">                  	<span class="comment">//分发事件</span></span><br><span class="line">                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Object stickyEvent = stickyEvents.get(eventType);</span><br><span class="line">	        <span class="comment">//分发事件</span></span><br><span class="line">			checkPostStickyEventToSubscription(newSubscription, stickyEvent);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先判断是否有注册过，然后再按照优先级加入到 <code>subscriptionsByEventType</code> 的 value 的 List 中，而 <code>subscriptionsByEventType</code> 是事件订阅者的保存队列，找到该事件所订阅的订阅者以及订阅者的方法、参数等，然后再添加到 <code>typesBySubscriber</code> 的 value 的 List 中，而 <code>typesBySubscriber</code> 是订阅者订阅的事件列表，找到改订阅者所订阅的所有事件，最后判断一下是否是粘性事件，是的话判断事件是否需要考虑继承关系，再分发这个黏性事件。</p>
<p>那么来看一下 <code>checkPostStickyEventToSubscription</code> 这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPostStickyEventToSubscription</span><span class="params">(Subscription newSubscription, Object stickyEvent)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (stickyEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="comment">// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)</span></span><br><span class="line">        <span class="comment">// --&gt; Strange corner case, which we don't take care of here.</span></span><br><span class="line">        postToSubscription(newSubscription, stickyEvent, Looper.getMainLooper() == Looper.myLooper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看看 <code>postToSubscription</code> 这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToSubscription</span><span class="params">(Subscription subscription, Object event, <span class="keyword">boolean</span> isMainThread)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (subscription.subscriberMethod.threadMode) &#123;</span><br><span class="line">		<span class="keyword">case</span> POSTING:<span class="comment">//当前线程直接调用</span></span><br><span class="line">			invokeSubscriber(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MAIN:</span><br><span class="line">            <span class="keyword">if</span> (isMainThread) &#123;<span class="comment">//如果现在是UI线程，直接调用</span></span><br><span class="line">				invokeSubscriber(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则加入到mainThreadPoster队列中</span></span><br><span class="line">                mainThreadPoster.enqueue(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> BACKGROUND:</span><br><span class="line">			<span class="keyword">if</span> (isMainThread) &#123;<span class="comment">//如果现在是UI线程，加入到backgroundPoster队列中</span></span><br><span class="line">                backgroundPoster.enqueue(subscription, event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则直接调用</span></span><br><span class="line">       	        invokeSubscriber(subscription, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      	<span class="keyword">case</span> ASYNC:<span class="comment">//无论如何都加入到asyncPoster队列中</span></span><br><span class="line">            asyncPoster.enqueue(subscription, event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown thread mode: "</span> + subscription.subscriberMethod.threadMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这三个 <code>Poster</code> 在上文都已经分析过了，那么来看看 <code>invokeSubscriber</code> 方法吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">invokeSubscriber</span><span class="params">(Subscription subscription, Object event)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        handleSubscriberException(subscription, event, e.getCause());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终通过反射调用。</p>
<h3 id="注销订阅者"><a href="#注销订阅者" class="headerlink" title="注销订阅者"></a>注销订阅者</h3><p>讲完了注册订阅者，再来看看注销订阅者吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object subscriber)</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//typesBySubscriber以subscriber为key，eventType的ArrayList为value的HashMap，订阅者订阅的事件列表，找到改订阅者所订阅的所有事件</span></span><br><span class="line">	List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);</span><br><span class="line">	<span class="keyword">if</span> (subscribedTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (Class&lt;?&gt; eventType : subscribedTypes) &#123;</span><br><span class="line">			unsubscribeByEventType(subscriber, eventType);</span><br><span class="line">		&#125;</span><br><span class="line">      	<span class="comment">//remove掉</span></span><br><span class="line">        typesBySubscriber.remove(subscriber);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		Log.w(TAG, <span class="string">"Subscriber to unregister was not registered before: "</span> + subscriber.getClass());</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看看 <code>unsubscribeByEventType</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unsubscribeByEventType</span><span class="params">(Object subscriber, Class&lt;?&gt; eventType)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//subscriptionsByEventType是以eventType为key，Subscription的ArrayList为value的HashMap，事件订阅者的保存队列，找到该事件所订阅的订阅者以及订阅者的方法、参数等</span></span><br><span class="line">  	List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</span><br><span class="line">    <span class="keyword">if</span> (subscriptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> size = subscriptions.size();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			Subscription subscription = subscriptions.get(i);</span><br><span class="line">			<span class="keyword">if</span> (subscription.subscriber == subscriber) &#123;</span><br><span class="line">				subscription.active = <span class="keyword">false</span>;</span><br><span class="line">	            <span class="comment">//remove掉</span></span><br><span class="line">                subscriptions.remove(i);</span><br><span class="line">                i--;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注销的流程就是将 <code>typesBySubscriber</code> 和 <code>subscriptionsByEventType</code> 中的关于该订阅者以及该订阅者中的方法、事件等 remove 掉。</p>
<h3 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h3><p>看完注册和注销之后，再来看看发送事件。可以从代码的任何地方发送事件，此时注册了的且匹配事件的订阅者能够接收到事件。通过 <code>EventBus.post(event)</code> 来发送事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//1.得到PostingThreadState</span></span><br><span class="line">	PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class="line">	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>currentPostingThreadState</code> 是一个 <code>ThreadLocal</code> 对象，而 <code>ThreadLocal</code> 是线程独有，不会与其他线程共享的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;PostingThreadState&gt; currentPostingThreadState = <span class="keyword">new</span> ThreadLocal&lt;PostingThreadState&gt;() &#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> PostingThreadState <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> PostingThreadState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其实现是返回一个 <code>PostingThreadState</code> 对象，而 <code>PostingThreadState</code> 类的结构是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** For ThreadLocal, much faster to set (and get multiple values). */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PostingThreadState</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> List&lt;Object&gt; eventQueue = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> isPosting;</span><br><span class="line">    <span class="keyword">boolean</span> isMainThread;</span><br><span class="line">    Subscription subscription;</span><br><span class="line">    Object event;</span><br><span class="line">    <span class="keyword">boolean</span> canceled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>PostingThreadState</code> 封装的是当前线程的 post 信息，包括事件队列、是否正在分发中、是否在主线程、订阅者信息、事件实例、是否取消。那么回到 <code>post</code> 方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1.得到PostingThreadState</span></span><br><span class="line">	PostingThreadState postingState = currentPostingThreadState.get();</span><br><span class="line">  	<span class="comment">//2.获取其中的队列</span></span><br><span class="line">	List&lt;Object&gt; eventQueue = postingState.eventQueue;</span><br><span class="line">  	<span class="comment">//2.将该事件添加到队列中</span></span><br><span class="line">	eventQueue.add(event);</span><br><span class="line">	<span class="comment">//2.如果postingState没有进行发送</span></span><br><span class="line">	<span class="keyword">if</span> (!postingState.isPosting) &#123;</span><br><span class="line">      	<span class="comment">//2. 判断当前线程是否是主线程</span></span><br><span class="line">		postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();</span><br><span class="line">        <span class="comment">//2.将isPosting状态改为true，表明正在发送中</span></span><br><span class="line">      	postingState.isPosting = <span class="keyword">true</span>;</span><br><span class="line">      	<span class="comment">//2.如果取消掉了，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (postingState.canceled) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EventBusException(<span class="string">"Internal error. Abort state was not reset"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          	<span class="comment">//2.循环，直至队列为空</span></span><br><span class="line">			<span class="keyword">while</span> (!eventQueue.isEmpty()) &#123;</span><br><span class="line">              	<span class="comment">//2.发送事件</span></span><br><span class="line">				postSingleEvent(eventQueue.remove(<span class="number">0</span>), postingState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			postingState.isPosting = <span class="keyword">false</span>;</span><br><span class="line">			postingState.isMainThread = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后走到一个 <code>while</code> 循环，判断事件队列是否为空了，如果不为空，继续循环，进行 <code>postSingleEvent</code> 操作，从事件队列中取出一个事件进行发送。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postSingleEvent</span><span class="params">(Object event, PostingThreadState postingState)</span> <span class="keyword">throws</span> Error </span>&#123;</span><br><span class="line">	Class&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">boolean</span> subscriptionFound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (eventInheritance) &#123;<span class="comment">//是否查看事件的继承关系</span></span><br><span class="line">      	<span class="comment">//找到事件的所以继承关系的事件类型</span></span><br><span class="line">		List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</span><br><span class="line">        <span class="keyword">int</span> countTypes = eventTypes.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; countTypes; h++) &#123;</span><br><span class="line">			Class&lt;?&gt; clazz = eventTypes.get(h);</span><br><span class="line">          	<span class="comment">//发送事件</span></span><br><span class="line">            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      	<span class="comment">//直接发送事件</span></span><br><span class="line">        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</span><br><span class="line">    &#125;</span><br><span class="line">  	</span><br><span class="line">    <span class="keyword">if</span> (!subscriptionFound) &#123;<span class="comment">//如果没有任何事件</span></span><br><span class="line">		<span class="keyword">if</span> (logNoSubscriberMessages) &#123;</span><br><span class="line">			Log.d(TAG, <span class="string">"No subscribers registered for event "</span> + eventClass);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp; eventClass != SubscriberExceptionEvent.class) &#123;</span><br><span class="line">          	<span class="comment">//发送一个NoSubscriberEvent的事件出去</span></span><br><span class="line">            post(<span class="keyword">new</span> NoSubscriberEvent(<span class="keyword">this</span>, event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>lookupAllEventTypes()</code> 就是查找该事件的所有父类，返回所有的该事件的父类的 class 。它通过循环和递归一起用，将一个类的父类（接口）全部添加到全局静态变量 <code>eventTypes</code> 集合中。再看一下 <code>postSingleEventForEventType</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">postSingleEventForEventType</span><span class="params">(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass)</span> </span>&#123;</span><br><span class="line">	CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      	<span class="comment">//所有订阅了event的事件集合</span></span><br><span class="line">		subscriptions = subscriptionsByEventType.get(eventClass);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (subscriptions != <span class="keyword">null</span> &amp;&amp; !subscriptions.isEmpty()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (Subscription subscription : subscriptions) &#123;</span><br><span class="line">			postingState.event = event;</span><br><span class="line">			postingState.subscription = subscription;</span><br><span class="line">            <span class="keyword">boolean</span> aborted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              	<span class="comment">//这里调用的postToSubscription方法，上面有解析</span></span><br><span class="line">				postToSubscription(subscription, event, postingState.isMainThread);</span><br><span class="line">                aborted = postingState.canceled;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                postingState.event = <span class="keyword">null</span>;</span><br><span class="line">                postingState.subscription = <span class="keyword">null</span>;</span><br><span class="line">                postingState.canceled = <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (aborted) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，<code>EventBus</code> 的解析就结束了。</p>
<h2 id="EventBus流程整理"><a href="#EventBus流程整理" class="headerlink" title="EventBus流程整理"></a>EventBus流程整理</h2><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><ol>
<li>根据订阅者来找到订阅方法和事件，封装成 <code>SubscriberMehod</code></li>
<li>循环每个 <code>SubscriberMethod</code></li>
<li>通过事件得到该事件的所有订阅者列表，再根据优先级插入到 <code>subscriptionsByEventType</code> 的所有订阅者列表中</li>
<li>通过订阅者得到该订阅者的所有事件列表，再将事件添加到 <code>typeBySubscriber</code> 的所以事件列表中</li>
<li>是否是粘性事件</li>
<li>是的话进行分发，post此事件给当前订阅者，不是的话不管</li>
<li>结束本次循环，跳到 2</li>
</ol>
<h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><ol>
<li>从 <code>currentPostingThreadState</code> 中得到当前线程的 <code>PostThreadState</code> 信息</li>
<li>将此事件添加到 <code>PostPostThreadState</code> 的事件队列中</li>
<li>判断是否再分发</li>
<li>不是的话，循环队列，是的话跳 7</li>
<li>判断是个需要继承关系</li>
<li>是的话，循环得到父类，不是的话跳 7</li>
<li>查找该事件的订阅者，循环订阅者</li>
<li>根据 <code>ThreadMoth</code> 发送事件</li>
<li>结束本次循环订阅者，跳 7</li>
<li>结束本次循环队列，跳 4</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">EventBus 源码解析</a></li>
<li>EventBus源码研读 <a href="http://kymjs.com/code/2015/12/12/01/" target="_blank" rel="external">上</a> <a href="http://www.kymjs.com/code/2015/12/13/01/" target="_blank" rel="external">中</a> <a href="http://www.kymjs.com/code/2015/12/16/01/" target="_blank" rel="external">下</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> EventBus </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ListView优化总结]]></title>
      <url>/2016/02/28/listview-optimize/</url>
      <content type="html"><![CDATA[<p>ListView 的优化总结，包括利用好 ConvertView、利用好 ViewType、Layout 层次结构、ViewHolder、使用自定义布局、保证 Adapter 的 hasStableIds() 返回 true、Item 不能太高、getView() 中要做尽量少的事情、ListView 中元素避免半透明、尽量开启硬件加速、 AnimationCache、 ScrollingCache 和 SmoothScrollbar。</p>
<a id="more"></a>
<h2 id="利用好-ConvertView"><a href="#利用好-ConvertView" class="headerlink" title="利用好 ConvertView"></a>利用好 ConvertView</h2><p>尽可能的少去执行 Layout 的 Inflate 。即使 Layout 文件已经被高效的解析程序转换为了二进制代码，Layout 的 Inflate 仍然是巨消耗资源的。Infalte 操作依旧需要彻底包含整个 XML 代码树，而且还要实例化相应的View。</p>
<p>在初始显示的时候，每次显示一个 item 都调用一次 <code>getview()</code> ，但是每次调用的时候 covertView 为 null ，当显示完了之后。如果屏幕移动了之后，并且导致有些 item 的 View 移到屏幕外面，此时如果还有新的 item 需要产生，则这些 item 显示时调用的 <code>getView()</code> 方法，此时 <code>getView()</code> 中的 convertview 参数就不是 null ，而是那些移出屏幕的 View ，我们所要做的就是将需要显示的 item 填充到这些回收的 View 中去，最后注意 convertview 为 null 的不仅仅是初始显示的那些 item ，还要可能跟 <code>ViewType</code> 有关。</p>
<h2 id="利用好-ViewType"><a href="#利用好-ViewType" class="headerlink" title="利用好 ViewType"></a>利用好 ViewType</h2><p>如果ListView中要显示多种布局文件（类似聊天界面那种），可以使用 <code>ViewType</code> 。其中涉及到两个方法，分别是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getItemViewType(position);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getViewTypeCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个方法是告诉 ListView 当前 position 对应哪种 <code>ViewType</code> ，第二个方法是告诉 ListView 一共有多少中 <code>ViewType</code> 。</p>
<p>如果要实现聊天界面那种，这是一种可行方案，同样可行方案是使用同一个布局，但是在 getView() 中去判断是<code>发送消息类型</code>还是<code>接收消息类型</code>，然后去调用 <code>View.setVisibility(View.VISIBLE)</code> 或 <code>View.setVisibility(View.GONE)</code> ，<strong>但是这样的话会导致 Layout 的层次结构复杂</strong>。</p>
<p>同样，如果是使用 <code>ViewType</code> 的话，与上面那种相比可能会使 ListView 中的子 View 变多。</p>
<p>如果想动态向 ListView 中添加 HeaderView 或者 FooterView ，可以结合这两个方法。</p>
<h2 id="Item-View-的-Layout-层次结构简单"><a href="#Item-View-的-Layout-层次结构简单" class="headerlink" title="Item View 的 Layout 层次结构简单"></a>Item View 的 Layout 层次结构简单</h2><p>善用自定义 View，自定义 View 可以有效的减小 Layout 的层级。</p>
<h2 id="减少View绘制时间"><a href="#减少View绘制时间" class="headerlink" title="减少View绘制时间"></a>减少View绘制时间</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Android系统每隔16.7ms发出一个渲染信号，通知ui线程进行界面的渲染。当一个ListView被添加到布局时 <code>getView()</code> 方法将会被回调。在16.7毫秒时间单内，ListView 中 item 将调用 <code>getView()</code> 方法，并且需要显示多少个 item 就会调用多少次 <code>getView()</code> 方法。在大多数情况下，由于其他绘图行为的存在，例如 <code>measure</code> 和 <code>draw</code> ，<code>getView()</code> 实际分配到执行时间远低于16ms。一旦ListView包含复杂控件时，在16毫秒内不能完成渲染，用户只能看到上一帧的结果，这时就发生了掉帧。</p>
<h3 id="减短时间"><a href="#减短时间" class="headerlink" title="减短时间"></a>减短时间</h3><p>比如把 item 中控件高度尽量固定，比如固定值或者 <code>match_parent</code> 。慎用 <code>layout_weight</code> 类似属性，以便缩短 View 的 <code>measure</code> 时间。</p>
<h3 id="控件更新前先对比数据"><a href="#控件更新前先对比数据" class="headerlink" title="控件更新前先对比数据"></a>控件更新前先对比数据</h3><p>设置 View （如 TextView.setText() ）之前先对比数据是否有改变。一般来说，<code>比较两个数据的代价</code>远小于 <code>View 的重绘的代价</code>。</p>
<h3 id="Instagram-预渲染文本"><a href="#Instagram-预渲染文本" class="headerlink" title="Instagram 预渲染文本"></a>Instagram 预渲染文本</h3><p>ins 中一条消息也很长，而且起初 <code>measure</code> 和 <code>draw</code> 时间都超过了16ms。ins 使用了 <code>text.Layout</code> 并且缓存了 <code>text.Layout</code> 实例。同时自定义View实现自己去控制 <code>text.Layout</code> 的绘制，这样有很多好处，比如可以使用 <code>StaticLayout</code> 而不是 <code>DynamicLayout</code>、避免从 <code>SpannableStringBuilder</code> 转换 <code>String</code> 的过程（前提是看文字中是否有links）、避免 <code>TextView</code> 中不需要的逻辑。比如监控文本信息的改变等。</p>
<h2 id="ViewHolder"><a href="#ViewHolder" class="headerlink" title="ViewHolder"></a>ViewHolder</h2><p>使用 ViewHolder 的原因是 <code>findViewById()</code> 方法耗时较大，如果控件个数过多，会严重影响性能，而使用ViewHolder主要是为了可以省去这个时间。<strong>注意 viewHolder 里面 item 方法重绘：如 invalidate ， setVisibility ， requestLayout 后，会调用 adapter 的 getView() 方法。</strong></p>
<h2 id="尽量自定义布局"><a href="#尽量自定义布局" class="headerlink" title="尽量自定义布局"></a>尽量自定义布局</h2><p>自定义布局有个好处就是可以省略 <code>ViewHolder</code>。说出来可能你不会信， <code>ViewHolder</code> 首先会占用 <code>setTag()</code> ，其次每次取出后都需要转换一下类的类型。如果是自定义布局的话，<code>findViewById()</code> 这个过程可以在构造函数中进行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> TextView mTitleTextView;</span><br><span class="line">	<span class="keyword">private</span> TextView mDescriptionTextView;</span><br><span class="line">	<span class="keyword">private</span> ImageView mImageView;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.item_view_children, <span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">        setupChildren();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ItemView <span class="title">inflate</span><span class="params">(ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        ItemView itemView = (ItemView)LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.item_view, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> itemView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTitleTextView = (TextView) findViewById(R.id.item_titleTextView);</span><br><span class="line">        mDescriptionTextView = (TextView) findViewById(R.id.item_descriptionTextView);</span><br><span class="line">        mImageView = (ImageView) findViewById(R.id.item_imageView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        mTitleTextView.setText(item.getTitle());</span><br><span class="line">        mDescriptionTextView.setText(item.getDescription());</span><br><span class="line">        <span class="comment">// set up image URL blablabla...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样操作的话，在 Adapter 的 <code>getView()</code> 中的操作就少了 <code>ViewHolder</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ItemAdapter</span><span class="params">(Context c, List&lt;Item&gt; items)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(c, <span class="number">0</span>, items);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">            ItemView itemView = (ItemView)convertView;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == itemView)</span><br><span class="line">                itemView = ItemView.inflate(parent);</span><br><span class="line">            itemView.setItem(getItem(position));</span><br><span class="line">            <span class="keyword">return</span> itemView;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="尽量能保证-Adapter-的-hasStableIds-返回-true"><a href="#尽量能保证-Adapter-的-hasStableIds-返回-true" class="headerlink" title="尽量能保证 Adapter 的 hasStableIds() 返回 true"></a>尽量能保证 Adapter 的 hasStableIds() 返回 true</h2><blockquote>
<p>Indicates whether the item ids are stable across changes to the underlying data.</p>
</blockquote>
<p>这样在 <code>notifyDataSetChanged()</code> 的时候，如果 id 不变，ListView 将不会重新绘制这个 View，达到优化的目的；</p>
<p>这个在 RecyclerView 的时候得到了改善，多出了 <code>notifyItemMoved()</code> 等方法。毕竟 <code>notifyDataSetChanged()</code> 太暴力了。</p>
<h2 id="每个-Item-不能太高"><a href="#每个-Item-不能太高" class="headerlink" title="每个 Item 不能太高"></a>每个 Item 不能太高</h2><p>特别是不要超过屏幕的高度，最好在3/4以下，以便View的回收。这部分可以查看 <code>facebook</code> 的做法。</p>
<h2 id="getView-中要做尽量少的事情"><a href="#getView-中要做尽量少的事情" class="headerlink" title="getView() 中要做尽量少的事情"></a>getView() 中要做尽量少的事情</h2><p>为了保证 ListView 滑动的流畅性，不要有耗时的操作。很多时候，Android 应用在 ListView 每行中显示一些多媒体内容，比如图片等。在 Adapter 中的 <code>getView()</code> 使用应用内置的图片资源还是不会出什么问题的，因为可以存储在 Android 的高速缓存中。但当想显示来自本地磁盘或网络的内容时，例如缩略图，简历图片等，在这种情况下，可能不希望直接在 Adapter 中的 <code>getView()</code> 加载它们，因为IO进程会阻塞UI线程。如果这样做的话， ListView 就看起来非常卡顿。</p>
<h3 id="停下来再加载"><a href="#停下来再加载" class="headerlink" title="停下来再加载"></a>停下来再加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">listView.setOnScrollListener(<span class="keyword">new</span> AbsListView.OnScrollListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (scrollState)&#123;</span><br><span class="line">            <span class="keyword">case</span> SCROLL_STATE_TOUCH_SCROLL:</span><br><span class="line">            <span class="keyword">case</span> SCROLL_STATE_FLING:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SCROLL_STATE_IDLE:</span><br><span class="line">                <span class="keyword">int</span> start = listView.getFirstVisiblePosition();</span><br><span class="line">                <span class="keyword">int</span> end = listView.getLastVisiblePosition();</span><br><span class="line">                <span class="keyword">if</span>(end &gt;= listView.getCount())&#123;</span><br><span class="line">                    end = listView.getCount() - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//展示start－end之间的图片  blablabla......</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView,</span><br><span class="line">        ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    ViewHolder holder;</span><br><span class="line">    <span class="comment">///blablabla......</span></span><br><span class="line">    holder.position = position;</span><br><span class="line">    <span class="keyword">new</span> ThumbnailTask(position, holder)</span><br><span class="line">            .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThumbnailTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPosition;</span><br><span class="line">    <span class="keyword">private</span> ViewHolder mHolder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThumbnailTask</span><span class="params">(<span class="keyword">int</span> position, ViewHolder holder)</span> </span>&#123;</span><br><span class="line">        mPosition = position;</span><br><span class="line">        mHolder = holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Cursor <span class="title">doInBackground</span><span class="params">(Void... arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Download bitmap here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mHolder.position == mPosition) &#123;</span><br><span class="line">            mHolder.thumbnail.setImageBitmap(bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ImageView thumbnail;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，<strong>在滑动屏幕时，如果你一味的在每一个 <code>getView()</code> 调用里面都去启动一个异步的操作，造成的结果就是你会浪费大量资源。因为行被频繁回收，造成大部分返回的结果会被丢弃</strong>。</p>
<h2 id="监听器设置一个就OK了"><a href="#监听器设置一个就OK了" class="headerlink" title="监听器设置一个就OK了"></a>监听器设置一个就OK了</h2><p>不要在 getView() 中不断的去设置监听器，因为 View 是复用的，<strong>当 convertView 不为 null 时是已经设置了监听器的</strong>。同时当 convertView 为 null 时也不要去 new 监听器，假设一个屏幕上有10个 item ，那么就要 new 出10个监听器来。最佳的做法是这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> View.OnClickListener mOnClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">     <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//blablabla......</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//blablabla......</span></span><br><span class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">    	<span class="comment">//blablabla......</span></span><br><span class="line">        convertView.setOnClickListener(mOnClickListener);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  		<span class="comment">//blablabla......</span></span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做就不需要 new 出那么多监听器来了。</p>
<p>有人问，如果这样写，所有 button 只能通过 id 区分逻辑，无法传入每个 item 的数据，我们可以将数据通过 View 的 tag 带进来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123; </span><br><span class="line">	<span class="comment">//blablabla......</span></span><br><span class="line">	convertView.setTag(key, getItem(position));      </span><br><span class="line">	<span class="comment">//blablabla......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 <code>mOnClickListener</code> 中通过 <code>v.getTag(key)</code> 将数据取出。</p>
<h2 id="ListView-中元素避免半透明"><a href="#ListView-中元素避免半透明" class="headerlink" title="ListView 中元素避免半透明"></a>ListView 中元素避免半透明</h2><p>半透明绘制需要大量乘法计算，在滑动时不停重绘会造成大量的计算，在比较差的机子上会比较卡。在设计上能不半透明就不不半透明。<strong>实在要弄的话我个人是用个比较偷懒的方法，是在滑动的时候把半透明设置成不透明，滑动完再重新设置成半透明</strong>。</p>
<h2 id="尽量开启硬件加速"><a href="#尽量开启硬件加速" class="headerlink" title="尽量开启硬件加速"></a>尽量开启硬件加速</h2><p>硬件加速提升巨大，避免使用一些不支持的函数导致含泪关闭某个地方的硬件加速。</p>
<h2 id="AnimationCache"><a href="#AnimationCache" class="headerlink" title="AnimationCache"></a>AnimationCache</h2><p>在Layout布局中添加 <code>android:animationCache=&quot;false&quot;</code> ，或者调用方法 <code>public void setAnimationCacheEnabled(boolean enabled)</code> 。</p>
<blockquote>
<p>Enables or disables the children’s drawing cache during a layout animation.<br>By default, the drawing cache is enabled but this will prevent nested layout animations from working. To nest animations, you must disable the cache.</p>
</blockquote>
<p>在执行一个 Layout 动画时开启或关闭子控件的绘制缓存。默认情况下，绘制缓存是开启的，但是这将阻止嵌套 Layout 动画的正常执行。对于嵌套动画，你必须禁用这个缓存。</p>
<h2 id="ScrollingCache"><a href="#ScrollingCache" class="headerlink" title="ScrollingCache"></a>ScrollingCache</h2><p>在Layout布局中添加 <code>android:scrollingCache=&quot;false&quot;</code> ，或者调用方法 <code>public void setScrollingCacheEnabled(boolean enabled)</code> 。</p>
<blockquote>
<p>Enables or disables the children’s drawing cache during a scroll.<br>By default, the drawing cache is enabled but this will use more memory.</p>
<p>When the scrolling cache is enabled, the caches are kept after the first scrolling. You can manually clear the cache by calling android.view.ViewGroup.setChildrenDrawingCacheEnabled(boolean).</p>
</blockquote>
<p>在滚动期间执行子控件的绘制缓存。默认情况下，绘制缓存是开启的，但是这会导致使用更多的内存。当滑动缓存开启时，一开始滑动就保存了缓存，可以人工情况缓存。</p>
<h2 id="SmoothScrollbar"><a href="#SmoothScrollbar" class="headerlink" title="SmoothScrollbar"></a>SmoothScrollbar</h2><p>item 大小不一致的时候设置一下 <code>public void setSmoothScrollbarEnabled(boolean enabled)</code>可以让ListView滑动更流畅。</p>
<blockquote>
<p>When smooth scrollbar is enabled, the position and size of the scrollbar thumb is computed based on the number of visible pixels in the visible items. This however assumes that all list items have the same height. If you use a list in which items have different heights, the scrollbar will change appearance as the user scrolls through the list. To avoid this issue, you need to disable this property.</p>
<p>When smooth scrollbar is disabled, the position and size of the scrollbar thumb is based solely on the number of items in the adapter and the position of the visible items inside the adapter. This provides a stable scrollbar as the user navigates through a list of items with varying heights.</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zhihu.com/question/19703384" target="_blank" rel="external">优化 listview 有哪些方法？</a></li>
<li><a href="https://code.facebook.com/posts/879498888759525/fast-rendering-news-feed-on-android/" target="_blank" rel="external">Fast Rendering News Feed on Android</a></li>
<li><a href="http://instagram-engineering.tumblr.com/post/114508858967/improving-comment-rendering-on-android" target="_blank" rel="external">Improving Comment Rendering on Android</a></li>
<li><a href="http://lucasr.org/2012/04/05/performance-tips-for-androids-listview/" target="_blank" rel="external">Performance Tips for Android’s ListView</a></li>
<li><a href="https://www.bignerdranch.com/blog/customizing-android-listview-rows-subclassing/" target="_blank" rel="external">Customizing Android ListView Rows by Subclassing</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ListView </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
